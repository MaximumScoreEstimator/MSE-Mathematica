(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[     13895,        336]
NotebookOptionsPosition[     13012,        300]
NotebookOutlinePosition[     13446,        319]
CellTagsIndexPosition[     13403,        316]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["dataArray.nb", "Section",
 CellChangeTimes->{{3.62600628385137*^9, 3.626006284835745*^9}, {
  3.6260709487170696`*^9, 3.6260709533480415`*^9}, {3.626096953477417*^9, 
  3.6260969551364455`*^9}, {3.6261707215015993`*^9, 3.6261707234205446`*^9}, {
  3.6261736078812375`*^9, 3.6261736107103395`*^9}, {3.6263372687397165`*^9, 
  3.6263372730053415`*^9}, {3.6263379196147165`*^9, 3.6263379214897165`*^9}}],

Cell[CellGroupData[{

Cell["For the Developer", "Subsubsection",
 CellChangeTimes->{{3.5819225877880845`*^9, 3.581922592443351*^9}}],

Cell["\<\
AutoGeneratedPackage is an option for notebooks that specifies whether a \
package is automatically created when a notebook that contains initialization \
cells or groups is saved.\
\>", "Text",
 CellChangeTimes->{{3.5808982533077106`*^9, 3.580898259632072*^9}}],

Cell[BoxData[
 RowBox[{"SetOptions", "[", 
  RowBox[{
   RowBox[{"InputNotebook", "[", "]"}], ",", 
   RowBox[{"AutoGeneratedPackage", "\[Rule]", "Automatic"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.687961849345646*^9, 3.687961872863017*^9}, {
  3.6879627754887257`*^9, 3.687962775861054*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"$HistoryLength", "=", "0"}], ";"}]], "Input",
 CellChangeTimes->{{3.5816697178146343`*^9, 3.581669717815634*^9}}],

Cell[BoxData[
 RowBox[{"ClearSystemCache", "[", "]"}]], "Input",
 CellChangeTimes->{{3.581669726757145*^9, 3.5816697379287844`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Global Variables", "Subsubsection",
 CellChangeTimes->{{3.657291947453044*^9, 3.657291955069127*^9}}],

Cell["MSEresources, ineqmembers, groupIDs", "Text",
 CellChangeTimes->{{3.657291959749161*^9, 3.657291964173264*^9}, {
  3.6572920317819757`*^9, 3.657292051670274*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["CdataArray[payoffMatrix,xlist] + groupIDs", "Subsection",
 CellChangeTimes->{{3.6119214276834106`*^9, 3.611921433805637*^9}, {
   3.611921486876209*^9, 3.611921507220935*^9}, {3.611921567047522*^9, 
   3.611921570873694*^9}, {3.611921819881147*^9, 3.6119218714719954`*^9}, 
   3.611922316492015*^9, {3.611923472367948*^9, 3.6119234749025593`*^9}, {
   3.6119238538758183`*^9, 3.6119238929560623`*^9}, {3.6119240042360992`*^9, 
   3.611924005627701*^9}, {3.611924454564415*^9, 3.611924457438586*^9}, {
   3.6119328865951743`*^9, 3.611932891712042*^9}, {3.6572941564355307`*^9, 
   3.657294157323481*^9}}],

Cell["\<\
http://mathematica.stackexchange.com/questions/3496/what-is-a-mathematica-\
packed-array\
\>", "Text",
 CellChangeTimes->{3.6305689890982256`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "CdataArray", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"CdataArray", "::", "usage"}], "=", 
   "\"\<CdataArray[payoffMatrix,xlist,printflag] creates the dataArray. It \
works either using the \\\"Speed\\\" model or the \\\"Memory\\\" model. It \
uses ineqmembers and Cinequalities internally and for the memory model it \
erases ineqmembers after use.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"CdataArray", "[", 
   RowBox[{"payoffMatrix_", ",", "xlist_", ",", 
    RowBox[{"printflag_:", "False"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"dataarray", ",", "head"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"dataarray", "=", 
      RowBox[{"Cinequalities", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"payoffMatrix", "[", 
          RowBox[{"[", "##", "]"}], "]"}], "&"}], ",", 
        StyleBox["ineqmembers",
         Background->RGBColor[1, 1, 0]]}], "]"}]}], ";", 
     RowBox[{"If", "[", 
      RowBox[{"printflag", ",", 
       RowBox[{"Print", "[", 
        RowBox[{"1", ",", "\"\<  \>\"", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"ByteCount", "@", "dataarray"}], ",", 
           RowBox[{"MemoryInUse", "[", "]"}], ",", 
           RowBox[{"MaxMemoryUsed", "[", "]"}]}], "}"}]}], "]"}]}], "]"}], 
     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{
       StyleBox["MSEresources",
        Background->RGBColor[1, 1, 0]], ",", "\[IndentingNewLine]", 
       "\"\<Memory\>\"", ",", 
       RowBox[{
        RowBox[{"head", "=", "Uncompress"}], ";", 
        RowBox[{"ClearAll", "[", 
         StyleBox["ineqmembers",
          Background->RGBColor[1, 1, 0]], "]"}]}], ",", 
       "\[IndentingNewLine]", "\"\<Speed\>\"", ",", 
       RowBox[{
        RowBox[{"head", "=", "Identity"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      StyleBox["groupIDs",
       Background->RGBColor[1, 1, 0]], "=", "\[IndentingNewLine]", 
      RowBox[{"Developer`ToPackedArray", "[", "\[IndentingNewLine]", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"MapIndexed", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Table", "[", 
             RowBox[{"#2", ",", 
              RowBox[{"{", "#1", "}"}]}], "]"}], "&"}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{"head", "@", "#"}], "]"}], "&"}], "/@", "dataarray"}]}],
           "]"}], ",", "1"}], "]"}], "\[IndentingNewLine]", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"printflag", ",", 
       RowBox[{"Print", "[", 
        RowBox[{"2", ",", "\"\<  \>\"", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"ByteCount", "@", 
            StyleBox["groupIDs",
             Background->RGBColor[1, 1, 0]]}], ",", 
           RowBox[{"MemoryInUse", "[", "]"}], ",", 
           RowBox[{"MaxMemoryUsed", "[", "]"}]}], "}"}]}], "]"}]}], "]"}], 
     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"dataarray", "=", 
      RowBox[{"(", 
       RowBox[{"head", "/@", "dataarray"}], ")"}]}], ";", 
     RowBox[{"If", "[", 
      RowBox[{"printflag", ",", 
       RowBox[{"Print", "[", 
        RowBox[{"3", ",", "\"\<  \>\"", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"ByteCount", "@", "dataarray"}], ",", 
           RowBox[{"MemoryInUse", "[", "]"}], ",", 
           RowBox[{"MaxMemoryUsed", "[", "]"}]}], "}"}]}], "]"}]}], "]"}], 
     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"dataarray", "=", 
      RowBox[{"Flatten", "@", "dataarray"}]}], ";", 
     RowBox[{"If", "[", 
      RowBox[{"printflag", ",", 
       RowBox[{"Print", "[", 
        RowBox[{"4", ",", "\"\<  \>\"", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"ByteCount", "@", "dataarray"}], ",", 
           RowBox[{"MemoryInUse", "[", "]"}], ",", 
           RowBox[{"MaxMemoryUsed", "[", "]"}]}], "}"}]}], "]"}]}], "]"}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"dataarray", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"Flatten", "@", 
         RowBox[{"Normal", "@", 
          RowBox[{"CoefficientArrays", "[", 
           RowBox[{"#", ",", "xlist"}], "]"}]}]}], "&"}], "/@", 
       "dataarray"}]}], ";", 
     RowBox[{"If", "[", 
      RowBox[{"printflag", ",", 
       RowBox[{"Print", "[", 
        RowBox[{"5", ",", "\"\<  \>\"", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"ByteCount", "@", "dataarray"}], ",", 
           RowBox[{"MemoryInUse", "[", "]"}], ",", 
           RowBox[{"MaxMemoryUsed", "[", "]"}]}], "}"}]}], "]"}]}], "]"}], 
     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"Scan", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{"dataarray", "[", 
             RowBox[{"[", "#", "]"}], "]"}], "]"}], "\[Equal]", "1"}], ",", 
          RowBox[{
           RowBox[{"dataarray", "[", 
            RowBox[{"[", "#", "]"}], "]"}], "=", 
           RowBox[{"PadRight", "[", 
            RowBox[{
             RowBox[{"dataarray", "[", 
              RowBox[{"[", "#", "]"}], "]"}], ",", 
             RowBox[{
              RowBox[{"Length", "[", "xlist", "]"}], "+", "1"}], ",", "0"}], 
            "]"}]}]}], "]"}], "&"}], ",", 
       RowBox[{"Range", "@", 
        RowBox[{"Length", "@", "dataarray"}]}]}], "]"}], ";", 
     RowBox[{"If", "[", 
      RowBox[{"printflag", ",", 
       RowBox[{"Print", "[", 
        RowBox[{"6", ",", "\"\<  \>\"", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"ByteCount", "@", "dataarray"}], ",", 
           RowBox[{"MemoryInUse", "[", "]"}], ",", 
           RowBox[{"MaxMemoryUsed", "[", "]"}]}], "}"}]}], "]"}]}], "]"}], 
     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"dataArray", "=", 
      RowBox[{"Developer`ToPackedArray", "[", 
       RowBox[{"dataarray", ",", "Real"}], "]"}]}]}]}], "\[IndentingNewLine]",
    "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.6080216407321196`*^9, 3.6080216474035015`*^9}, {
   3.6119219073221045`*^9, 3.611921920687592*^9}, {3.6119219840108795`*^9, 
   3.6119219865071263`*^9}, {3.6119239075472927`*^9, 3.611923912621789*^9}, {
   3.6119239572659273`*^9, 3.611923962226577*^9}, {3.611923993879654*^9, 
   3.6119239950700836`*^9}, {3.6119240343793573`*^9, 3.611924093244464*^9}, {
   3.611924140546576*^9, 3.611924162269919*^9}, 3.611924403841462*^9, {
   3.611924437849942*^9, 3.61192444710668*^9}, {3.611924891832567*^9, 
   3.611924893655567*^9}, {3.611929754123032*^9, 3.6119297896034822`*^9}, {
   3.6119298658359804`*^9, 3.611929865981967*^9}, {3.6119299101672945`*^9, 
   3.6119299352017183`*^9}, {3.611930075080635*^9, 3.6119300764754047`*^9}, {
   3.6265110635477695`*^9, 3.6265111065030336`*^9}, {3.6305676909576006`*^9, 
   3.6305677259107256`*^9}, {3.6305678401919756`*^9, 
   3.6305678481451006`*^9}, {3.6305696834283037`*^9, 
   3.6305696849595537`*^9}, {3.6306116375030885`*^9, 3.630611851493347*^9}, {
   3.630613259667677*^9, 3.630613298308302*^9}, {3.6306757178634043`*^9, 
   3.6306757243009043`*^9}, {3.630680590379029*^9, 3.630680591597779*^9}, {
   3.6307251496539297`*^9, 3.630725178498214*^9}, {3.6307253529715004`*^9, 
   3.630725359399332*^9}, {3.6307253899416904`*^9, 3.630725393286398*^9}, {
   3.630726133263694*^9, 3.6307261640604057`*^9}, {3.630726296679553*^9, 
   3.630726306735217*^9}, {3.6307267998031273`*^9, 3.6307268370042987`*^9}, {
   3.6307269505211782`*^9, 3.630726951487012*^9}, {3.630727050666542*^9, 
   3.630727064154986*^9}, {3.63072735440425*^9, 3.630727459482916*^9}, {
   3.6307275420715284`*^9, 3.6307275592867093`*^9}, 3.630727806823038*^9, {
   3.6307285510154653`*^9, 3.6307285887659874`*^9}, {3.630728633628292*^9, 
   3.630728663480831*^9}, {3.630729927121316*^9, 3.630729930053933*^9}, {
   3.630729968553031*^9, 3.6307299711414986`*^9}, {3.63073256557946*^9, 
   3.6307325701185226`*^9}, {3.6307330856845837`*^9, 
   3.6307330936088552`*^9}, {3.63073319152781*^9, 3.6307332326854897`*^9}, {
   3.6307334837952986`*^9, 3.630733484250759*^9}, 3.6307335502068653`*^9, {
   3.630733994464261*^9, 3.6307340022737093`*^9}, {3.630736205009231*^9, 
   3.630736210099519*^9}, {3.630738231657999*^9, 3.630738295832733*^9}, {
   3.6307383401401634`*^9, 3.6307383704042034`*^9}, {3.630738435681895*^9, 
   3.630738439439186*^9}, {3.630738547721838*^9, 3.6307385984547396`*^9}, {
   3.6307386558871274`*^9, 3.6307386586410336`*^9}, {3.630740399455869*^9, 
   3.630740403576963*^9}, {3.6307405094011154`*^9, 3.6307405492399025`*^9}, {
   3.630740626754966*^9, 3.630740627545005*^9}, {3.630741610893502*^9, 
   3.6307416388004584`*^9}, {3.6307417079905405`*^9, 3.630741750282628*^9}, {
   3.6307431263365264`*^9, 3.630743133087503*^9}, {3.6307432558446264`*^9, 
   3.6307432561665707`*^9}, {3.6307652470086813`*^9, 
   3.6307652495555563`*^9}, {3.6307655807899313`*^9, 
   3.6307655831493063`*^9}, {3.6307738839521875`*^9, 
   3.6307739272646875`*^9}, {3.6311747370117693`*^9, 
   3.6311748435117693`*^9}, {3.631177026589895*^9, 3.6311770446992693`*^9}, {
   3.6311776943242693`*^9, 3.6311776981367693`*^9}, {3.6311777950117693`*^9, 
   3.631177882808645*^9}, {3.6311787513867693`*^9, 3.631178769558645*^9}, 
   3.631179107839895*^9, {3.6327415528869247`*^9, 3.6327416879085827`*^9}, {
   3.633071953300086*^9, 3.6330719548346944`*^9}, {3.688008021786849*^9, 
   3.688008024784863*^9}, {3.688008067050331*^9, 3.6880081312422132`*^9}, {
   3.6935549892852364`*^9, 3.693554989996978*^9}},
 Background->RGBColor[0.88, 1, 0.88]]
}, Open  ]]
}, Open  ]]
},
AutoGeneratedPackage->Automatic,
WindowSize->{1920, 1014},
WindowMargins->{{339, -339}, {-234, Automatic}},
ShowSelection->True,
AutoIndent->True,
Magnification->1.25,
FrontEndVersion->"10.0 for Microsoft Windows (32-bit) (July 1, 2014)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 406, 5, 86, "Section"],
Cell[CellGroupData[{
Cell[1010, 31, 110, 1, 49, "Subsubsection"],
Cell[1123, 34, 272, 5, 38, "Text"],
Cell[1398, 41, 296, 6, 36, "Input"],
Cell[1697, 49, 148, 3, 36, "Input"],
Cell[1848, 54, 132, 2, 36, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2017, 61, 107, 1, 49, "Subsubsection"],
Cell[2127, 64, 168, 2, 38, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2332, 71, 609, 8, 59, "Subsection"],
Cell[2944, 81, 156, 4, 38, "Text"],
Cell[3103, 87, 9881, 209, 701, "Input",
 InitializationCell->True]
}, Open  ]]
}, Open  ]]
}
]
*)

