(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
ClearAll[Cineqmembers];
Cineqmembers::usage="Cineqmembers[mate] generates all the members required to form the inequalities for many to many relationships defined by the mate. The produced list of lists of triples define also the way inequalities are formed. At this time there is only one way we have to create inequalities. CAUTION: ineqmembers is the largest object so it consumes a lot of memory. This is why we use MSEresources=\"Memory\" when it is needed. Be carefull because then ineqmembers are erased after used for the dataArray calculation (only in the memory model).";
Cineqmembers[mate_]:=Block[{marketineqs,head},

Switch[MSEresources,
"Memory",head=Compress,
"Speed",head=Identity
];

marketineqs[marketid_]:=Block[{n},
n=Length[mate[[marketid,1]]];
{
(*Factual*)
Flatten[Table[Join[
{marketid,mate[[marketid,1,i,1]],#}&/@mate[[marketid,2,i]],
{marketid,mate[[marketid,1,j,1]],#}&/@mate[[marketid,2,j]]
],{i,1,n},{j,i+1,n}],1],
(*CounterFactual*)
Flatten[Table[Join[
{marketid,mate[[marketid,1,i,1]],#}&/@mate[[marketid,2,j]],
{marketid,mate[[marketid,1,j,1]],#}&/@mate[[marketid,2,i]]
],{i,1,n},{j,i+1,n}],1]
}
];

ineqmembers=Table[head/@(marketineqs[i]),{i,Length@mate}]
]


(* ::Input::Initialization:: *)
Cineqmembers[mate_,"pairwise",nd_:noD]:=Block[{ineqsleft,ineqsright,head},
Switch[MSEresources,
"Memory",head=Compress,
"Speed",head=Identity
];

ineqsleft[m_,u_,d_]:=Block[{list},
list=Delete[Range[nd[[m]]],List/@d];
Flatten[Table[{{m,u,i}},{i,d},{Length[list]}],1]
];
ineqsright[m_,u_,d_]:=Block[{list},
list=Delete[Range[nd[[m]]],List/@d];
Flatten[Table[{{m,u,#}}&/@list,{Length@d}],1]
];

ineqmembers=
Table[head/@{
(*Factual*)
Flatten[ineqsleft[m,#[[1,1]],#[[2]]]&/@(Transpose@mate[[m]]),1]
,
(*CounterFactual*)
Flatten[ineqsright[m,#[[1,1]],#[[2]]]&/@(Transpose@mate[[m]]),1]
},{m,Length@mate}]
]


(* ::Input::Initialization:: *)
(*See screenshot under material*)
Cineqmembers[mate_,"triples"]:=Block[{marketineqs,head},

Switch[MSEresources,
"Memory",head=Compress,
"Speed",head=Identity
];

marketineqs[marketid_]:=Block[{n},
n=Length[mate[[marketid,1]]];
{
(*Factual*)
Join[
Flatten[Table[Join[
{marketid,mate[[marketid,1,i,1]],#}&/@mate[[marketid,2,i]],
{marketid,mate[[marketid,1,j,1]],#}&/@mate[[marketid,2,j]],
{marketid,mate[[marketid,1,k,1]],#}&/@mate[[marketid,2,k]]
],{i,1,n},{j,i+1,n},{k,j+1,n}],2]
,
Flatten[Table[Join[
{marketid,mate[[marketid,1,i,1]],#}&/@mate[[marketid,2,i]],
{marketid,mate[[marketid,1,j,1]],#}&/@mate[[marketid,2,j]],
{marketid,mate[[marketid,1,k,1]],#}&/@mate[[marketid,2,k]]
],{i,1,n},{j,i+1,n},{k,j+1,n}],2]
],
(*CounterFactual*)
Join[
Flatten[Table[Join[
{marketid,mate[[marketid,1,i,1]],#}&/@mate[[marketid,2,j]],
{marketid,mate[[marketid,1,j,1]],#}&/@mate[[marketid,2,k]],
{marketid,mate[[marketid,1,k,1]],#}&/@mate[[marketid,2,i]]
],{i,1,n},{j,i+1,n},{k,j+1,n}],2]
,
Flatten[Table[Join[
{marketid,mate[[marketid,1,i,1]],#}&/@mate[[marketid,2,k]],
{marketid,mate[[marketid,1,j,1]],#}&/@mate[[marketid,2,i]],
{marketid,mate[[marketid,1,k,1]],#}&/@mate[[marketid,2,j]]
],{i,1,n},{j,i+1,n},{k,j+1,n}],2]
]
}
];

ineqmembers=Table[head/@(marketineqs[i]),{i,Length@mate}]
]


(* ::Input::Initialization:: *)
ClearAll[Cinequalities];
Cinequalities::usage="Cinequalities[f,ineqmembers] apply properly the f function to ineqmembers to create inequalities. This routine is called by CdataArray internally where as a function it uses payoffMatrix[[##]]&.";
Cinequalities[f_,ineqmembers_]:=Module[{headin,headout},
Switch[MSEresources,
"Memory",headout=Compress;headin=Uncompress,
"Speed",headout=Identity;headin=Identity
];
inequalities=Map[
headout@Flatten[-Differences@Map[Total,Apply[f,headin/@#,{3}],{2}],1]&
,ineqmembers]]



