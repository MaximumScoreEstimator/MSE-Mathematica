(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[   2028064,      40935]
NotebookOptionsPosition[   1922283,      39770]
NotebookOutlinePosition[   1924336,      39818]
CellTagsIndexPosition[   1924065,      39809]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["maximize.nb", "Section",
 CellChangeTimes->{{3.62600628385137*^9, 3.626006284835745*^9}, {
  3.6260709487170696`*^9, 3.6260709533480415`*^9}, {3.626096953477417*^9, 
  3.6260969551364455`*^9}, {3.6261707215015993`*^9, 3.6261707234205446`*^9}, {
  3.6261736078812375`*^9, 3.6261736107103395`*^9}, {3.6263372687397165`*^9, 
  3.6263372730053415`*^9}, {3.6263379196147165`*^9, 3.6263379214897165`*^9}, {
  3.6263385349740915`*^9, 3.6263385373022165`*^9}, {3.6263390808490915`*^9, 
  3.6263390821459665`*^9}}],

Cell[CellGroupData[{

Cell["For the Developer", "Subsubsection",
 CellChangeTimes->{{3.5819225877880845`*^9, 3.581922592443351*^9}}],

Cell["\<\
AutoGeneratedPackage is an option for notebooks that specifies whether a \
package is automatically created when a notebook that contains initialization \
cells or groups is saved.\
\>", "Text",
 CellChangeTimes->{{3.5808982533077106`*^9, 3.580898259632072*^9}}],

Cell[BoxData[
 RowBox[{"SetOptions", "[", 
  RowBox[{
   RowBox[{"InputNotebook", "[", "]"}], ",", 
   RowBox[{"AutoGeneratedPackage", "\[Rule]", "Automatic"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"$HistoryLength", "=", "0"}], ";"}]], "Input",
 CellChangeTimes->{{3.5816697178146343`*^9, 3.581669717815634*^9}}],

Cell[BoxData[
 RowBox[{"ClearSystemCache", "[", "]"}]], "Input",
 CellChangeTimes->{{3.581669726757145*^9, 3.5816697379287844`*^9}}],

Cell[BoxData[{
 RowBox[{"directory", "=", 
  RowBox[{"NotebookDirectory", "[", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Get", "[", 
  RowBox[{"\"\<mse.m\>\"", ",", 
   RowBox[{"Path", "\[Rule]", "directory"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.6392064512024283`*^9, 3.6392064555015736`*^9}, {
  3.6392064862997465`*^9, 3.6392065233606443`*^9}, {3.6392250169707823`*^9, 
  3.6392250177207823`*^9}, {3.6535358489289207`*^9, 3.653535855296494*^9}, {
  3.709482620021003*^9, 3.70948262065952*^9}},
 Background->GrayLevel[
  0.85],ExpressionUUID->"33897e8c-02a3-4085-9051-ff0a98a5381c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Echo", "[", "\"\<Loaded maximize.m\>\"", "]"}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.711434116821677*^9, 3.711434132168717*^9}, {
  3.711434316073223*^9, 3.711434320192101*^9}, {3.711435298340328*^9, 
  3.711435299859467*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"42541344-c81c-4f5f-9020-1258a100c94a"],

Cell[BoxData["\<\"Loaded maximize.m\"\>"], "Echo",
 CellChangeTimes->{
  3.7114353043793907`*^9},ExpressionUUID->"6dfd7a2e-c0db-47fc-9e74-\
f3c4322232fa"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Maximization", "Subsection",
 CellChangeTimes->{{3.611948044383144*^9, 3.611948051193654*^9}}],

Cell["\<\
Differential evolution is a simple stochastic function minimizer.\
\>", "Text",
 CellID->15517963],

Cell[TextData[{
 "The algorithm maintains a population of ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]], "InlineMath"],
 " points, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["x", "1"], ",", 
     SubscriptBox["x", "2"], ",", "\[Ellipsis]", ",", 
     SubscriptBox["x", "j"], ",", "\[Ellipsis]", ",", 
     SubscriptBox["x", "m"]}], "}"}], TraditionalForm]], "InlineMath"],
 ", where typically ",
 Cell[BoxData[
  FormBox[
   RowBox[{"m", "\[GreaterGreater]", 
    StyleBox["n", "TI"]}], TraditionalForm]], "InlineMath"],
 ", with ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]], "InlineMath"],
 " being the number of variables. "
}], "Text",
 CellID->400968379],

Cell[TextData[{
 "During each iteration of the algorithm, a new population of ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]], "InlineMath"],
 " points is generated. The ",
 Cell[BoxData[
  FormBox["j", TraditionalForm]], "InlineMath"],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[Null]", "th"], TraditionalForm]]],
 " new point is generated by picking three random points, ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "u"], TraditionalForm]], "InlineMath"],
 ", ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "v"], TraditionalForm]], "InlineMath"],
 ", and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "w"], TraditionalForm]], "InlineMath"],
 ", from the old population, and forming ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["x", "s"], "\[LongEqual]", 
    RowBox[{
     SubscriptBox["x", "w"], "+", 
     RowBox[{"s", "(", 
      RowBox[{
       SubscriptBox["x", "u"], "-", 
       SubscriptBox["x", "v"]}], ")"}]}]}], TraditionalForm]], "InlineMath"],
 ", where ",
 Cell[BoxData[
  FormBox["s", TraditionalForm]], "InlineMath"],
 " is a real scaling factor. Then a new point ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "new"], TraditionalForm]], "InlineMath"],
 " is constructed from ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "j"], TraditionalForm]], "InlineMath"],
 " and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "s"], TraditionalForm]], "InlineMath"],
 " by taking the ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]], "InlineMath"],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[Null]", "th"], TraditionalForm]]],
 " coordinate from ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "s"], TraditionalForm]], "InlineMath"],
 " with probability ",
 Cell[BoxData[
  FormBox["\[Rho]", TraditionalForm]], "InlineMath"],
 " and otherwise taking the coordinate from ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "j"], TraditionalForm]], "InlineMath"],
 ". If ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", 
     SubscriptBox["x", "new"], ")"}], "<", 
    RowBox[{"f", "(", 
     SubscriptBox["x", "j"], ")"}]}], TraditionalForm]], "InlineMath"],
 ", then ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "new"], TraditionalForm]], "InlineMath"],
 " replaces ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "j"], TraditionalForm]], "InlineMath"],
 " in the population. The probability ",
 Cell[BoxData[
  FormBox["\[Rho]", TraditionalForm]], "InlineMath"],
 " is controlled by the ",
 Cell[BoxData["\"\<CrossProbability\>\""], "InlineFormula"],
 " option."
}], "Text",
 CellID->134958075],

Cell["\<\
The process is assumed to have converged if the difference between the best \
function values in the new and old populations, as well as the distance \
between the new best point and the old best point, are less than the \
tolerances provided by AccuracyGoal and PrecisionGoal.\
\>", "Text",
 CellChangeTimes->{{3.621918027988507*^9, 3.6219180497541313`*^9}},
 CellID->666318363],

Cell["\<\
The differential evolution method is computationally expensive, but is \
relatively robust and tends to work well for problems that have more local \
minima.\
\>", "Text",
 CellID->373195045],

Cell["\<\
The differential evolution method is computationally expensive, but is \
relatively robust and tends to work well for problems that have more local \
minima.\
\>", "Text",
 CellID->373302394],

Cell[BoxData[GridBox[{
   {Cell["option name", "TableHeader"], Cell["default value", "TableHeader"], 
    " "},
   {"\"\<CrossProbability\>\"", "0.5", Cell[TextData[{
     "probability that a gene is taken from ",
     Cell[BoxData[
      SubscriptBox[
       StyleBox["x", "TI"], 
       StyleBox["i", "TI"]]], "InlineFormula"]
    }], "TableText"]},
   {"\"\<InitialPoints\>\"", 
    ButtonBox["Automatic",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/Automatic"], Cell[
    "set of initial points ", "TableText"]},
   {"\"\<PenaltyFunction\>\"", 
    ButtonBox["Automatic",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/Automatic"], Cell[
    "function applied to constraints to penalize invalid points", 
     "TableText"]},
   {"\"\<PostProcess\>\"", 
    ButtonBox["Automatic",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/Automatic"], Cell[
    "whether to post-process using local search methods ", "TableText"]},
   {"\"\<RandomSeed\>\"", "0", Cell[
    "starting value for the random number generator", "TableText"]},
   {"\"\<ScalingFactor\>\"", "0.6", Cell[
    "scale applied to the difference vector in creating a mate ", 
     "TableText"]},
   {"\"\<SearchPoints\>\"", 
    ButtonBox["Automatic",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/Automatic"], Cell[
    "size of the population used for evolution ", "TableText"]},
   {"\"\<Tolerance\>\"", "0.001", Cell[
    "tolerance for accepting constraint violations ", "TableText"]}
  }]], "DefinitionBox3Col",
 GridBoxOptions->{
 GridBoxDividers->{
  "Columns" -> {{False}}, "ColumnsIndexed" -> {}, 
   "Rows" -> {False, True, {False}, False}, "RowsIndexed" -> {}}},
 CellID->18427541],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"AccuracyGoal", ",", "PrecisionGoal"}], "}"}]], "Input",
 CellChangeTimes->{{3.621919840782039*^9, 3.6219198557019787`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"AccuracyGoal", ",", "PrecisionGoal"}], "}"}]], "Output",
 CellChangeTimes->{{3.6219198465926275`*^9, 3.6219198564116096`*^9}, 
   3.630231769885928*^9}]
}, Open  ]],

Cell["\<\
Useful Links : 
http://mathematica.stackexchange.com/questions/21289/problem-using-the-\
differentialevolution-method-of-nminimize

http://library.wolfram.com/infocenter/MathSource/7623/DE_discrete_\
combinatorial_tutorial.pdf\
\>", "Text",
 CellChangeTimes->{{3.6220826711065483`*^9, 3.6220826787656775`*^9}, {
   3.6220827763707533`*^9, 3.6220827915891876`*^9}, {3.622086427975074*^9, 
   3.622086432649878*^9}, {3.622086646176319*^9, 3.6220866489040823`*^9}, {
   3.622089042652356*^9, 3.622089043331067*^9}, 3.6854662547020063`*^9}],

Cell["\<\
MaxIterations
\tis an option that specifies the maximum number of iterations that should be \
tried in various build-in functions and algorithms.\
\>", "Text",
 CellChangeTimes->{{3.6220867899053507`*^9, 3.6220868353816986`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["optimize wrapper", "Section",
 CellChangeTimes->{{3.6265069534299345`*^9, 3.6265069601851463`*^9}}],

Cell["\<\
The complete list of possible methods is given by \
Optimization`NMinimizeDump`$Methods:\
\>", "Text",
 CellChangeTimes->{3.626505024877863*^9}],

Cell[CellGroupData[{

Cell[BoxData["Optimization`NMinimizeDump`$Methods"], "Input",
 CellChangeTimes->{{3.6265050356058545`*^9, 3.626505090302606*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Automatic\"\>", ",", "\<\"DifferentialEvolution\"\>", 
   ",", "\<\"NelderMead\"\>", ",", "\<\"SimulatedAnnealing\"\>", 
   ",", "\<\"RandomSearch\"\>", ",", "\<\"NonlinearInteriorPoint\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.6265050371218863`*^9, 3.626505091689325*^9, 
  3.630486630650443*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"#", ",", 
     RowBox[{"Options", "[", "#", "]"}]}], "}"}], "&"}], "/@", 
  RowBox[{"ToExpression", "/@", 
   RowBox[{"Names", "[", "\"\<NMinimize`*\>\"", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.630486354916068*^9, 3.630486497072318*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"NMinimize`DifferentialEvolution", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\<\"CrossProbability\"\>", "\[Rule]", 
        FractionBox["1", "2"]}], ",", 
       RowBox[{"\<\"InitialPoints\"\>", "\[Rule]", "Automatic"}], ",", 
       RowBox[{"\<\"PenaltyFunction\"\>", "\[Rule]", "Automatic"}], ",", 
       RowBox[{"\<\"PostProcess\"\>", "\[Rule]", "Automatic"}], ",", 
       RowBox[{"\<\"RandomSeed\"\>", "\[Rule]", "0"}], ",", 
       RowBox[{"\<\"ScalingFactor\"\>", "\[Rule]", 
        FractionBox["3", "5"]}], ",", 
       RowBox[{"\<\"SearchPoints\"\>", "\[Rule]", "Automatic"}], ",", 
       RowBox[{"\<\"Tolerance\"\>", "\[Rule]", "0.001`"}]}], "}"}]}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"NMinimize`NelderMead", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\<\"ContractRatio\"\>", "\[Rule]", 
        FractionBox["1", "2"]}], ",", 
       RowBox[{"\<\"ExpandRatio\"\>", "\[Rule]", "2"}], ",", 
       RowBox[{"\<\"InitialPoints\"\>", "\[Rule]", "Automatic"}], ",", 
       RowBox[{"\<\"PenaltyFunction\"\>", "\[Rule]", "Automatic"}], ",", 
       RowBox[{"\<\"PostProcess\"\>", "\[Rule]", "Automatic"}], ",", 
       RowBox[{"\<\"RandomSeed\"\>", "\[Rule]", "0"}], ",", 
       RowBox[{"\<\"ReflectRatio\"\>", "\[Rule]", "1"}], ",", 
       RowBox[{"\<\"ShrinkRatio\"\>", "\[Rule]", 
        FractionBox["1", "2"]}], ",", 
       RowBox[{"\<\"Tolerance\"\>", "\[Rule]", "0.001`"}]}], "}"}]}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"NMinimize`NonlinearInteriorPoint", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\<\"InitialPoints\"\>", "\[Rule]", "Automatic"}], ",", 
       RowBox[{"\<\"PostProcess\"\>", "\[Rule]", "Automatic"}], ",", 
       RowBox[{"\<\"PenaltyFunction\"\>", "\[Rule]", "Automatic"}], ",", 
       RowBox[{"\<\"Tolerance\"\>", "\[Rule]", "0.001`"}]}], "}"}]}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"NMinimize`RandomSearch", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\<\"InitialPoints\"\>", "\[Rule]", "Automatic"}], ",", 
       RowBox[{"\<\"Method\"\>", "\[Rule]", "Automatic"}], ",", 
       RowBox[{"\<\"PenaltyFunction\"\>", "\[Rule]", "Automatic"}], ",", 
       RowBox[{"\<\"PostProcess\"\>", "\[Rule]", "Automatic"}], ",", 
       RowBox[{"\<\"RandomSeed\"\>", "\[Rule]", "0"}], ",", 
       RowBox[{"\<\"SearchPoints\"\>", "\[Rule]", "Automatic"}], ",", 
       RowBox[{"\<\"Tolerance\"\>", "\[Rule]", "0.001`"}]}], "}"}]}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"NMinimize`SimulatedAnnealing", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\<\"BoltzmannExponent\"\>", "\[Rule]", "Automatic"}], ",", 
       RowBox[{"\<\"InitialPoints\"\>", "\[Rule]", "Automatic"}], ",", 
       RowBox[{"\<\"LevelIterations\"\>", "\[Rule]", "50"}], ",", 
       RowBox[{"\<\"PenaltyFunction\"\>", "\[Rule]", "Automatic"}], ",", 
       RowBox[{"\<\"PerturbationScale\"\>", "\[Rule]", "1"}], ",", 
       RowBox[{"\<\"PostProcess\"\>", "\[Rule]", "Automatic"}], ",", 
       RowBox[{"\<\"RandomSeed\"\>", "\[Rule]", "0"}], ",", 
       RowBox[{"\<\"SearchPoints\"\>", "\[Rule]", "Automatic"}], ",", 
       RowBox[{"\<\"Tolerance\"\>", "\[Rule]", "0.001`"}]}], "}"}]}], "}"}]}],
   "}"}]], "Output",
 CellChangeTimes->{{3.630486436447318*^9, 3.630486497869193*^9}, 
   3.630486635900443*^9}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"maxIterations", "=", "Automatic"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"seedrandom", "=", "0"}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.6220869170174665`*^9, 3.6220869257789316`*^9}, {
  3.717729612097364*^9, 3.71772961880402*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"9b68298c-e402-4647-95c5-d3abcd4ac6bd"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "optimize", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"optimize", "::", "method"}], "=", 
   "\"\<I cannot recognize an optimization method named \\\"`1`\\\".\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"optimize", "[", "\"\<methods\>\"", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"\"\<Automatic\>\"", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<DifferentialEvolution\>\"", ",", 
       RowBox[{"\"\<CrossProbability\>\"", "\[Rule]", "0.5"}], ",", 
       RowBox[{"\"\<InitialPoints\>\"", "\[Rule]", "Automatic"}], ",", 
       RowBox[{"\"\<PenaltyFunction\>\"", "\[Rule]", "Automatic"}], ",", 
       RowBox[{"\"\<PostProcess\>\"", "\[Rule]", "Automatic"}], ",", 
       RowBox[{"\"\<RandomSeed\>\"", "\[Rule]", "0"}], ",", 
       RowBox[{"\"\<ScalingFactor\>\"", "\[Rule]", "0.6"}], ",", 
       RowBox[{"\"\<SearchPoints\>\"", "\[Rule]", "Automatic"}], ",", 
       RowBox[{"\"\<Tolerance\>\"", "\[Rule]", "0.001"}]}], "}"}], ",", 
     "\"\<NelderMead\>\"", ",", "\"\<SimulatedAnnealing\>\"", ",", 
     "\"\<RandomSearch\>\"", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<ParticleSwarmOptimization\>\"", ",", 
       RowBox[{"\"\<nparts\>\"", "\[Rule]", "32"}], ",", 
       RowBox[{"\"\<bndLo\>\"", "\[Rule]", 
        RowBox[{"-", "10"}]}], ",", 
       RowBox[{"\"\<bndUp\>\"", "\[Rule]", "10"}], ",", 
       RowBox[{"\"\<niter\>\"", "\[Rule]", "100"}], ",", 
       RowBox[{"\"\<r\>\"", "\[Rule]", "1"}], ",", 
       StyleBox[
        RowBox[{"\"\<RandomSeed\>\"", "\[Rule]", "seedrandom"}],
        Background->RGBColor[1, 1, 0]]}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"optimize", "::", "usage"}], "=", 
   "\"\<optimize[f,x,method] is a wrapper that involves several separated \
optimization methods. f must be defined as a pure function in the sense \
f=func[Sequence@@#]&. x is a list of uknowns {x1,x2,...,xn}. Implemented \
methods for now include Mathematica's DifferentialEvolution, \
SimulatedAnnealing, RandomSearch, NelderMead. ParticleSwarmOptimization is an \
external method (PSO).\\r\n\nEach method carries its own parameters. Default \
parameters can be changed as in the following examples:\n\nexample1:\n\
optimize[\\\"parameters\\\"] = { {\\\"ParticleSwarmOptimization\\\", 32, 0, \
10, 100, 8}};\n\nexample2:\nmethod -> {\\\"DifferentialEvolution\\\", \
\\\"CrossProbability\\\" -> 0.5,  \\\"ScalingFactor\\\" -> 0.6, \
\\\"RandomSeed\\\" -> 0, \\\"SearchPoints\\\" -> 200}\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"optimize", "[", 
    RowBox[{"f_", ",", "x_", ",", 
     RowBox[{"method_:", "\"\<DifferentialEvolution\>\""}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"f1", ",", "sol", ",", "m"}], "}"}], ",", "\[IndentingNewLine]",
      "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"objectivecounter", "=", "0"}], ";", " ", 
      RowBox[{"(*", 
       RowBox[{"Initialize", " ", "calls", " ", "to", " ", "0"}], "*)"}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"m", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"StringQ", "@", "method"}], ",", "method", ",", 
         RowBox[{"method", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{
       "m", ",", "\[IndentingNewLine]", "\"\<Automatic\>\"", ",", 
        "\[IndentingNewLine]", "\t", 
        RowBox[{"sol", "=", 
         RowBox[{"NMaximize", "[", 
          RowBox[{
           RowBox[{"f", "[", "x", "]"}], ",", "x", ",", 
           RowBox[{"MaxIterations", "\[Rule]", "maxIterations"}], ",", 
           RowBox[{"Method", "\[Rule]", "method"}], ",", 
           RowBox[{"StepMonitor", "\[RuleDelayed]", " ", 
            RowBox[{"Sow", "[", "x", "]"}]}]}], "]"}]}], ",", 
        "\[IndentingNewLine]", "\"\<DifferentialEvolution\>\"", ",", 
        "\[IndentingNewLine]", "\t", 
        RowBox[{"sol", "=", 
         RowBox[{"NMaximize", "[", 
          RowBox[{
           RowBox[{"f", "[", "x", "]"}], ",", "x", ",", 
           RowBox[{"MaxIterations", "\[Rule]", "maxIterations"}], ",", 
           RowBox[{"Method", "\[Rule]", "method"}], ",", 
           RowBox[{"StepMonitor", "\[RuleDelayed]", " ", 
            RowBox[{"Sow", "[", "x", "]"}]}]}], "]"}]}], ",", 
        "\[IndentingNewLine]", "\"\<SimulatedAnnealing\>\"", ",", 
        "\[IndentingNewLine]", "\t", 
        RowBox[{"sol", "=", 
         RowBox[{"NMaximize", "[", 
          RowBox[{
           RowBox[{"f", "[", "x", "]"}], ",", "x", ",", 
           RowBox[{"MaxIterations", "\[Rule]", "maxIterations"}], ",", 
           RowBox[{"Method", "\[Rule]", "method"}], ",", 
           RowBox[{"StepMonitor", "\[RuleDelayed]", " ", 
            RowBox[{"Sow", "[", "x", "]"}]}]}], "]"}]}], ",", 
        "\[IndentingNewLine]", "\"\<RandomSearch\>\"", ",", 
        "\[IndentingNewLine]", "\t", 
        RowBox[{"sol", "=", 
         RowBox[{"NMaximize", "[", 
          RowBox[{
           RowBox[{"f", "[", "x", "]"}], ",", "x", ",", 
           RowBox[{"MaxIterations", "\[Rule]", "maxIterations"}], ",", 
           RowBox[{"Method", "\[Rule]", "method"}], ",", 
           RowBox[{"StepMonitor", "\[RuleDelayed]", " ", 
            RowBox[{"Sow", "[", "x", "]"}]}]}], "]"}]}], ",", 
        "\[IndentingNewLine]", "\"\<NelderMead\>\"", ",", 
        "\[IndentingNewLine]", "\t", 
        RowBox[{"sol", "=", 
         RowBox[{"NMaximize", "[", 
          RowBox[{
           RowBox[{"f", "[", "x", "]"}], ",", "x", ",", 
           RowBox[{"MaxIterations", "\[Rule]", "maxIterations"}], ",", 
           RowBox[{"Method", "\[Rule]", "method"}], ",", 
           RowBox[{"StepMonitor", "\[RuleDelayed]", " ", 
            RowBox[{"Sow", "[", "x", "]"}]}]}], "]"}]}], ",", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        "\"\<ParticleSwarmOptimization\>\"", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"f1", "=", 
          RowBox[{"Function", "[", 
           RowBox[{
            RowBox[{"{", "x1", "}"}], ",", 
            RowBox[{"-", 
             RowBox[{"f", "[", "x1", "]"}]}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"sol", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"StringQ", "@", "method"}], ",", "\[IndentingNewLine]", 
            RowBox[{"PSO", "[", 
             RowBox[{"f1", ",", "x"}], "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"PSO", "[", 
             RowBox[{"f1", ",", "x", ",", 
              RowBox[{"Sequence", "@@", 
               RowBox[{"(", 
                RowBox[{"method", "[", 
                 RowBox[{"[", 
                  RowBox[{"2", ";;", "All"}], "]"}], "]"}], ")"}]}]}], 
             "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"sol", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "=", 
          RowBox[{"-", 
           RowBox[{"sol", "[", 
            RowBox[{"[", "1", "]"}], "]"}]}]}], ";", 
         RowBox[{
          RowBox[{"sol", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "=", 
          RowBox[{"Thread", "[", 
           RowBox[{"x", "\[Rule]", 
            RowBox[{"sol", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}]}], ",", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", "_", ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"optimize", "::", "method"}], ",", "method"}], "]"}], ";", 
         RowBox[{"sol", "=", "0"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "sol"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Information", "[", 
    RowBox[{"optimize", ",", 
     RowBox[{"LongForm", "\[Rule]", "False"}]}], "]"}], "*)"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.626450106931922*^9, 3.6264501445878005`*^9}, {
   3.6264503492873416`*^9, 3.626450412465242*^9}, {3.626450451588538*^9, 
   3.6264505148092413`*^9}, {3.626450550555335*^9, 3.626450557857093*^9}, {
   3.626450707540125*^9, 3.6264507176172733`*^9}, {3.6264515984906235`*^9, 
   3.6264516020609355`*^9}, {3.6264517105593977`*^9, 
   3.6264517114480696`*^9}, {3.62645175346377*^9, 3.6264517836170893`*^9}, {
   3.6264518176135235`*^9, 3.626451878843992*^9}, {3.626452455187742*^9, 
   3.626452551250242*^9}, {3.626452590984617*^9, 3.626452594547117*^9}, {
   3.626452679625242*^9, 3.626452704953367*^9}, {3.626452957109617*^9, 
   3.626453040578367*^9}, {3.6265030264970493`*^9, 3.6265030469872837`*^9}, {
   3.626503715518702*^9, 3.62650371941901*^9}, {3.626503850989566*^9, 
   3.6265038808556747`*^9}, {3.626504038089071*^9, 3.6265040497867546`*^9}, 
   3.626504857856739*^9, {3.626504890971698*^9, 3.6265049231155148`*^9}, {
   3.626505050068231*^9, 3.626505056064325*^9}, {3.626505100038934*^9, 
   3.6265051078289733`*^9}, {3.6265053750753355`*^9, 
   3.6265053947804136`*^9}, {3.626506752188505*^9, 3.6265068371700497`*^9}, {
   3.6265068817908974`*^9, 3.626506929347484*^9}, {3.6265083837278395`*^9, 
   3.626508391005183*^9}, {3.6265084566524153`*^9, 3.626508458227172*^9}, {
   3.6265085089986305`*^9, 3.626508533156888*^9}, {3.6265088033830223`*^9, 
   3.6265088614610786`*^9}, {3.6265089714180317`*^9, 3.626508975321352*^9}, {
   3.626509023585949*^9, 3.6265090476322937`*^9}, {3.6265093339328575`*^9, 
   3.6265093392746544`*^9}, 3.6265094081852255`*^9, {3.626513435036421*^9, 
   3.626513454450224*^9}, {3.626513547732914*^9, 3.6265136712964554`*^9}, {
   3.626513851165264*^9, 3.6265138561574306`*^9}, {3.626513940464757*^9, 
   3.626513943212673*^9}, {3.626516481640299*^9, 3.6265165453870807`*^9}, {
   3.626516585053171*^9, 3.626516585333969*^9}, {3.626516615613036*^9, 
   3.6265166185601187`*^9}, {3.626516789052072*^9, 3.6265168357194757`*^9}, 
   3.626516885570429*^9, {3.626516981495282*^9, 3.626517016538945*^9}, {
   3.6265170958669796`*^9, 3.626517139017251*^9}, {3.6265172761826725`*^9, 
   3.6265172831220703`*^9}, 3.6265174446467113`*^9, {3.6265175081275826`*^9, 
   3.6265175517623453`*^9}, {3.6265175897316103`*^9, 
   3.6265176029230165`*^9}, {3.6265185085954947`*^9, 
   3.6265185100984244`*^9}, {3.6265185583789415`*^9, 3.626518569928918*^9}, {
   3.6265186139912977`*^9, 3.626518639893319*^9}, {3.626518858530841*^9, 
   3.626518975687355*^9}, {3.626521367371299*^9, 3.6265214284852753`*^9}, {
   3.6265214947470737`*^9, 3.6265215658384113`*^9}, {3.6267102164876895`*^9, 
   3.6267102177064395`*^9}, {3.6267103928001895`*^9, 
   3.6267104096908145`*^9}, {3.6267106534564395`*^9, 
   3.6267106638939395`*^9}, {3.6301496269805074`*^9, 
   3.6301497349854183`*^9}, {3.6301500755574636`*^9, 3.630150080037838*^9}, {
   3.630171368806153*^9, 3.630171408212403*^9}, {3.630171906796387*^9, 
   3.630171934390137*^9}, {3.6301730656245127`*^9, 3.6301730836245127`*^9}, 
   3.6301732080307627`*^9, {3.630228742560569*^9, 3.630228808969951*^9}, {
   3.630229242018071*^9, 3.630229305149907*^9}, {3.6302314628560176`*^9, 
   3.630231486356885*^9}, {3.630231570926733*^9, 3.6302315740872383`*^9}, {
   3.6304748008389196`*^9, 3.6304748264639196`*^9}, {3.6304749019639196`*^9, 
   3.6304749147451696`*^9}, {3.6304780029951696`*^9, 
   3.6304780088389196`*^9}, {3.6304790059170446`*^9, 
   3.6304790329639196`*^9}, {3.6304799866514196`*^9, 
   3.6304800165107946`*^9}, {3.6304801558857946`*^9, 
   3.6304801590107946`*^9}, {3.6304802120576696`*^9, 3.6304802164170446`*^9}, 
   3.6304803982139196`*^9, {3.6304804693232946`*^9, 3.6304804978232946`*^9}, {
   3.6304805595264196`*^9, 3.6304805795732946`*^9}, {3.6304806635576696`*^9, 
   3.6304806895889196`*^9}, {3.6304807576357946`*^9, 
   3.6304807788545446`*^9}, {3.6304808114482946`*^9, 
   3.6304809437920446`*^9}, {3.630485191465873*^9, 3.630485359090873*^9}, {
   3.6304854783262243`*^9, 3.6304854795293493`*^9}, {3.631183233250051*^9, 
   3.631183237250051*^9}, {3.631183306093801*^9, 3.631183309703176*^9}, {
   3.632645627091322*^9, 3.632645679200697*^9}, {3.6327301423483005`*^9, 
   3.6327302130957856`*^9}, {3.6327302661426606`*^9, 
   3.6327303221477876`*^9}, {3.6327303552934666`*^9, 3.632730379250498*^9}, {
   3.6327304638188705`*^9, 3.632730583133012*^9}, {3.697052138026703*^9, 
   3.697052150268425*^9}, {3.711435321293679*^9, 3.711435343114097*^9}, {
   3.7114354445681143`*^9, 3.711435448000711*^9}, {3.717729624414543*^9, 
   3.717729627176873*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"dd4a70c4-a3cb-40db-a8c1-910e0409d304"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"optimize", "[", "\"\<methods\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.6265189781131363`*^9, 3.6265189878348155`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Automatic\"\>", ",", "\<\"DifferentialEvolution\"\>", 
   ",", "\<\"NelderMead\"\>", ",", "\<\"SimulatedAnnealing\"\>", 
   ",", "\<\"RandomSearch\"\>", ",", "\<\"ParticleSwarmOptimization\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.626518988343605*^9, 3.630149750153824*^9, 
  3.630173089671387*^9, 3.6302288249963183`*^9, 3.6302293086040087`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"optimize", "[", "\"\<parameters\>\"", "]"}], "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<ParticleSwarmOptimization\>\"", ",", "32", ",", "0", ",", "10", ",",
       "100", ",", "8"}], "}"}], "\[IndentingNewLine]", "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.626519364801731*^9, 3.626519415755947*^9}, {
   3.626519470159667*^9, 3.6265195225907917`*^9}, 3.6265197904683833`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"optimize", "[", "\"\<parameters\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.6265197995430436`*^9, 3.6265198166145296`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"\<\"ParticleSwarmOptimization\"\>", ",", "32", ",", "0", ",", 
    "10", ",", "100", ",", "8"}], "}"}], "}"}]], "Output",
 CellChangeTimes->{{3.62651980256409*^9, 3.6265198175666*^9}, 
   3.6301497571908503`*^9, 3.630173092358887*^9, 3.6302288270031548`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"method", "\[Rule]", 
  RowBox[{"{", 
   RowBox[{"\"\<DifferentialEvolution\>\"", ",", 
    RowBox[{"\"\<CrossProbability\>\"", "\[Rule]", "0.5"}], ",", 
    RowBox[{"\"\<ScalingFactor\>\"", "\[Rule]", "0.6"}], ",", 
    RowBox[{"\"\<RandomSeed\>\"", "\[Rule]", "0"}], ",", 
    RowBox[{"\"\<SearchPoints\>\"", "\[Rule]", "200"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.621918128363507*^9, 3.6219182115041313`*^9}, {
  3.6219182515041313`*^9, 3.621918305738507*^9}}],

Cell[CellGroupData[{

Cell["Example", "Subsubsection",
 CellChangeTimes->{{3.626504470134677*^9, 3.626504471105097*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "header", ",", "noM", ",", "noU", ",", "noD", ",", "noAttr", ",", 
     "distanceMatrices", ",", "matchMatrix", ",", "mate"}], "}"}], "=", 
   RowBox[{"import", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], "<>", "\"\</import/\>\"", 
      "<>", "\"\<round1m2-1.xls.pre.dat\>\""}], ",", "\"\<precomp\>\""}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.626171011874079*^9, 3.626171023855977*^9}, 
   3.626504642775203*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"payoffMatrix", "=", 
   RowBox[{"CpayoffMatrix", "[", 
    RowBox[{"payoffDM", ",", "noM", ",", "noU", ",", "noD"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.6261710966927123`*^9, {3.6261716047920165`*^9, 3.6261716104789906`*^9}, 
   3.626172860525609*^9, 3.626173494133915*^9, {3.6263319744115915`*^9, 
   3.6263319766615915`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ineqmembers", "=", 
   RowBox[{"Cineqmembers", "[", "mate", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6265043620429196`*^9, 3.6265043848269243`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataArray", "=", 
   RowBox[{"CdataArray", "[", 
    RowBox[{"payoffMatrix", ",", "ineqmembers", ",", 
     RowBox[{"Cx", "[", 
      RowBox[{"noAttr", "-", "1"}], "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.626504389062846*^9, 3.6265044143327007`*^9}, 
   3.626504549977559*^9, {3.6265047137666416`*^9, 3.6265047178935013`*^9}}],

Cell[CellGroupData[{

Cell[BoxData["dataArray"], "Input",
 CellChangeTimes->{{3.626513895859579*^9, 3.626513897954305*^9}}],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "0.01966398659794777`"}], ",", "8.940303944001755`",
              ",", "0.1585748958377735`"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
            "0.21144177178382506`", ",", "7.938589867531277`", ",", 
             "2.6013548549343`"}], "}"}], ",", 
           TemplateBox[{"7696"},
            "OutputSizeLimit`Skeleton",
            DisplayFunction->(FrameBox[
              RowBox[{"\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}],
               Background -> GrayLevel[0.75], 
              BaseStyle -> {
               "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                ShowStringCharacters -> False}, BaselinePosition -> Baseline, 
              ContentPadding -> False, FrameMargins -> 1, FrameStyle -> 
              GrayLevel[0.75], RoundingRadius -> 7]& )], ",", 
           RowBox[{"{", 
            RowBox[{
            "6.812939732358473`", ",", "1.8078913161586456`", ",", 
             "5.98936310501756`"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
            "0.006713407773020208`", ",", "13.321237355279152`", ",", 
             "3.1938604900771566`"}], "}"}]}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{87., {3., 11.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarCategory",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{77., {0., 11.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{80., {0., 11.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            Identity, 165, 5343801081145304041, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{87., {0., 11.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{89., {0., 11.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            Identity, 165, 5343801081145304041, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{65., {0., 11.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{57., {1., 11.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            Identity, 165, 5343801081145304041, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{118., {0., 11.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Evaluation"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Background->RGBColor[0.9657, 0.9753, 0.9802],
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Out[165]]], "Output",
 CellChangeTimes->{3.626513898651571*^9, 3.6265139308484135`*^9, 
  3.6265177165194607`*^9, 3.6266227556794257`*^9, 3.6266299765704117`*^9, 
  3.6266304795704117`*^9, 3.6301492369599085`*^9, 3.6301731033745127`*^9, 
  3.6302288513722086`*^9, 
  3.63022907186043*^9},ExpressionUUID->"0b8609bd-5f99-4fa4-94c0-fd24c784cf24"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"objective", "[", 
  RowBox[{"dataArray", ",", "1", ",", "2.3"}], "]"}]], "Input",
 CellChangeTimes->{{3.6265045676900277`*^9, 3.6265045985949078`*^9}, {
  3.6265046688493986`*^9, 3.626504670251788*^9}, {3.626508566974657*^9, 
  3.6265085724055395`*^9}, {3.6265106523376436`*^9, 3.626510656871842*^9}}],

Cell[BoxData["7489"], "Output",
 CellChangeTimes->{{3.6265045900085154`*^9, 3.626504599398881*^9}, {
   3.6265046785896845`*^9, 3.6265047259211836`*^9}, {3.6265085531436024`*^9, 
   3.626508574280018*^9}, 3.6265089153219137`*^9, {3.626510647236268*^9, 
   3.626510657425055*^9}, 3.6265111581956453`*^9, 3.6265137351946926`*^9, 
   3.626513829444395*^9, 3.626513884115438*^9, 3.626513933277893*^9, 
   3.6265177169380856`*^9, 3.6266227576169257`*^9, 3.6266304796172867`*^9, 
   3.6301492380824842`*^9, 3.630173106358887*^9, 3.6302288531865606`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"x", "=", 
  RowBox[{"Cx", "[", 
   RowBox[{"noAttr", "-", "1"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6265114713320713`*^9, 3.626511496092043*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x1", ",", "x2"}], "}"}]], "Output",
 CellChangeTimes->{3.6265114976195555`*^9, 3.626513735553174*^9, 
  3.6265138295749097`*^9, 3.626513934503938*^9, 3.626517718604849*^9, 
  3.6266227589763002`*^9, 3.6266299828672867`*^9, 3.6266304804766617`*^9, 
  3.630149242176031*^9, 3.6301731072182627`*^9, 3.6302288546280594`*^9, 
  3.630229329226079*^9}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "f", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"f", "=", 
   RowBox[{
    RowBox[{"objective", "[", 
     RowBox[{"dataArray", ",", 
      RowBox[{"Sequence", "@@", "#"}]}], "]"}], "&"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.626511533081809*^9, 3.6265115754248915`*^9}, {
  3.6265169549770203`*^9, 3.6265169684756346`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"optimize", "[", 
     RowBox[{"f", ",", "x", ",", "#"}], "]"}], "&"}], "/@", 
   RowBox[{"{", 
    RowBox[{
    "\"\<Automatic\>\"", ",", "\"\<DifferentialEvolution\>\"", ",", 
     "\"\<SimulatedAnnealing\>\"", ",", "\"\<RandomSearch\>\"", ",", 
     "\"\<NelderMead\>\"", ",", "\"\<ParticleSwarmOptimization\>\""}], 
    "}"}]}], "//", "AbsoluteTiming"}]], "Input",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQBWIQ7fpS5DYj62tHgQtfHoDoYysLn4JoSYHZz0C09KxL
vkxAmlPwKpjWc3xaC6IP7OVoBtFqP7mng+h55j/B9BTdjfwsQLrvsLkQiD41
m1kXRKuK/gLTBxevTATRhzZLJoHVGQVWgukowyoQfWS5YxuIvuVdAqajPCdo
swJpuUlTDEB0iEBwP5hm0J4AopnsUmaD6F1TDoLpb/m169mA9CRlx00g+r+X
/zEwvWo9mBYK6wnmANkz7wWY1tCNqgPTR3XrQXTxwTUxXEB6AXd8LIhm+nO6
nJHntSNjjUAFiD6xdM1GGSBtJ2u3DURnFVm+BtG/Eye+BdEABF+EgQ==
  "]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4.8886719000000002922`6.709790804132939", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"7629.`", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
         RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"7630.`", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"x1", "\[Rule]", "4.290040651724732`"}], ",", 
         RowBox[{"x2", "\[Rule]", "3.2143481872688393`"}]}], "}"}]}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"7629.`", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"x1", "\[Rule]", "4.672413195072854`"}], ",", 
         RowBox[{"x2", "\[Rule]", "3.257092027967423`"}]}], "}"}]}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"7483.`", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"x1", "\[Rule]", "0.8659151619584017`"}], ",", 
         RowBox[{"x2", "\[Rule]", "0.7673406197846462`"}]}], "}"}]}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"7629.`", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
         RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"7630", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"x1", "\[Rule]", "4.095323124337691`"}], ",", 
         RowBox[{"x2", "\[Rule]", "3.0248671635211757`"}]}], "}"}]}], "}"}]}],
     "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.6265048240730276`*^9, 3.626505121592762*^9, 3.6265052483434753`*^9, 
   3.626505414570986*^9, 3.626506864914811*^9, 3.62650864074265*^9, 
   3.6265086770953417`*^9, 3.626509064946748*^9, 3.6265090961241093`*^9, 
   3.626509314749589*^9, {3.6265093507231293`*^9, 3.6265093663820353`*^9}, 
   3.6265094341060886`*^9, {3.6265107325729246`*^9, 3.6265107478109655`*^9}, {
   3.6265109715782623`*^9, 3.6265110008881416`*^9}, {3.6265111403782625`*^9, 
   3.6265111643013244`*^9}, 3.6265112000617027`*^9, 3.626511495145673*^9, {
   3.6265115887074184`*^9, 3.6265115952400885`*^9}, {3.626513803202606*^9, 
   3.6265138343415494`*^9}, 3.6265138671300864`*^9, {3.626513941373045*^9, 
   3.626513979796264*^9}, 3.626516575043656*^9, {3.626516608642853*^9, 
   3.626516629006707*^9}, 3.626516848529584*^9, 3.6265169018594947`*^9, 
   3.6265170276844673`*^9, {3.626517090943178*^9, 3.6265171204521837`*^9}, 
   3.6265171562562065`*^9, 3.626517298113816*^9, {3.626517462646946*^9, 
   3.62651752841445*^9}, 3.626517565383954*^9, 3.6265176192843447`*^9, 
   3.6265177271596546`*^9, 3.626518655349393*^9, 3.626521329229788*^9, 
   3.626521579937783*^9, 3.6266227661325502`*^9, 3.6266303462735367`*^9, 
   3.6266304880235367`*^9, 3.6301497994980383`*^9, 3.6301716226967783`*^9, 
   3.630173127608887*^9, 3.6301734758745127`*^9, 3.630228864072771*^9, 
   3.630228921082671*^9, {3.630229323002446*^9, 3.630229361847427*^9}, {
   3.6302315029178658`*^9, 3.630231524921088*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"#", ",", 
      RowBox[{"AbsoluteTiming", "@", 
       RowBox[{"optimize", "[", 
        RowBox[{"f", ",", "x", ",", "#"}], "]"}]}]}], "}"}], "&"}], "/@", 
   RowBox[{"{", 
    RowBox[{
    "\"\<Automatic\>\"", ",", "\"\<DifferentialEvolution\>\"", ",", 
     "\"\<SimulatedAnnealing\>\"", ",", "\"\<RandomSearch\>\"", ",", 
     "\"\<NelderMead\>\"", ",", "\"\<ParticleSwarmOptimization\>\""}], 
    "}"}]}], "//", "TableForm"}]], "Input",
 CellChangeTimes->{{3.6265182523189516`*^9, 3.6265182956971865`*^9}, {
   3.62652147040723*^9, 3.6265214718720737`*^9}, {3.630173141483887*^9, 
   3.6301731580932627`*^9}, 3.6302289376217337`*^9, {3.630229369433401*^9, 
   3.630229393920617*^9}, {3.6302315286740913`*^9, 3.6302315296043487`*^9}}],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {"\<\"Automatic\"\>", GridBox[{
       {"0.5725485999999999631`5.778412270345677", "\<\"\"\>"},
       {"7629.`", GridBox[{
          {
           RowBox[{"x1", "\[Rule]", "6.062447939862649`"}]},
          {
           RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.1]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"\<\"DifferentialEvolution\"\>", GridBox[{
       {"1.7831719999999999793`6.27179314935916", "\<\"\"\>"},
       {"7630.`", GridBox[{
          {
           RowBox[{"x1", "\[Rule]", "4.290040651724732`"}]},
          {
           RowBox[{"x2", "\[Rule]", "3.2143481872688393`"}]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.1]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"\<\"SimulatedAnnealing\"\>", GridBox[{
       {"0.6391489999999999672`5.826202027047654", "\<\"\"\>"},
       {"7629.`", GridBox[{
          {
           RowBox[{"x1", "\[Rule]", "4.672413195072854`"}]},
          {
           RowBox[{"x2", "\[Rule]", "3.257092027967423`"}]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.1]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"\<\"RandomSearch\"\>", GridBox[{
       {"0.8174662000000000317`5.933069718089678", "\<\"\"\>"},
       {"7483.`", GridBox[{
          {
           RowBox[{"x1", "\[Rule]", "0.8659151619584017`"}]},
          {
           RowBox[{"x2", "\[Rule]", "0.7673406197846462`"}]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.1]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"\<\"NelderMead\"\>", GridBox[{
       {"0.5789938000000000029`5.7832738265058445", "\<\"\"\>"},
       {"7629.`", GridBox[{
          {
           RowBox[{"x1", "\[Rule]", "6.062447939862649`"}]},
          {
           RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.1]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"\<\"ParticleSwarmOptimization\"\>", GridBox[{
       {"1.267555999999999905`6.12356706862523", "\<\"\"\>"},
       {"7630", GridBox[{
          {
           RowBox[{"x1", "\[Rule]", "4.092776720791419`"}]},
          {
           RowBox[{"x2", "\[Rule]", "3.042703369831101`"}]}
         },
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.1]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  TableForm[{{
    "Automatic", {
     0.5725485999999999631`5.778412270345677, {
      7629., {$CellContext`x1 -> 6.062447939862649, $CellContext`x2 -> 
        3.4329945502102683`}}}}, {
    "DifferentialEvolution", {
     1.7831719999999999793`6.27179314935916, {
      7630., {$CellContext`x1 -> 4.290040651724732, $CellContext`x2 -> 
        3.2143481872688393`}}}}, {
    "SimulatedAnnealing", {
     0.6391489999999999672`5.826202027047654, {
      7629., {$CellContext`x1 -> 4.672413195072854, $CellContext`x2 -> 
        3.257092027967423}}}}, {
    "RandomSearch", {
     0.8174662000000000317`5.933069718089678, {
      7483., {$CellContext`x1 -> 0.8659151619584017, $CellContext`x2 -> 
        0.7673406197846462}}}}, {
    "NelderMead", {
     0.5789938000000000029`5.7832738265058445, {
      7629., {$CellContext`x1 -> 6.062447939862649, $CellContext`x2 -> 
        3.4329945502102683`}}}}, {
    "ParticleSwarmOptimization", {
     1.267555999999999905`6.12356706862523, {
      7630, {$CellContext`x1 -> 4.092776720791419, $CellContext`x2 -> 
        3.042703369831101}}}}}]]], "Output",
 CellChangeTimes->{{3.626518281470624*^9, 3.626518301756757*^9}, 
   3.6265190600081487`*^9, 3.6265213400968294`*^9, 3.6265214819130893`*^9, 
   3.6265216017754645`*^9, 3.6266227812731757`*^9, 3.6301499861883636`*^9, 
   3.6301716440405283`*^9, {3.6301731472182627`*^9, 3.630173163702637*^9}, 
   3.630228945113921*^9, 3.6302293992184687`*^9, 3.6302315357799244`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 StyleBox[
  RowBox[{"Reap", "@", 
   RowBox[{"optimize", "[", 
    RowBox[{"f", ",", "x"}], "]"}]}],
  Background->RGBColor[1, 1, 0]]], "Input",
 CellChangeTimes->{{3.6302315458745537`*^9, 3.6302315465097413`*^9}, {
  3.6302315856099615`*^9, 3.630231587231305*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"7630.`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"x1", "\[Rule]", "4.290040651724732`"}], ",", 
       RowBox[{"x2", "\[Rule]", "3.2143481872688393`"}]}], "}"}]}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0.9186212148724066`", ",", "0.7166887533790196`"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"0.9186212148724066`", ",", "0.7166887533790196`"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"1.5802663836220092`", ",", "0.6588829724749181`"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"1.331015309518658`", ",", "1.406569814360267`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1.5744296685347312`", ",", "1.5446070985503348`"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"1.5744296685347312`", ",", "1.5446070985503348`"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"2.0476567024738084`", ",", "1.4710243542863901`"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"2.0476567024738084`", ",", "1.4710243542863901`"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"2.911763171095413`", ",", "2.8872408469622455`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2.911763171095413`", ",", "2.8872408469622455`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"3.242822200898468`", ",", "1.5627509920487257`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"3.242822200898468`", ",", "1.5627509920487257`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"3.6908502797210176`", ",", "2.1054464470087386`"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"4.094499906555902`", ",", "2.3850450026883174`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.094499906555902`", ",", "2.3850450026883174`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.094499906555902`", ",", "2.022735169525937`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.094499906555902`", ",", "2.022735169525937`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.094499906555902`", ",", "2.022735169525937`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.094499906555902`", ",", "2.022735169525937`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.094499906555902`", ",", "2.022735169525937`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.038934045162331`", ",", "2.1146351712053786`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.336270166024477`", ",", "3.077329707445719`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.336270166024477`", ",", "3.077329707445719`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.336270166024477`", ",", "3.077329707445719`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.336270166024477`", ",", "3.077329707445719`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.336270166024477`", ",", "3.077329707445719`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.336270166024477`", ",", "3.077329707445719`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.349275472049898`", ",", "3.1983863987898267`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.349275472049898`", ",", "3.1983863987898267`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.349275472049898`", ",", "3.1983863987898267`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.349275472049898`", ",", "3.1983863987898267`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.349275472049898`", ",", "3.1983863987898267`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.349275472049898`", ",", "3.1983863987898267`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.349275472049898`", ",", "3.1983863987898267`"}], "}"}], ",",
       
      RowBox[{"{", 
       RowBox[{"4.349275472049898`", ",", "3.1983863987898267`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.290040651724732`", ",", "3.1518432610176976`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.290040651724732`", ",", "3.1518432610176976`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.290040651724732`", ",", "3.1518432610176976`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.290040651724732`", ",", "3.1239173783544203`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.290040651724732`", ",", "3.1499637222521835`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.290040651724732`", ",", "3.1499637222521835`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.290040651724732`", ",", "3.1499637222521835`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.290040651724732`", ",", "3.1499637222521835`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.290040651724732`", ",", "3.1499637222521835`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.290040651724732`", ",", "3.1499637222521835`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.290040651724732`", ",", "3.1499637222521835`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.290040651724732`", ",", "3.190891868411596`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.290040651724732`", ",", "3.190891868411596`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.290040651724732`", ",", "3.190891868411596`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.290040651724732`", ",", "3.190891868411596`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.290040651724732`", ",", "3.190891868411596`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.290040651724732`", ",", "3.190891868411596`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.290040651724732`", ",", "3.190891868411596`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.290040651724732`", ",", "3.190891868411596`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.290040651724732`", ",", "3.190891868411596`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.290040651724732`", ",", "3.190891868411596`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.290040651724732`", ",", "3.190891868411596`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.290040651724732`", ",", "3.2143481872688393`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.290040651724732`", ",", "3.2143481872688393`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.290040651724732`", ",", "3.2143481872688393`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4.290040651724732`", ",", "3.2143481872688393`"}], "}"}]}], 
     "}"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.6302315486160984`*^9, {3.6302315836038923`*^9, 3.63023158962801*^9}}]
}, Open  ]],

Cell["\<\
http://mathematica.stackexchange.com/a/4708/7966
NMinimize is implemented entirely in Mathematica code, so its behaviour is \
open to examination by investigation of symbols defined in the \
Optimization`NMinimizeDump` context (after calling NMinimize at least once to \
pre-load the necessary package). In particular, the ability to give \
diagnostic output is present, and can be switched on using the internal \
variable Optimization`NMinimizeDump`$DiagnosticLevel. This takes values from \
0 (no output) through 6 (very verbose diagnostics). If \
you\[CloseCurlyQuote]re interested only in what happens before and after the \
main minimization (i.e., what can be considered as overhead), a useful value \
is 3; this omits most messages originating from the main loop of the core \
optimizer. Also available is Optimization`NMinimizeDump`$Shortness, which \
corresponds to the second argument of Short for those parts of the diagnostic \
output that are wrapped in this function (lists of options, &c.).\
\>", "Text",
 CellChangeTimes->{{3.626505826559437*^9, 3.6265058450418587`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Optimization`NMinimizeDump`$DiagnosticLevel", "=", "3"}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"Optimization`NMinimizeDump`$Shortness", "=", "10"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.626505625767669*^9, 3.626505625768646*^9}, 
   3.626505854328968*^9, 3.6265059687284236`*^9, 3.6265061097492456`*^9}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Optimization`NMinimizeDump`$DiagnosticLevel", "=", "4"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"optimize", "[", 
  RowBox[{"f", ",", "x", ",", "\"\<Automatic\>\""}], "]"}]}], "Input",
 CellChangeTimes->{
  3.6265051862443514`*^9, {3.626505637766693*^9, 3.626505639240326*^9}, {
   3.6265061209572535`*^9, 3.62650615331179*^9}, {3.626511659772354*^9, 
   3.6265116639207916`*^9}, {3.630173185452637*^9, 3.630173185983887*^9}, {
   3.630228964491851*^9, 3.630228967098296*^9}, {3.630229406938195*^9, 
   3.6302294090758905`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"(Raw) Args: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"objective", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "0.01966398659794777`"}], ",", 
              "8.940303944001755`", ",", "0.1585748958377735`"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
             "0.21144177178382506`", ",", "7.938589867531277`", ",", 
              "2.6013548549343`"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
             "0.2143619902624323`", ",", "4.920408975513851`", ",", 
              "2.032227390508126`"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
             "0.10739113760234886`", ",", "3.0866613768383786`", ",", 
              "7.7733583505104775`"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "1.7533799528052896`"}], ",", 
              RowBox[{"-", "0.2864880005474788`"}], ",", 
              "4.0566117985719075`"}], "}"}], ",", 
            RowBox[{"\[LeftSkeleton]", "7691", "\[RightSkeleton]"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "8.811728457042875`"}], ",", 
              RowBox[{"-", "7.089805444082913`"}], ",", 
              "24.283820566580857`"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
             "17.68532578568579`", ",", "5.0370991579691236`", ",", 
              "0.15194175653567754`"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
             "6.812939732358473`", ",", "1.8078913161586456`", ",", 
              "5.98936310501756`"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
             "0.006713407773020208`", ",", "13.321237355279152`", ",", 
              "3.1938604900771566`"}], "}"}]}], "}"}], ",", "x1", ",", "x2"}],
          "]"}], ",", "True"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"x1", ",", "x2"}], "}"}]}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["(Raw) Args: ", 10], 
   Short[{{
      $CellContext`objective[CompressedData["
1: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
FOOcVU6+rezz8glT3cwQggzgThHW58JkQuS+ynjAX4uTykZv4F1utz+mE7Cu
ZM+b65SFMEvps1zLOnU6KywxeHP8JoxLjn213KNII8a1cL9lbwnyt7LmZ9Xl
mP5A+DsvrMNkf05odTTE291PxadxkqA79BxWDINem69qDCMGwA8ukG+P/aTI
N1JDO7zBd3WzHiffhzo9PtpsdWSGoGsITc/nUI/x0XpEP+hdx3D+bDzow4x/
Rk3Mb4IpkJrR1a2P0Z3J4EH9lZjmlZPZ/5n9fP06TjGqJUjBt1I7RZbBOja+
8CoFvi3vMw+I7Scc1v8Z0r+vj1nEU72XCyqYrJpd5VoG+PORqqz+Ig+++msu
9xGoYzqLMTV5jyDHWN2ynuDbtD48YzR2EaRb7/2CJJjnmLGjb8wK9nnAPT4p
EVBvVR7CwaCLovwXAwU3YDKzv/DZPdDx85lhiZvlaIbgQNnOxRsxvcFqok0E
eI82l65wfEbQf9yELI4DzwttmtJ1gOvf/kg0q4Y854wuLSxin2stL3HhTSbQ
ap//mjihvvcVP7t1GHSXvtOX5ltB4S32Gbw8gJt6Gz/J66qYfLTt0+434JcD
Z9Zrnm4Dv1rgXdQMeQ226QzF9eAL39/jjy0iSGQfVeS4DDtwL992aA/Mj4cu
dD8A/SsO7O9ex37P1pSjVTeUonX5pXMnGJi5ZmxRostqTNY67PjrtBSjEUmZ
R4f7CPzoK4vjEvQnAq/VZVaAnlsbnq2XKKDw4eCvocug7/sbc0Nc8A/Bii1w
V16lRdsZZPynbbYVkyGqEb+2rqCRoqrj6eOjBD6w6NuOG9qYvmGUWvEE6rc/
4pTijWGCNGi/HZIqg2mq+niXqQLbH1ZLB7wnkGp5Kk2CblRkKtsdW4nJk+7X
18ryYVTsVOYqDbw0N6dpkj9OsHbtn+d6ronJL/hKwzbAY++v7nUXgZ++Baw8
uxT0bs3eFxVuwNNZrP606Y9Qt5ydzmaRhIMbfxk6rgXxP8pH7Id8Yw2x18qp
BGneGPieF/JnUiV6eBbylD4gWp3wk6K/NX1u7QNezYvP3HUZ9Km/7XbA1XaC
XOImubIMeLu38KqEC/t8dGOGx89mitXQquZXCX2Zxex0yNwIhXoTrPZd4qBp
Y8krc9vUMLPEOT+8AeK3hfvIJkGow94sozsOwIOfIh6vKq0D3RrRkjnEfr/o
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
fjvVln1THtfVPBfttegNzeRGvNqqCePrtlW8JqGGiMaigm0+EAeTfMJ+l2C+
RoKmefL4PZH2hR4S+KrrGd8pHcjXxL+c8rVeNPHnEod0wxDJCo3jtcXnJXTv
zKu8gusH8tZ7r/5CE0lXN3OsgnW5dk/meUALSSkKnJjE55MoGXp5JOgOsajH
3135EOWwO8tNYBETaNy4YpTSAp2Vk3gJ9/lwXk4celBMsiJd68/fW47aHhb7
Od+BcXaZLC0ZgLx3j9GgR36TlPGv7L4yaUQdrXPZ0gt4Pt+0Wn1oEWL/V16o
ZKeBqF6lNX+2w3yEzgerDeB9y8oWB3le4nqsyy/pQn6RNSlafrGFJNwvLbjV
Avj3N+nWjl8Q91plZb/JTySlwiNiziWG0OAaT54AwCOh0+oS28Gf0IGyX7wQ
31b1M3f+AP9Gy9a9OfKYZo7/1fuuCjzEed2sNObV62LrPV1h3Xq9RwQG6oAn
7+XzSgKdYvFBtOVUIuBqE1tmJeRj/Z1V1vNV+Fz8E1XOehI9rpI2q9BFhFng
hnu5kK9Wry61OQF68vDiQ687IJ65Ol4ePdpFt+2fzyprB/+VnW7W0/9NU66H
OT0vSzJtG3zlrxQpoEDFaUOzsQ2IEJtIHjlSTVJVd/u+YZ0j1flJ2+4ryW6P
FouThzxhdbvqg34lTQRsNjLA+9NVSrMvHf0MOq28Wkooh0Q/Q11icV2wwH07
Te6ATpHla+z7VE0T0WzH6zPAJ33GSjfeF2K0cp7qB/UD/jxeedfAB9clD1NO
ycoiiehTy1zWDJIo+0D9zofgL5dvjwjfwO+7/h4IPU+DviuPUeAHv9HqSFo7
B/YfOJ6iFQd6O6qB/9l5GK+Kxp6J+20kUXmA2TkBce9yIypaAPCQsPfWqvKm
qSVKD43DAb9R2CKhCbhfZJmoKoJ489DjlngA+ehix21rvA9C7FjenyXgp+Sh
MJNo0MFv2O21fxYgan9wrHcyB7ari+O+MZrZciKz+z8N8Nck3U/id2jCYfvk
BYU8OvyO1v7iX4DTQ8dbjspCvolklzzlB9xTn1x1Xw3G+ffwmUO23STjKv7k
Aj/ojVV0eT6u81Wdmh7k0UESr/zOcjaKIGo0tU5qlB+h/a482nhf6xKvZ5ym
YC/3gjUBtnCdl4LeFf9gfnOOT+O9/9Bol+R/Z95DninY+CY4SQAxfTez04+J
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
       "], $CellContext`x1, $CellContext`x2], 
      True}, {$CellContext`x1, $CellContext`x2}}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289840729055`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"(Raw) Options: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"MaxIterations", "\[Rule]", "Automatic"}], ",", 
      RowBox[{"Method", "\[Rule]", 
       RowBox[{"{", "\<\"Automatic\"\>", "}"}]}]}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["(Raw) Options: ", 10], 
   Short[{MaxIterations -> Automatic, Method -> {"Automatic"}}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984076812*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"(Raw) Method: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", "\<\"Automatic\"\>", "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["(Raw) Method: ", 10], 
   Short[{"Automatic"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984078765*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"(Processed) Method: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"Automatic\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["(Processed) Method: ", 10], 
   Short["Automatic", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984082671*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"(Processed) Method Options: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["(Processed) Method Options: ", 10], 
   Short[{}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289840846243`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"f: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["NMaximize",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["f: ", 10], 
   Short[NMaximize, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984087554*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"args: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"objective", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "0.01966398659794777`"}], ",", "8.940303944001755`", 
            ",", "0.1585748958377735`"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
           "0.21144177178382506`", ",", "7.938589867531277`", ",", 
            "2.6013548549343`"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
           "0.2143619902624323`", ",", "4.920408975513851`", ",", 
            "2.032227390508126`"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
           "0.10739113760234886`", ",", "3.0866613768383786`", ",", 
            "7.7733583505104775`"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1.7533799528052896`"}], ",", 
            RowBox[{"-", "0.2864880005474788`"}], ",", 
            "4.0566117985719075`"}], "}"}], ",", 
          RowBox[{"\[LeftSkeleton]", "7691", "\[RightSkeleton]"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "8.811728457042875`"}], ",", 
            RowBox[{"-", "7.089805444082913`"}], ",", "24.283820566580857`"}],
            "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
           "17.68532578568579`", ",", "5.0370991579691236`", ",", 
            "0.15194175653567754`"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
           "6.812939732358473`", ",", "1.8078913161586456`", ",", 
            "5.98936310501756`"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
           "0.006713407773020208`", ",", "13.321237355279152`", ",", 
            "3.1938604900771566`"}], "}"}]}], "}"}], ",", "x1", ",", "x2"}], 
       "]"}], ",", "True"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["args: ", 10], 
   Short[{
     $CellContext`objective[CompressedData["
1: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
FOOcVU6+rezz8glT3cwQggzgThHW58JkQuS+ynjAX4uTykZv4F1utz+mE7Cu
ZM+b65SFMEvps1zLOnU6KywxeHP8JoxLjn213KNII8a1cL9lbwnyt7LmZ9Xl
mP5A+DsvrMNkf05odTTE291PxadxkqA79BxWDINem69qDCMGwA8ukG+P/aTI
N1JDO7zBd3WzHiffhzo9PtpsdWSGoGsITc/nUI/x0XpEP+hdx3D+bDzow4x/
Rk3Mb4IpkJrR1a2P0Z3J4EH9lZjmlZPZ/5n9fP06TjGqJUjBt1I7RZbBOja+
8CoFvi3vMw+I7Scc1v8Z0r+vj1nEU72XCyqYrJpd5VoG+PORqqz+Ig+++msu
9xGoYzqLMTV5jyDHWN2ynuDbtD48YzR2EaRb7/2CJJjnmLGjb8wK9nnAPT4p
EVBvVR7CwaCLovwXAwU3YDKzv/DZPdDx85lhiZvlaIbgQNnOxRsxvcFqok0E
eI82l65wfEbQf9yELI4DzwttmtJ1gOvf/kg0q4Y854wuLSxin2stL3HhTSbQ
ap//mjihvvcVP7t1GHSXvtOX5ltB4S32Gbw8gJt6Gz/J66qYfLTt0+434JcD
Z9Zrnm4Dv1rgXdQMeQ226QzF9eAL39/jjy0iSGQfVeS4DDtwL992aA/Mj4cu
dD8A/SsO7O9ex37P1pSjVTeUonX5pXMnGJi5ZmxRostqTNY67PjrtBSjEUmZ
R4f7CPzoK4vjEvQnAq/VZVaAnlsbnq2XKKDw4eCvocug7/sbc0Nc8A/Bii1w
V16lRdsZZPynbbYVkyGqEb+2rqCRoqrj6eOjBD6w6NuOG9qYvmGUWvEE6rc/
4pTijWGCNGi/HZIqg2mq+niXqQLbH1ZLB7wnkGp5Kk2CblRkKtsdW4nJk+7X
18ryYVTsVOYqDbw0N6dpkj9OsHbtn+d6ronJL/hKwzbAY++v7nUXgZ++Baw8
uxT0bs3eFxVuwNNZrP606Y9Qt5ydzmaRhIMbfxk6rgXxP8pH7Id8Yw2x18qp
BGneGPieF/JnUiV6eBbylD4gWp3wk6K/NX1u7QNezYvP3HUZ9Km/7XbA1XaC
XOImubIMeLu38KqEC/t8dGOGx89mitXQquZXCX2Zxex0yNwIhXoTrPZd4qBp
Y8krc9vUMLPEOT+8AeK3hfvIJkGow94sozsOwIOfIh6vKq0D3RrRkjnEfr/o
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
fjvVln1THtfVPBfttegNzeRGvNqqCePrtlW8JqGGiMaigm0+EAeTfMJ+l2C+
RoKmefL4PZH2hR4S+KrrGd8pHcjXxL+c8rVeNPHnEod0wxDJCo3jtcXnJXTv
zKu8gusH8tZ7r/5CE0lXN3OsgnW5dk/meUALSSkKnJjE55MoGXp5JOgOsajH
3135EOWwO8tNYBETaNy4YpTSAp2Vk3gJ9/lwXk4celBMsiJd68/fW47aHhb7
Od+BcXaZLC0ZgLx3j9GgR36TlPGv7L4yaUQdrXPZ0gt4Pt+0Wn1oEWL/V16o
ZKeBqF6lNX+2w3yEzgerDeB9y8oWB3le4nqsyy/pQn6RNSlafrGFJNwvLbjV
Avj3N+nWjl8Q91plZb/JTySlwiNiziWG0OAaT54AwCOh0+oS28Gf0IGyX7wQ
31b1M3f+AP9Gy9a9OfKYZo7/1fuuCjzEed2sNObV62LrPV1h3Xq9RwQG6oAn
7+XzSgKdYvFBtOVUIuBqE1tmJeRj/Z1V1vNV+Fz8E1XOehI9rpI2q9BFhFng
hnu5kK9Wry61OQF68vDiQ687IJ65Ol4ePdpFt+2fzyprB/+VnW7W0/9NU66H
OT0vSzJtG3zlrxQpoEDFaUOzsQ2IEJtIHjlSTVJVd/u+YZ0j1flJ2+4ryW6P
FouThzxhdbvqg34lTQRsNjLA+9NVSrMvHf0MOq28Wkooh0Q/Q11icV2wwH07
Te6ATpHla+z7VE0T0WzH6zPAJ33GSjfeF2K0cp7qB/UD/jxeedfAB9clD1NO
ycoiiehTy1zWDJIo+0D9zofgL5dvjwjfwO+7/h4IPU+DviuPUeAHv9HqSFo7
B/YfOJ6iFQd6O6qB/9l5GK+Kxp6J+20kUXmA2TkBce9yIypaAPCQsPfWqvKm
qSVKD43DAb9R2CKhCbhfZJmoKoJ489DjlngA+ehix21rvA9C7FjenyXgp+Sh
MJNo0MFv2O21fxYgan9wrHcyB7ari+O+MZrZciKz+z8N8Nck3U/id2jCYfvk
BYU8OvyO1v7iX4DTQ8dbjspCvolklzzlB9xTn1x1Xw3G+ffwmUO23STjKv7k
Aj/ojVV0eT6u81Wdmh7k0UESr/zOcjaKIGo0tU5qlB+h/a482nhf6xKvZ5ym
YC/3gjUBtnCdl4LeFf9gfnOOT+O9/9Bol+R/Z95DninY+CY4SQAxfTez04+J
Au+N+cNzeimuG+5QWgp5ushKfC4F18HuFW3jLAadaRjQ7QjjG6/IizzRAby+
J2MI95nnV5D6+w/iPWSv6SKPdtrCxsQlY3ItIrz0Vc2tgOdPxzb1bge+avsr
SOLGQoaKb+ln5wCe+Jkt3vnpN82EZXFsElVCgQtyFB4dgPU+31UrLgi8cDdz
NSgJ8/DwglcvgS9keMaWDUG+SBDwOjMFONK5Zoszrt8nr2jZqg5/n/imx3kb
eM74lWRdcTFULRvaOjq1HLFmhaRHbEDXLxY4sX92CPxDUpK9CfuFjpss1Uoy
pecq42VgnlzXUFX+P5L6GjM4ObUK4kX4yfYKYcR0HcqSZ1YjqpRvvYwH7hs7
myM9husBfE9Y8gzyjaXIKvZhsNuozdMcCbh+yB9TzuJxmohaXv38Bt73M7v5
stZTkkj4myKD6zcbdVzfGws40tbKW3UV1j9ZQdWxv5GmBPLSpKNEUdvRoa1C
XPB7FzHN8fWA7yzvnFUP8P5PqccysRg3t/bYbX9JU4rWH4KwDpZY5nP4APC4
lFmbTO5ZkmobWpxRBnb5tnXpDi/In2i/1aZrsJ6mP14ctJ0nmewFSZvw/iSf
dOnm8TySOuGjVZ0B1zmQGnB0NeStZteDx5pgftbtdQpugzRlt5dvHtdZN+Je
8ALXbbd6/kSnCObxybt5U/YUfD8y6Ok7DmQR55d9KAxwd1Co3HMa9FvCVt/1
jpBfHgee1TsOeG2n+t581yjJ9PNWN8cA7nT0cEZFDNHEdbnbHJUwfss3v6iu
KZI5o/Z626wuohZU9fxME4F1aGmIfd0APJOfzze4jmZ92nd21ynwL9bT1vlA
yJeCTpV+8sMkMuf5zzoSxnn1EV/3d8ibtuLPdXYuQ9TXR6R9LMSzeXYqeayL
pNz01/bHwv1vFTrx/ZBFFPed1voeNVjfkFMJ8YIMUTC1Tl8NcLR61+35rm80
up/865iYDGIfNK1b0gm8k0EKUoaQZ6vXZ78o+0oyBwxvWy4Hnvxd4HBHO+Q5
M6l91jchHjoulRvuws9b3rgPKUeCnhnbcesh8P7t8tXet0dIouZz7uSjEdyv
4ISQSBnuxxMptgjvX8hxDFpXRFPcrLGDfFwovCXx8pgy3qfevYRzRQ+uH7Lu
mFUPydozbZO7GfSY67230797abSt8ah2CK6zFdkjJgn6Tvl4ReoOwEV2a92V
8+E0tfp9incm4FWHVnHDJVxXZ4NUzWeYRyifWZ4g/N4hY9XiZ7he5cF+RyFX
mrjStD/ErIQmpJTO1i/D9fR/oqfmcP/xH3MZqaBjjr84op4C10n/uTPoPvyk
Wh4sKg0mqe1j9RrckF8eF5pwfsT9SF0zG04CDypXrg+3wvWofR0rRB7TBOvR
S23jNpr4ve1V4xMpxFoVVTFvD3iepGe4K2yaRjOf7zXyCiPqVkfnNw3gT+dt
hrtrAdecXYyTZQD/hGtUum8sQuEJZ/IWIPA76pdulSPoORH6+OV34Pf/ZVlE
a+P9UW9OWOWAnx4wl3vABTg+vvHMqTMwH7GOPO3ncJ3HpoOH9hSRVNxDmzvO
3Cic182p86Mm4NCiVVqnVYCv6k3JE5Yw7o3Tx/VDSGLCJoaTo51Eer5K2rYw
P8bvTGNhBui3nMa4AQlEnXY5r3ER5q+ZUs6uArzaW3XomRTcpy1ZT2jhG7Bv
s/29v84kcdStiTEBvHCYKJHsL6CJ8/Jhq6KA97XfDPrzFz9n83XruxAM+qJZ
5r+1AeAnCiVyT9+AfuCOiHWGPMkrqpl+H/dh1DM8OplIUvbCnhx+ENdTjtW/
F4JdZXjDQ5pBT4aNfcr7f93d1rXfgzxJonexzJB1IUkxaP1TXF9mC3mEpx6v
i/3y08YJ+H7xn86Arrz0PieBDfHn/My6/2ojScQ/uxmD9wEhrXXRFoHg14ev
n8nH675rhV4U2J1l+vcQEUkSfHfv6HmCXZzDKs7bVNDUj6xHY7jOVEOWmeBd
wLGE/wZaurNp1nvDll/j6ghNytlq3mYhdHz50v0vxZm29sgWncXA24XOTU0v
BJw8ZyJj/OgfybjPpPKshLzxNHDzML0QsaMmjtXVQl6NuV/H8wPse31drRkJ
+m1ZvV36K5zPOQ8Pv/OhibkhbvG6fpI4uTQ+I3gQ5n9XJWA78Kb0pBtyBrjf
Vt3cst8EI2S5xrVvwxbEvhfh991XnSGoC6uG1uNzcjkXPu7D56G8DYwSAX+v
j9VyfwY827s4a5UN6G4OYZmVo5CfzRI/kXjfjW337pehcH8XpeCE94CjWrqt
ib00TWR8HL0wPI2f3wR/Po7PYfKVcnAGk4xJ0baWf/D/qdoRG6ph3Xv9j2vv
Aj7UIip6wQPWT/+JxkXRTzTRf7LCow0/d3zRt/Qz3k++K75DLJ+m6t/2fvOE
3wvlfFWtAV3jo6ib5AM8RMvbdfwc6BfnjJxNHMB3EvSeHjIDP88fcsgLBpy0
vsO1IgnyJqPBH3SklA63MHBJkMf1Toaad56ypQmxyZO+DPBtB3XRSfy8ljXH
eel3MkktKDlzdH4pog5uWMCeB/4h5Mfh5gDXSShzGpT+QhIr9qg7B4DuVGSF
tjaoIqqhUuHEIIzPNDCsYulqxG7n6n7YoIFQbNvZFms51DYS9XInG+771jIs
+A3Mf2L3m2Ogw5gcf6HckwZw3bHpUAFc70Q0VbaQIZl/fv92b8L1VJLqskND
AJ8W+d48PUcyon+eFfhCHif+3Ug/CvHlL7D685s+ElWmcCa+2oCYsMkLgk83
Ihb31FV+vRUMkjs15K0Bdgg3v9KzDuw8P659ft0YyeaR6dY4BHji0qwe6N5J
Uj8V9nKOCSLWob/6/ScAh03t7q57jfnm6JkGJpNEukc4+haCX64vCeD9Auuu
N76qSQ3sEDpOSigsQZT15yti6uKIWmwXcO4hges5MQ64bnu02GvNSnw+Uk8/
e+dzsm3jS6F9YmsQEvR4pX4V7F1NSE3Mf6MtevJdTqkCf//SXGo71UFTSkOE
zjvwP+mmJYeawZ94O/IsSBhPT6c5cQ78XMX6ZyL1A3im/5XbqbDurfstbgpC
PrO7sn5DDeDgj7MmSkbjJFPGyZIG3UrclhTx8IdxxN65UhyH52X1Uf70Hpro
iM+8BHmUWJxuwWhDfAY+cKW5QD85zHa+2a8GfErIRqEW8qHiME/TY9ynMtzk
4pki0CmJpYs4QD+bq66Y2IHrC93TfWUB42WYIAHXhzTxzYJnWgz312zPe0PB
+nFIrgm6COPeEq5Y7AI/y1UfRc6CzkzI2bw96xPot26TrStzyLaM9lPn72sy
QwvuHJ3brwd6PnhTpT3wur+rDXPx87wvV+MdlOG63+QLngbBvIXW8Vvuxe8j
FiR2Jj2H+eywSO7Hdap1bX4866SZoEytJGXAJWTkerilg6RG35xbQIFOYK9T
6lgP+NBYo67rOkxSen+sS7cvRJRzy/uFuL/l+u90WRjwsl9qF7mUgfc7X2Ns
swEfqZv+V1UAb4qDXzz+r5ymotRkbuI+tD5WV1w0Ic9aLs1dvBp409qDmd3v
gD9bN4TNR+H3qUmku0wBTcUFbNNvhziS+mtptLIX+F7kgZ3iD2mqS3nziTxJ
xBaif7eZQ5x41CrELeyC/Lm/1zYG8sHG4PueObiehIzu/ZVgz5d9gd5qHIii
zww84xZC7A4/Od7Figxh+WFplTEng3jslhuQYD+fjY9yp0H/MisXxRzDeD4d
L5SUSxNfjreL6QKPOHjpl+Vb8C+/6KTFTDdN2IfwrpvF/OTEYK4A+E3YEYsp
flhXVnv+ar4fgHsKZP1qyCfDX+Y2MJNk24K/tTckWAyzp2vnLQHcJ2K68qYP
8G6WHe9t3E8j8MsJa+4MmnLziOO8w4uowV8zCucgPg65HbnsBPPxZ9dE/vtO
ExPs5RHnikjGOn1kzVKIv4VyD4ZlIL/pX9PmcvgG/HHRRt8n+HmcBqvR4Cuu
t3FfwdudJALthTe/SIF1OVO2dPId2Ev3YUluA018YowbUmEeOiLe5a2/SGqR
56KXuD62VqMkNZANOvSFFjKuJJHADuRnDHFtNHq56BDkOcWbG8xDcb8HLdtn
F96TxJBsqL5yNhke8+e58Aqw1/Plx38fBX+p7/pdRMM63uqcUdSEeFL5MD2/
AXjr1b6VN34AHvO9i74/COuTOAkMR5pB1w6OCL5fhah0AY09C7BOTP6xkPs9
TSVGuHmW4vrkRf1yk7kk5S3hHdEMOkMq/jOXYy3Exa20et8MmOcl5yeHcN+j
3jE+bQsavcmrDJ6GceuwIos//KWJNm6WqfIrknIfPGYXz4EQs/wnvU2SCexq
O2IzuhFRP5+uTjSQYYh7u0U+N0P8DPbN80J+pYSnMzYLYX0V6BYtAb8Xszul
jvdBDB7TdfIBnUDl8+/9+hz4/8nhJL8pbO+l3tGgv7sUXJ9fBBy0NuUwFgY+
o7Xd1ksqjSZsefZZmkBcsjctKdogjgiO0IvhchB3NQILy5bDuif6hB69DHhz
IL2oAfQ90anl8UVpBnDE1LQ5F/yNPZI+HAP+KcEp+o4CHpL+q+Xyzx80+ig/
I43fayfkJ6HzjTRR8Gmq2wB4V01dloEe2CHw4tUDk8k0UrD4uFJPC1Wf/91T
kLURhX9PJ/3FFRjWqUGd4/vXoja2eX48jxLk/R8LVnhD3pMXX6zJEkdtn8WO
zyVpIObWLq2YE7DOI1u2vM4aJVlX3AfXyC9HhJJ8m5km8AIkU9tzL44ksjPD
LaNx3dGP2on7wN+t+VYULoQ8sqDvgtx3LkStWfLmjOtSJr2r54lzoQFC2Z9f
l9VoA88sCfz51o0kJqP7RnjxOcoDPer8+DnUokftuI96xVfVjOhxUkjPOmp1
KehkS5+kbZtBF2VLke5NgJsblR+mRSvgvst9h24xNKH6TcYYdBmzkqvnI9aT
RNMBkb9vSWZNDPfrX3KIZWFl7JkKeS78sn9DJHz/7X7y5qrFwMeyt/pxQr5a
cidOwk4QUdKrB7a/kUPILGuOwf2ctLQvLFQDu45/P2Mp/RPigG9qqzHEk5nO
987bv2nqykHLl2kLUduY1ulTI5Cnv8bciGC4GcLr97B+8gjNRHT69w/B//Oe
L0n9h/VPTstAShRN5ZmvuzrKg6g9p2+0sNQR6MzRxg24b5RM/bk40FGO1NlE
niESiew2FtsP/uDyx1XCB/eFujbcVFNMUw6eL/e1Av4MvRKMfQk8KPpi1IOx
nyTqdLYXrQK7SHe95VyuzBDOWgvuiVTRhJBxi1F4Itjvb4dlIIx/cZjZ88Pg
76132hQiIT+epgrOaoOe2zGuwgn8E+W+HYjNxHp+Ue73f3i/TIPv2NgFmghX
P2KaDfFh5C2s3gS4Fe2hU7EVcItgHbnceYsmIisVJvDzjvS9xoe/Ak8OVDYr
uQHrNqQhuMopiUTnnC+nnoO8hJyOzcqDvmjNHo8XaCepved3Ve+GeTYIubuJ
gj+lfpfMOTFHUksCZ0xblJi2kn1/N6qqMQ6t8hXC7iaAEyIlN+dLSep8+tzF
ZuCr2/y9F+ZNkuF+lZ1WZ5QRKoxTqGpiISrmroV3LuCTyjLJVtUyMrxjfaes
O/j33x32pmage7xWaIROg79W14pJqa1ArGm+Qs+fyqhtf/Cp5dLLGWJUUbQm
UJhp2yv5SjAa/FBL525xLujXgHsN8VqLEZNQpsKqABy7MrR0sm8eeFzQrS9v
Af/VmwOPP+MDPzddvavlJsn+nCd4rU0fEWul7I75gr/H5Sb+ye+gGft69eGD
wBdlapvGtuP+YIM5Uc8BPzT4pKYiAGd8nhiHroT1MuSovJbzk6bEZ+UUo0UQ
4lZo3WYO67zzWO+XC4DnCXICjoJjJDpW/ixVUBqhM1XdfTVCCL3WrGrZuwxR
GwUorh9rEKNxt9ZtehlDGTxflLyNYAjbYKrh9hpExa2o/PhQmmGJr9mYVK6E
qAF+ja+cKxATIRLN947FoJzMXa5OOghlXYzS/c3LEEvend09oc6gJX6D+l/V
EONS6ijKXsBQcQf49JVh3P4mRpsFS2gqOZMvl70YUfWR6Rxe0gzhpDrHUwTj
VSzs4tnbTjNTYuivuwLDUHsPR16WQWzrh8/lAtcjSk5eYXPwUkbfs9SXHjVE
hKj2wHFfiOtX/z6JpsP9RX1v3jgHvNvF7MPagdWIGU3UCl8lxzDXZ1TnhsWZ
ITfzqGV31oG9j4S4cv2iqdrzoWi9IEJuhWp1NNgnx3AFT648QwXFdT99M0Yz
O81vXt+ihsLduvnUt6swiDliOMm3GhF1Zd/mfgszzHRVlNUZ0JtttkX7mwHv
lS6OR/Pg/hliT/cJHqOpxXIPNuViezOCE8cgjvy7vvLx/6KJ2jcnA8MWIjTr
e0/TUQix3hroVCxlMRa3OjaOIFi/c01V3cLtNKFVO5zzCj9H6qkYPAp86jq5
wOMJ7me363PMK9BVJg89VMJxXXselyez0cCX7O1ZCZE0YSmruVQb7PLNynNj
OuSroUH5Dg98/i18met2XG+SS6B2Hvh5aZrsL0fQYey+8kZbXM/5v9Jl8qDP
P8afRjIL8D68HR4a+SQRUGNv8Qk+H3k+X62K896L26t2xIPOknur+x1w96Bl
zVdz4AdbNFeoj/eSbWYd56VLFBEVvOqZaQLk68zT767f7CGpVpKnZRsPQt92
iZhshfzE2v2Hxv0aWgODqxOnyPAfe/XLt2gw1fvs54tU16LwU47+4TkKTNtG
uvJVLPAGLX2nrXoDJMF/QW71QcjP3nYWycm4n0/0QYPaDJoYKEjItge+vWZ1
Tbu1FKLeZfiZsvE+ocFHRkOXaXTw+DUPoVWA95+e528qgXxlR58/EEezK3z9
tF/A9fepdBu+h/8XuRBcaDxCtj15enXWA/JDMf+u77g/htXFPw+2AW4JiX7l
Oj5NUusztsUmwPf1nB9M6AKvql/+6Gw84FTXzfGuuHoaVf4XsNUX1muq98bs
HPDVNmubJ7ieWbrY+Y/GDInMH1eORrCY6iSeRbxXScRmad6Qy9FkCJWNDW9e
DJDUc55tPw7gvr7Niv9KvYDviO6TPwk4a8/Nf7UQ7GA2k+z9HfKxhXr76WsJ
NDEes7GrC/xQYXpnnwHg3x3P7xz4PX1c+zxynyWpULuXdWKAez7m6++J9JOo
O8RHLBrspMGtEtaI+6u9WaxoMQc6iVPu3Q/QAQ9Z8msP47pZ9xN8ZadISs4+
ZP9fwKWUvPbIMuAr8WIb2ruA37CGuxq4gWc+/hBz6S/Mr4Dlv+7OagbVveq+
nbgeEY77vWKytRiCoZOyDkN8ZDYNzE2BndKP+Rtm54F+NQ7b71hKE9W3D72u
A32bfPTSymyIg9e2Ek/NRmniXqY3qw33D5lrz/UE/xuQNC0MhnV4FhQ1NNFN
Uv+4Zt15wT9D0yJZO3sgv3y2nygURAxxcMM+3Fdz9RGzCtcOklizXfEY3vdk
IWSXEAO8kajI1O+GeJDpGXiL+0AsXxOwUgu+x6f6sb8W5uXvdrJgdT1N8HkY
7LXoJam1y4e+jwowSIPnqpmHOqKOd6haBKszzLGlJZdHVjDMFUPVhXk6wEu0
+d0Mf9PEVYt1n+8uZUw6Nm2Z79uBqJOPmYUFLIb4clCA/tFFsgOc/L4eA5xK
CVGRkhRhUIgbkjsryhAFy15KfQZd1rvJue7tJ5JyWCgdWwk4wXf30vk1qxD7
soCkXIsiw2J92dluqsxoFZ9U2sYLOlT0dr7eC1EmevGK3vXBWgy6H2Q63AO4
ObpZ92qbBkNsWfo19CDoNau1lnc2NJDhlqXiV+8oImLwv/SFwUMk0xS5c3ga
+JzfZ67qRLAn9brVd10K5HHD4n2zb0CfKQS77QF/pB5bW2wEHYsyjqo655JM
il+3kTnEeQIhlmKLebjFFgNJJ5p4faREeCXE/aV+75sleD/EiZ4bHMATX1ei
gGTIB76e5Vx34fcz5yv81QGHDJ/PiZaDf/vcSXoY0UCiW0Y3OiTADtvCLMof
gV6IKozPvo73c3FzuDQDLp0cHufVws+pDRZofwP/2KWjzHkNn6/8MHK/r4Am
eHO9Zz7j61/LkrpZTVJjQ8m/38Pn3mff603KSeIU++nhLfPgr+zuCGd8vijF
/eKdDzTh9XoFe6SfRu/4nJ8PAd6Pd29zugo8/MlwtpIiPtf8TeecMehFwc5D
G/8MkOGbZTOuGON+C+Fpf/sBB7sjAagAF6yu9cb1QFxlO8wqSoO/Ctcpiu0c
I5mNC/TL6+D72YVl9a5faCLVQVZi6U+SeUvkxCRAvlBMueIrhM818K7u3wC8
QmHmVzLeH+p0/HL8UnxeYX3Ax5kHgMP7FBbZP6CJK41t1mGAB8oOKVOlgKte
xh1btSBuLdabcB5PJ4n8zpsXHSEOxMSvx9c00cwL7vVDvLBeFju9HCjQi8oS
Z0V+wzrVOXj1LeFFqBbNOxwBO9mL3CIPwfhazZkLxWPAq/J29g3A7x0q6qxS
5snwFvXjo5dWIqQc/9NIE3jxNu4Hob+BDycULSuy+0xSMcEhCVfBXhNHz7XJ
V5HEFfcQy3ZORFwL2VxT+4Mm9q296yPOiZgfc1Hp+DxYdJZh3FPgrZH+GUtz
JBCVV9Jw8zpc1zLbLtC/hSYsrI/c/QS62VBcVvQN4JrF6J33C0C/JpqKuG8B
fyXyVs/1RUFeeiKdk1FEU4+K3dSlAMdMbq+N5QJdhObTN1yJpYmGv9KJnaDX
0T/dXu1wmhgRG7sxgfuosLSdTT6RjGpd6FAJ5Outp7fqcPbThID/hL4XrOug
VJXjA7jeOvdVe8RwP8v/0o8MfyKJ8uLvzxXB/xrYt5lgyIeEbsWDC4Gg9/wc
uSMA5+K0VKRmfsJ9n2zk+gh5Z9/Z3StwHViicJPuZeD9aWf07FKAdwfsV3Qs
A/+NPGwi3Q/jCzTijCtNp5FS4ok2LVivrXlbLDJAB5iNjwc0Ac4edLq3v0UO
5jcr7xH6jSZs1L2f4ed4Fi0/XnTjPq/rjwr/SgWe/0ZUMxF0KZfS/S0SuM9T
hOMCHfh+m4/Sa+4Cmhq/2fTwmSiijt7+9+M2xMHVvkMKKoKIpZWg/eEK4HBH
unH1XeCh4i/OWBjj88On1a/jPsJtHr//xb/F/UxySyQf0cTZY1YX8LnWZicR
V/lmkvmaZ1YkB+tXYem1+gzk4aFWpZiPwGsCpJ9MbB8hqfiVn/j8YV5XbP6N
ZYN/7J2Q+0+mlySiyppOCIFOLN0+EngU4igh/m9lTCqNVM7dRzIwHmujR5wm
LcBj3CyuROXTxNSr/V5BYHfdk5UL58dodMqi3GEv3O904pezejOQr4fOp6kB
D1Ki2zuq+kjGJEPR4C38Xb5/gusO5KO58WkrEU1E6W49kroOcLTthZrfY8jX
dYbJ8SkEYpZKH1ZRhvu2OAhf/wN5IUK2OnkY75s6IVqbEwn6jUe2xaqapgw4
nw+YA+9PnOY5hM9nju5xmfwC+WrKTuZIK+DsuX0fnuXD+lFb4gUDIN4Czx+I
vSGFEs7NfmqX1sX7BJVM92fQVIjDzmNd4Gfhmhpaa1txXSbzp/7PAVdjl4ps
jKOJHr3S2ia8X537Yph4EUnd1zNw8QC7V1coDKgCD9DbL7NCZJikole98dgN
9hvarV0chs+VeHmovEsiWdodiyWWaCJ0vazWOloMdEea1AVu0FvDSe7LQM8j
t5zvLevxeVPu9MPyN2li7sYSRV7IGxPXI0dHSnEfmafSjcATqh+5OAdD/mam
xewvv6Qp0b4VRpKQR30KOB3J3ySTu/eJSyB+D7IywdiygCRMHSrLZcAf1lU+
iOSB+Ak3iFjzCPyHvSBX7hrui6OhlmMWQRPOzZOvdqTTRPCdk8G6YD+02dax
C/zL60/ZzSe4/4T888OKGOdDRjuuAI57LeBetBnix2WXrSkb56csI/LfE4if
cIL3CODF8o619YUiiHLyu3fWDu9XMF9rg+vLZrWo7eMCHPn+/s9rDZh//CV1
/UoBhngbTaeE43qf0gp/KfAbn/V3DfQxT1EMcHpXS1LLIiW5PkAcvFd2CI7k
ZwiLsS0JmX34eS6pu+svSdVc4M4I4GGopWGCrKWgx5OezJUpDNHEwzzRJfth
3ik1I58EgIdMcCYdaOyjiQoT6ZWfQTdPHL5zUAjwzzT/cwAFvKz1eZjByUUM
YeLpfSb1M0nwTNiseFRGEhKde0+Iw/U2rzS6NgXrjj5s+noM169/b/xlbRv4
yeiRKINngFe2Kif0sV58hBxtwV+oDatXzxUBjxVKYEcRiNorP1TJxwF8RPbY
z3NgP4fkupSmcpp4znOTWA28S22y4+4jiCuhd62pHzNJwpO96vjdKbh+QpAi
6zxNxMUyYe34PH7d8faqIprgPnXvjhr4ydD8MsKAE1FtuQEBK8C/luRva4rH
/WNb1BIaAH/+zJ/v6/xHE70ur5WT8Pt89xGhPaBv+RW/U6kNNEoprizQgjx2
WCRmoSbggeK2wz8rYJxiYQ9/FAO/M+kKDXgJuGp2zNumvoYmrhmfefwa9MyQ
q5WlC+DIkYsX9SZwvynqAXthEOTj26L1w/AZndf12Q54QESpGLy7Bj9ZX9PX
HiKJXzuLH60Gf3L7UbAI4XNlg6bjz8G+Tvv7T3wH/3usIt/iDThfvWmp958m
kvL5dk9BdgmiOC5ovhLH709+iMiVgX5Fnd8/qr4h0dM1qiueQN5HAZe2zj2j
CXbM6pU/SmhiaaCfqRfEw7PhMW3/b3B/h4GjOhYkleTK42MG8a7RVGEaCH7V
vCi7hGcA+PBdFetWmFfn5/DWTeAfIk2OlCbkecLuq8HGEJrYoxvZtG6UpEbW
Jex+ivso2lTGN3wlmcxlbgPH8Xk/bdfVjytowiEpSN6ojqREvWLNpyDPckvs
61k2QqJj97ewcX39IWeFg5WDNOEiOer9fJCmPJ5HHzeEeSV8LxL3hHEHlgrr
p0HeYnM1rheB+LtpvUaPA9ZX7lFmSwDwFEr7xL7QaBIpnPH86A48IyNMp8MN
+AeB/I577od1ibXNVwNc8kv3f7F9gqSuyG/+7Qy6LS6GP18aeN+Pdw80p2H+
WxXi9XnAXz+c8DfDdWYcv3yT/38/yq5VeRygSw/Ky9ptg3k9lpQIaqykicfx
O3tV60giz/DoF3msu/JKpjSAz7jYWHK4dpKouFff444YrlOpO/ygkCZ0T2w9
qo/160n/ttuPwA/NlkXHL2AItxvSIeYwD2sL633poM+Ly3YwiRAn+hcsx3Uq
SCr337m0GeAxj98N7CgGfwy9WFr8A+IgpDmp5SAvotR7+HrLwa4zcsIXT0P8
CVs0d9SDP2hyCMjwAm/ddsUwSBf8b0DqJFsLv482SHaTWIDQk6rrASrwf1Wc
QwIOwEOrX2fP6ieT4R5Oz+WNV0JeFCVfimF7xGRN0f9o6iLLxatKEFFoC88S
j6WIGtFUTrkhgCijZ4kj/iKIcY/470Q28AGr8Z3claDnnU7LhcZAviVOnLLN
wM+LaEFJYxgXW8v3nwzoteKh2vIQwHNbQ4nlX/6Q1MPvp/ffg7/3q5x0oMBP
t55a9fYw4JPkmQNhbBXEuib04tEPBcSo69i9vL0M+Pg1FZ5MyIPjDXz3xHE9
ynsxI1ngLyIf3j/LgXXlF5F4FwrrePtZgIXDNI1uPpJ6cRn0kVRvK90KeeL7
vrP6/oC7nRYLtZ2BB7Su3PPaVBYRtW/O2oDdCJ+YWNudoDfVxt7d+DFHti14
aHAX7k+UFP4yzuWH+b416NAH/41RSHHIA718qKL2Au7nUd3vcLK6GXioO2tn
2yxNrJT8OW61ECH+/N/RbmAfj1OyouFzNHN52YDvSVj37PfuLrKA0/pVmVpm
wPNpnvtHJ+Gzm8eqCTXw0/GDzxdtg3UQOtQmdQX3296aKi4H9uTLDnb+Nwb5
7192gg3gTP+VjPnlArgOkB/7HvBNW+udC60B54epI9pTkHfCZZbxcr2G73sm
R88+Jhnpf2nibMCJj09SN74DfGTCMvoXPyTZfBz3eTfDPFfczuOR+EczkyJv
rg/gvs2ha8ayrpKExkXHtoIvNOXFbzb1E/zJ/mLk0RjIP1YLN+RnwnqxtwRO
700mqS2Lcl10JHGdbjJMHO9b+8aobhkjWRXimepliog6sKSq7yrER/U+/1WP
IX9Ur8xa/Qb4RnXX516mB/LmJrvvPRAvcZUnQXxCnIukmX3zIom7Obc6NBYD
b1dOPvEK7Lf1F290ygTwyR+UwerXgI+fquqDYF5iIScDagDn2mq2W3vic5jX
zy3dBOte973z8E3cT2qy3fNbNhluHR14WAb4UcYOgw+Bk7ieURrLCfidhqvU
lhLIl8WdB6v/w33Bu76FboPxSeWnu1e2keiozh2RBeA3hHTe1OkAmrCc5N1V
UUcy+x9uk3wHOCHEc/6XIvBbkqtxrFcL7ptoxcbPGReKx9/9N0sSzjULM+3B
/6f+XrvHHiCZQxoLGxmI88DRbX26kJfynzZnycL6EmV23qvxe+EdXP6nw2nK
f/sDNRbgXM7YcQER4EFt25pOxUTThIa0KLc8rIP1PY6Lif0ks+KI5LtroOdO
ep7xOgd2Ijx0XA44gh1aXB40Am7wHljd7QV4f/b0swcG+Nxy0Tu7CODt/22O
+NUySjNbPzS1XYJ44Il917mygGS1BbRKTiohQm5mWfclIUSZ3kqR5MHvd6rl
/twHHGSV9sc+jSeJb6XPJMxhHHyx92tbJmiWuGDt/nxlwHnP+lv/wTrsU9xx
VhKfK93xbx+uX048idj/8TzN7DVe+xzBdef2PEfHsZ5idC7o7aUppS1LPocC
HkEaFwoHvqQyfWT2SB5JdTkURo9i/7M9+bS7m6Tmj/IrZQGOxyT+WWgP8XJF
uv1KFYyLWvqsqvMuSTiopJVzAi6JiNZd8+sgqV17m80lYVxdeokrH30j0SZt
b0Vc/3/pfwHN0mB3feH03ed+0Ejv9OnXm+H+uR0jp43+gl9OiiU7/qKp676b
LjyDPGW2SqDfEPOINS+mK4ZAD947NloC1xnQdFFRA76BopQbYoFn8mddqNkD
+SExQ1F1AOYRnxa27Azul1u72d8R4vpTnf1Z3HdO6+XUgXWJwG9Cuj5hHowe
HQjPBl7Ww+NeITlMohvZjQccVEAnmRmeXgx871zbSO5FwOEOG563RcBvk800
hlfheqwhioVOVcBrZs4NboO8Xb7UbFdvPfBz8c2me4ZoC1MpufPbtIEf56t2
PgedyViVBS0PolFgzfZnkdKYB5SW4X1evTqjM47NJCqa32tzHnCZayLX126C
pnan/11iKoyov//tNTZagogNlOTO18ATPt26WbN1GNZ5FU/5H1gPxH5uv/YD
6MCfy86aAz4LredRuQx6xcrTcGcc2NU5Sf2fYiNJePcUSdrB92/biWgsBzsL
o7iisimSWkExm77BvLL7xtb2jNDUvpBHU1zAF5WWnh1WAj/ZJPDDXxT3c2PK
VP+LAp3Vl9u/Ea5zZdEx+RvAlzOdbR3Cgac+bnzf+Rbi+ihnTtkX3P/J/l9A
GN4XWJzB/96SJIKtG6cygd+t3RZ45g/g4fin5VzREF/NqQKKC6ppYr3yh8td
S1GbWe5Pk0Og0+pYCnoFsH5ihMD7Q40kJZk2taoV1l3L9pqyBuSf1lqxAdwH
1CLrRWMw8NdsF76J9aB7Dy63dvCA+FNjxmMFVBHxJGft3lHgWywiP7IH8vDg
xDpzrHfN7q+pvNoA12eFvGv6QlKuRwW8X0N+2fK6rskX+GuDvgHbEnBTu1N1
ng14Uupj8RY/B3/SFF69GXCYn+sI8XqQJKJd722/BPz9SWzzho5e8GvdVvfH
+STS3xUUWgE439d1SPcc7ru0T6EY97FcNB1oi/uARtdPe8ThfuO+7UYWZTSl
urwoSBD8Rer04yH1MppIJ2QOTJWT1a/OrU4ZhN/bavpVvQG8HIt/kVoOPLfp
sF4Kfo8q6F9Yng7zI9ZOrskqpQkD79MR+Hy41WL5zhuQx74ZbqBtgEfrdl59
8lwdoazTJx7j/jm3nTo3Fy9B6JW+2PuteuBfB3QH7sN8zv+3vGcNxP12SqWn
CMZ34UbJdVdYT5OnaeFhVTSlHMV1/CTg+fyhazfnwF6R+sNZXCzUpnaCW/Eo
xM1jqyT1lC7AgV1veBtGSZSp9f7BCRh/YIOLx6Ni0AVlb5VaQHekt/30bgf7
MMo7531h3SYkW4ZaimmqZv2KLdEwnvBXEuw5+L6ZW0xSNvjzW9VF0/i5WTV3
uacYzCeF686N97gPQGKGsuQd0Juq6dWPcT1le8GGTVdoInnx0TsbcT8MtKS1
Lxz3yTrEvQHw+UDufodeuH/ociHrzaDTnWUG6hXhun1hN68sBT0otLgs06aQ
JFac/BwgBf7iYqdUebAX9+U0Vm+CPEDti9y2DfevfvkmLuo+8AWFvPW3gE9Y
fg4KmQA7rZJ3ag4DP1lj5tLvg9+TL/1Lm0H8+AjeEPfG709rEjbivuKV791E
deB7ybvv6abDfIZeLbJ9DfhtqFyhbQrxztpVm88Nurrr9BO7cvBTNMtXkAF+
npBqO22HnxucOBCuAfHeu/1goVwhfh9rP+F0iaYWeUYZ4XPhTKTgraJIwEXV
R712v0hi590i5ZfzNGHCKVW1rgbwSmJsxAqu08tmndsI47Pf+PMOriuRXpfx
BfdDnW9IVxgEfnN8V07ECxj3HPXauB/3g807GV5C021/ZQ/M4X6P9uu2yd2H
8c1c2M28B1625PQKCSPI2+U8+SL/Ab4Nqdvc/ws6/XaA++UZiHer6MH6FJiX
0+gS02Ks1ywKl5l7YBzkKzo3QTJ3jSK1nLC++ULyKsH497WfcwsZxfUEd54s
SiGZvMAtxrdgvYTOmHe1Am7wVA7Z/8P1gN/k7PkD87nWYj2iBvPhb7V6ZPqF
Jv6+XacvCP7Ye+nl5heAP8q25cL3wC+47FaecsHnw5OD52hf0L+JthWagHv2
nSpj8pC3w1mZR2JxXTiV85o5sF7qIls/34J8ekX5r5BhLUmsHitffwD3ezrf
4fXjEdi/YPLqGnfIi8J+2+gumthkvvcgrt/nc3PNn1khXM9F5sd2yMv5s0eS
rmK+6Tegg/ttsSQtz50FfyPGFe1z3SA/bWsQTID5fDqvL8YHePp9y2MJMfDD
hMseqk65MI656AcfwL4qHy4dW1JDoo6r3+KiIN5ZX/sH6ALgKbnrOLIBH82E
ZEy+4fntKTmcTNGElU9GwlcYR7jb9A+LNJLw6rP8FtwB+i/Z/2kJrjP24Z7W
hevw/wMf7APAb/mJvrEYsK9K8+v2vzB/w3jNnZp4X2bghOrpvfB9pYJzM0dp
wvzLcD4b/M05wP7rXA7o+dc7HwlBPIwfPTe8iEDMsOrl5TriCI06GZdUAX5T
vxcq9wNOOaVxfJCAebnuG3/AAeMKHvK2vIL3HUR2lC26CeOuSsrvrwb9UGOj
jOtZrYivfNUOdmOy/W3NngD+H71eJQ7fv3JGYvbeV5KKWaSQIgR817anaf86
WD+b4PzAy+A3b33VORzh591W+9UjkLc2LejSf4HrHlxfpzcH+tsJXdkuhPuf
u/58pwV4z8zqla58DPpc/yu/MeAJ+13ZFWWGJkq9aub3gf/w3PmxIRLyKWt3
Nn/oK8CX6zb2wmB3dvvyy2KQF7QqXrsqwHVvhh+VzwFdMLpzqkUTxm1aELVw
DMar5f/41gTEa3Zh5ZXDuK7rg61mtbB+f0UehdbgfGZ84YZhNxle5iGu0q2K
EAo9u+2OJKJmDH4Ggh2ZFe4ujYWAmzOtk6dmQI+2+S5+eBjGdzK5fS+uJ+Jt
+8vkKfjtk8KSYes+eign4/qDJ6DLzrEvB5/F9e605QJr8Hvga/7Vwriu2f4H
3Q/g/r8SspO7Id5nzn0sfgP2frz3c9ZR0G9OqmuNtCQQY3BGa/ltYcSs96tR
/gp/D4zyx89NqMW/4j434eeHp+pPmQN+lT+U+SsEfvtymdklZ8CNW3Tlwfug
h/ddpeRTQcfGRmxZPS+L0LU20btZeJ/LCUHTo4C7BSPbBSPxc0nmQayzJu7n
9C5NGe9z7hbxtHxPEpfm9yntAvs1NKz5ojpChn9XLHo2C/zSZf1buWWQn1N6
60itEZJ68P3W0Eawu+XvUbYX3vcmSsuyP9OUbrOaSBDwmcJ3fwOfA761o/mI
/2C+ixZESUaPk9R72YHKEfDPntuS7DOAk0+2PddgYL2Rz4IbBrDOc2pXLf0X
IOojE3bsJFxnb0Ub4wg4ou+4qsAG7lf8IqawHPjl2UHHajNuWMf8BW9HykFf
2aquwfjrwzmvifssE3XrU/ddAz4jOFG2G+6XMLT3ql8u+I+6k0z4B8BHU1uH
fPg/fbFvlSKfAAfyIyqcQWdFqypfNC3CdYJbfBxp+H6EgEEf5ve+aiFHnMFf
Jxe2RYFfeulaMMKd8Hk4sb3xI/jD5k6lHIjnmGzegWz8PtnR74hZDslsMbvp
0AfreHiXo2X/H5LaXWgvzAeff7oNXdmH+4iN2mmLwnx6RTvfisC4LdBSLaM2
khAImfXdMYz7ApARlmBHrQIr4ddZYPd7H2vvgx99WFe+rAv+XmR5SIBviGTS
KBsbkRWIiuJ/Fs8HOBHePsv5I5lm4s/GaxvB+jfebxT5xoeQNCXJIQ166oKe
pH4n3k/svn0h7quw99Luk7guCcXNX7QYcO9kSmpl8TRJVUX0FhzkRNSmPcNr
JjCP9+QX1nxKMh8H8iLTYRx3ijulXoH/mYk9njEDHqT65qVFJujdLbIHOp1+
08TcTsOi2HYSVXY9PHwXcO2mqsHpJb24jvufH0UQR4/zJQ94FwE/THf6b7Ca
RjVLZP+6AO9Bx0WclfH586jNFCsP/L3k5wdcp3yhUpzvL+B5C/6elsLjPfHI
dbM43K8hTEXLt55GPzZlJLIAn8zzQ9VHcb/erZd9tgIubPh82FML16F5cEHz
Layzs8+ybDHIoyMpXtMlwCfnTvvVNOLnfyu3FkaAH3JsF33dCOMLLq1wmoV8
hfKDdWVSSCrMOSe6VgxRT9xajf5f5zQxLXktxOe37JjPdjC+rAQ7i0HQHTsX
LTa4BHFVHNyX8xT8m9Ldeq8lAPize7Z5IfAC4x3atjbgl80AVlmAY8zlv4R3
BHwfWcXk/6AJtTe5ZgX9JCU117XZFHD++wzX1p/4nEbIcb0v6cBbVS4c/wh+
wi+7S9AZeGmCyBm5DuAHzSfshlIgPxdYluxWG6cJZ4GV62rBjh5tu6Q2CAIf
3bNOdAD4MXFY83cFmyQsJ+Jk/MCPTAP/6J/owOfCPF+e9IP5+xhoVoNu/PUx
cZusAqLMssZWNgGed5jKpvh2k4x7tka9D+67kVH/1h5w+aUQvUsMcMBlSPx9
HvDnb/WlfTYQJ6UP+Xr/gf6+WXBJ+QCMt7qteD4T4oBy972gCXki+DbJjc+F
pVvMnnApIYnMxZPtBTAednKDsxTwsI3CLm55HIiSexGsgfexMteak0Mgfv3N
J2aHwW7hUZXHz8P3swSVPU8uQdS+oUMl/69zeTJRnXgAcUS8XFIPv18im1qG
32N+nmUl3ZNESPtlUcs5WCcyUya9B/6//YcYKwX3o9xicqI/EcYpKV3RzNBU
vdFhlR6Y12t/T5kngDfufKZHjPG53+Mnf+pBXtDT0lu8FsbhwpZvPjJPUpFy
9t1uK8CPTIy2PnhLE4XSzR9beEAn/Y+kK4+n4v3+U3YSIUnSVdYWlBYKM7RJ
GyX1QXVTCakkomxTSRKSEFm6yk6yZWeGZCdLZAvJlmzZsvc7z/f3131Z7r3P
nPM+7/M+M89zTsP2nE5Yl3dmq7MF2EewsGgkAOK+eeWxixeacJL2iLiKzruo
/+DwbMIIkvPkxqge4METXz/u9QZ/mT+o/NdJU0T3oWJ7NE/WnD9kHPuGY8EJ
X91EgZfj5punpsZwbIffA+8giJ+c1Re7HvSDrqrz9q9F54h48zkvQ/yalY/n
VM3iJPfWFge7jcCLuYEqXcBfzv/Z7JkHvJ+r/Fr5uRj1GzJ2mIM8w6yUUwun
cGzVG8UnYF+s5q66SwXgkP2LRIMsxI+T3ilqGVwPZ30n+2WIS7/k53baSD/E
MbcOgG4m9xxWegR58PnJh5fXgC6NZHe4dwVw5nZn1U4m5KMZsZthgaUU2VD1
dn8vxJ9yTSErBPhEf2iodz96DqIz/m+uBvzsdN/0bgaFGWd9GIxH86fEzf61
P6bIRoXG3dUQ7+yZE4/twY952xxNn4Fd7C0V8TmIx5thqvVr4TXx1y22ebSv
20bXbPIl1AHbiqlHwDszYYciZ6GuLD6xJHX3O0UaStgYhIsRWKVr939onkpz
anHyZnifIG/hs8MlOHm/WSXyN+Ao1jFtx2HUb6oh8EEgXIfQ1XCHOXiN1Qo7
9quNImwvsVkqSaFzEalDA2g+iZ1Xj3IzTg5UDPxC53we7Tio7iNMkAUluqkm
EN+TmzoE0LyV5IS98cshH6k+KXdRAX2t50GlLod4Jzuy7iW9he+7LTsjn4Zj
O43mVIZ6caKQEfs9EfQFfW7z1c/RFJYT+ihh/i9Ol+48+u8h4El/+/XEZMSP
GhoSNrA+nWTPFXbVFPa8YYpn4g9O1iWXCK0DXAv+VK5zrkN5c8w/mITvOeG7
q7QXJ2e3+9f6Q/zohT+TCkPn1vG3CSagK5cFFGEHId9lBotIjgCPYalrDG4k
UZi4ZfukHOrv1xf6OmwVQdYJzbPL/48nz/FdiMOxodmUK1q8oGOVhMdffAZ8
MQ2H9qDnPiPyRbc+AA9fbPw+AnyZcj7ga7kk6Fi/aDOjKAqb20yMevXj5L+e
uJprgIu6fLnvKoAzZR8Zid5sHEtV6VYaBPyGfjxfeRJ4t1+Ju12MjyAX367a
EAH/z+KrWbMc+MX3E7tpJvidX639YBXqt7IUUriA+oHxJ508AfhjF2D9dvtN
Yd2dfOq2YLdvbmbOUhCPMs6ja16IEyRjx0fRXRDH26R3vwyfw4kbLd6WtmB/
BmXAYZUKusFAVqE7mcKUSjZo7oW4NTr9NMp2GO9a2fJ3gWsb6ILZUBFd8F/Z
6ycfpKsozOJSvODxOZypkzi+RkAOnSMiHr5hUZjNnHqiDtj9wLoazhaUz3/+
Ub5WCLxqdzGoE3SO4KMgPB/eH2Fsdy59ESc379vBZgA4yn+fkhgL+Ey+Vbuc
E53jP4cflYX8KXr3jd9t0CWx5OogogHq/Kzlv1fA9XbsXPP2dRdOGtu/0kDz
RWrSNkgrg946f3EdHgd2k1PeeWUj6LY/3+z9JdkI+g7zcJW/NHqu5XdB5QuO
iWYLDw0D/7BUD6wsTKEwT9OfOybRfkmnDjdmG0677nvRkI6eN2kZXlnXTGGl
FrahNsCzSfXnK8ahbnIMWHFxHeiPrtWDQ6mgh47rbzuVyUMQzb/+u+EiTDD3
iyelKaA+NVFCIWGA/50FzKjrP3G68bthdCvwt+2x90WsBqorIWf3Uxu0P93Y
JEYnEPC9+8bvH2M4KfCWL3JgLUH/J8y407uBwJ4d5848PEZhsX233rGBHjA3
C/7GA3qgbIUVPwU84/HZAFepwumRB63ij7cS5K3XhbvWA07ad1v5PoU8y76z
nlwLODSzNLCUAz11WeTtrxMQx1Wf7SUqIQ669L1SDgEPL7ilmLKDn3LKLwXO
gJ1Dsycsq9soEuf5yiHBRxCfst95fN9CEIkRY9nOogR5d0f+P2d0LqQhy87I
B9a3RTz5Jfj7I48j0l9YefioSCC6r//x73BDPNS3bFVVFyGfslKz7xeV43Sc
2U/VdKjXUyc6I33Arvvz2oZzwT5Wo9tD2MXge1x2rl6L+kBwxzgg3cva/3Vn
NuiNgQ/bFEA3kf1Vnx8YQT6gq17GdkA9ZhjWaTmM6sTpjEtHgFdCRiQO3YN4
VhKN/voV9GH6V68OtB9QPCOR//dPnIzd8r5bEXDxQiBQuxDsdSYgkvED+Li4
ev0paYhTHy4veSasf/B5y9MBNJewLk1WHZ1PraoKbLMBPwh1DFNQr7G67z3U
gDit7S67OlAD+oXt5KrOdpzRcKQ98K0UQe+bTSs3RucUM/c2WX6E/PrSc9dN
uC7ye64kCXYTuZbKpQR5eXJ3J7Mf6ur+iFb1EMhbMt8yN6N6QrDBJL4IdOqa
P5PJ6HmRNZeQi1spTubxfsi5y0FjoWvzOi2Bn5LHoxJye3BiJsvUWxbwO+N9
wW8anWseO8u94gCOrRSKLOztxZkFS5sMH+8gSINP6mm/2AjSa5Wc3zc0t84l
0WQI6RLs4J6SJcBT9BH2YGGC7nxQIG0IfmH+HOlfCXZ2Ob1fAs15/fHxQMAD
dM7Y+/HfFuAdrwLqnxHEqWz0rh3W8L6uP9Hrj8kTmI6WxElhWD/m8epA0RWo
u2P7Eh3h/bENbW99uAniIOkb9QhwyCv4wCYJxeG4SkM4mktmFox/AP51EPbZ
ZwJ6DSsMuG72kaI37pWSiER9roYHQ3QmcPr7/uNG+lAXdKR7nSe5IN4XzlQY
Qr3welzBiASe+2ojoKOE6kVnk3ffnSEvHvrk2FCEk9dGzH2dgC92VmVsvw/4
38pteLyzF/j2ZcGv9X9xMrwee5kE9iHCHFINwQ/JIs0VVYBTbtv7tnFQxx7r
f293EfTErUH94Em4ngqRZmfUN8nNT8EnFPIBvTszN6gLJ6zWSNS3gb+bMzY6
HKvFyQjD9cpd6H6JX4DbaRLWc/9kQ/Q88J6bvNd54Hn602PJTREU5tFsoWZV
D3X81ctpJrCu7tNZra/BPtZa65OkiyjS+9977Yegc1N3arCaIP+rn1SRpqEu
4K6aY6L9x0xvj5/X0By7VJvoJxAXEboJuy+h/WtvKrY0/kXz+MwHyr6BXS+k
vxxzpehJ8VNFPYAbLmZw7jfAQWhxGeHYi7PujAnkjewAvNanERoQv6d077kR
YM/ktz8uawEPNR9Ral1TiWNiVp3JD+Dvq7/e3msE/HHVQFPOaQVB7rDyjL8A
PL+y78a5C2BnsYUfNduhzjnXN045gu7BnK5qFwfjmOSaWKdmuE5aMmOPfAXw
u8KTp88YBFZVYUVuQvcneFUOsd/EsabYxyMi8D3Cn55cFQEeN9etfXsH8OJb
cf0HDvyemKC9ZgvU+zmjTgbGwJ8u0Y5V6j8ojDHDsaU7De3DGqQ94ftoK6n4
oHQKCxRr6eCBOA8duijqAnYcNzr45egwjvXcsxH6BLi+smr1IX3QNf5a24oF
+3ByVZTvRQkugjyp9cZhDHCoaZhZXjwIvLRQ6cMN/mIGOCZ4Ak8rvzvb/Bhw
23yI697oEN71+HDo9L7d8P/XFifQvkUdy8DJbahP+9C3Hyv1cPLoHw0FGvXH
ENgQ1ZeB0xlBB7/9Q30XZnsSeyOBZ9QsB698hOtz7131BeJdpM/+oD/w2TWb
ON2sZQSt43VLTXMdwXqG3ZNHfS9PPpjnO4XORz5vdqeqcSw9RsxiCs0bvsxe
eSefIpUfDXiiPoJBwfobLpRT5Gxo6Q1F4CnibIZ1vC+sS0JyZJ0+hVWTOyQ1
5nEi7UpwljHoCS9ni+WDgHey+OSHh6U4vc98PI0H8C26fn73I1hXGfY0WQx0
vM/ilsnXgAOsN2+h7xFOjrxnFefD5z+f3vdfDTpX7T0UyQY8Nm/Fms0A/qF1
BZMOhoIeqcledRX0Gv3pnnM66AXPq0qiHaBLrAN+PJxF85k+XPosDvrgzTyX
E+r3d9A04eIS5GGjyh6cd5LC1ufn/CUAb8I3ptuuIB0dVsGqAPw4+G39ygt8
aPlJ8joP4IcQdk3AYimscenoMf3tBKabbiKM5j3Zy7C5coG+Sh5+uj5kCOLN
XDuzG/iprajcEZ1jCN+5Yt9qiF+yKvzh7nwcM/Nbp4TmQn6NeFg7jOZEROWN
ojlZWMCfL8m5oMsChplZEFe5qg6eU6APMTYeg9xHgI8d3lIQx9i/Wcc6V/h8
ff8X92jIOxae32+xAf+HLj9+bmUThT3OE7TIhnisvVpWEAq6H+sfZFsFupeh
l2YmkEeRNW4W9n+hTl4M6RQphNf7XUcCP/AQ5LPoxjlxNL/xW3TVsXmc7pFk
bRQHP4VwDQ/egM+Lff5RbRjWXWXN4y8O9pg3fu/KB/VxXgBjheEfimY9MchG
99OZYTWtdwAfPnvGBAOXE+S7MWGhNWsIetkNjrAu9FznugzvxyKKeQfjK5QF
vCauH3h6Afh+wYzziBDgU7EgOoob7ZN7eiz6K8qfHmZf1mVSmEvYHLYZ9Tkx
eeBggM4tde2cVAdcnQj34LAEnkrnyk11hM+3yk1fOAV2IQdHY3ehfMZKSffe
C3ni87fCmhwK662r2yIKuLbJVpQ+B/4yPxM6EjKLE9/6uYrWwPVgA78GP/jj
WEiJVZmRHEE65Fr4t4Md5NvNWt7Aa4WjlD4H6js3IpOC9FWtQ25pdTJ8jraU
+yzUK9JDNx9myxM0HrhCWx38p5Ov+MG1kyJvK/8wuI94PKl6ku8ahem8+Zea
CTxbrLNj83gLxF1FxmhHAUV+YetebgR+GdLKqtdF+0P45BMJ0P0eH3ZbOYN+
6CuYPOsM9W5N3aexMbDHzssdbS+hruMs4I7uAxyn8lvEN8O6NhcM3SZGQTf3
tPUwQWc3Gv9rFwKcOGxP6u2E66ZFlddceEVhDuqxtxPg+48lPD9zBD6n1Mff
WhIjiBPvlxdXqRCY/ZNnozHAC8pP2Ca2AB/mVfJf3go42Pi6KCEP4lf5+5WP
Io0UtvzqVm60L0dv9+srl2HdDr814rSB/5y4jYLPgb1XxOwJ2Q282nKMsZcJ
7+Oya7y6HnTh9gCTwTbQZc++hYd6oP2s6uKxwLtk5i1yfypcT5cMr58MxLWJ
qtSOf2D/C0su/pvGKayMd6faA+Br1kl+PXXQzbUhmw9MZEMeDOgjjwAvdnc2
ffoCeb6kk1xmBp9DFw61rvenSMa4/RN/4Icmj9dai2i/nzED2wr8oLm4MvMo
8ELze0fHPcDDX/O23Ujso7qmbG//uwj6PONxz4sB8EtXk0pBUwGFJf950JKa
StGNk0TiRsD9N/UTs1rAL/uSn0T+Bh4x3j98FoPXcHduy3c9FPa6q+gGqlfr
mTdU5f6A/xmYbkA13iXuz37++UaCmAva/OwSgyCx8udqZuh+7F/FQ0bPKEy6
jefWMsgv5/btkEiAull5bKh6F+RB1t1K5k3Qt7SG5dGBcKiXuN7SLz5RpBFJ
3ndB9a7eL14NmsLSArmpjRAvxyX7z56Cev3IpH1tG+qH73jEweQLhXkZLSxX
7ID4vv52SGEA7M7qaeoHnPoeVLq2Ac23ZQTdoPwpTP6JzcapHxTN//ubXTHw
ernltS8BqE+mPHeKRSSOReZQJ4+DnsP+FN+9CH5SXpzaZgn+18g+TJ0Evy44
tgbmLqfJ7PPLBhioP+din8N64LNdZpJ6P1Gf04jpO2i+mTyvyw90ndhtBfcP
qbigmlHn6aMaBHF+ifOzDNh5jS6PCTq/1PUQK0p6B3rn+lAs6rcVnjHhw89O
0MTkx0u6mwlMceuw4GXQX9jpCldUV7OXSWpNixGkzWD0oyCwb/OURqRQF0W/
tnDKn5Ahki88sOlSBl6PbRqrT4J80l2wzeAm5HNu58NTMmAfi4D132+DTsiz
OsuxXwbpQEkfGeDv6J5ziWie8ZVDR+vRPuwk3Ts+zrCec+FeEqqdFFE/pjWn
BnWpx9kLugPgt9NpKx3HQXdeSL+iqscg6IHfcSd3SxBkJ1/1rVdQf7QsGg6/
BfsF7ZI12wR2kH+QxnsFcKm2/vyfbeA3oZO4/GnQdXurCaXbi4BD6rXpS9Ah
B9qYeU9QPpZx6RqlcOZz4w7DMOBXvRfh3a7A/+ZPg9pD0PmOmb+b8kCPjt8U
vyOLzmWtGLFxzMYxneXmvB6fcPJfcZfDNOQf2U2thbE/KWwg1l9DpghnuWm8
NnsIui5nuCXpeT9FcnyzncsC/zu8ffzgIvDHis02m+5CXLE0VYdCIO9aHDK/
Uwb5fNsl7dGbbDRG54g96AW+sp3RCJ373z60XOE1qO9Exvg6M1cKI3Nz2Sso
iv6edHVXNvyf2OG82OxKilzsr2QJMQiCqJXjMAPcmKduMRxpBv3kLzeZCXo6
VllawGQaZ6n/zFmVspXAeIy0qWo0T2fD560acThp73RL7w7ap+TvrRYD+s+E
6sH4eiksO2SL+RPgQ2aai5Mo1KEDtqpuml/RfErekdWwvrxUh8qeWaj7fku3
7sQIkuNyKq8/J0E3NvokAb9jX+Qs1wWhOZDZb/N/w/Wmy9qc/wC6QWxUyC8e
3W8Px4fQXJ/oTfvrJqEeHJ/n37sE+kl3/mPBVdA7vgYXZtGcW3fjI2x8MzjZ
c+z0y1r4/wuc0/H/m7M7zHWsBPiMU8Mg9dUcTgTdX+JoBL8UV11r31gHdYDV
+0JDNNeqNuFc2iMKMxgT+vkA8knZFpsDk+oEy/XM4+5baG5672oOdsiHK4wf
XfDkQfusX92NRzp1a0jor0acKHcv848EnCxNn95+sZvCVJ89dl74SmGRBX34
a8DjMSp+xTbIw7735a56lFNExgvdyP8gTjZ77QkoA95m/Hc8Rgz0wOeF6f2P
0X2yrZfyslMpzJ9X92rPIj62PExnZdQugqz3/1WO+goyP81nuLVSJF+o6cNC
QYLp86O1cjv41YVr/75e4IHeNyKRVxGOy4j6+Qgcq/c9dm4U9AlTQ/Pwf3A9
Cjb5V1gQvxI1exyk+ijWton7Z78oEBjbPUaHCerfpLdUyHEcJ5Y2feesXkOQ
W/96ihZBPc/938di9VG8y+iv3XlbGYJ4oSUvEqNKYIdU9V5uhHg1/j765jPw
Css6ZOdz4KVHIpu9n49RjE/RDOEmaYLkCTRfD/glTEpf6D5D+4VXDZ20rsPJ
kLE1+1wg33iQ6Uenf+Css5WbPmGo/7OoifJ7e8B38/uuX88o+j03t9h3SYKZ
oW5Rthvww+y5xPH2A0XsLvwQ8RjywvDQQbkqdP6Z79nV3U1gzxHOKRfAQbvT
Hl1GN05aF3It3of8w5rEhb9m4l3f7doT0bm8J8LLBIYBNxxxmTmvIL69OQ9v
UQQ7mKcxPE5BfThw7k0mO+CbtUxhAxvoV12tI2PqGwiS3TjglhH4nYjc/pwA
fm/zf/PhJ8o7PZsSD1hQmGJDiNV6pMctTq2ZB91BLo+7PkTj5GJhzal+uF6x
S3OMcaifBBuiu3WAl2L3Hbh7Ceqeoh97XC3RPJy32eyT3TjNNz+ixkLna4+k
TXi1QvxdspJyBb31y7ssQBTqbaelsMdLtVAHiV67+BPwrFpgcuV4GY7pfxZa
O7KSIMvkxkp+wLquHFzHP9oDvHHv17sPEP8zW6Vt477hhEsWzyukqzZyz92b
hLhiLiYuFCQBb15ZVRsDvPfyNi2zAniOmdfb8jMOx87Ubg1wRf2E8vHK0WCc
fHIrU38trO9E38rxs6oE2cHYNf4S9Zs56mQ9YU1hcrWjA8LiaG7J3iz03Omn
c8QhAXGC9qz9zssAPzPMbwtrAk6tz1FHlCiKePiifGsN1G3XL2unmwMfMiN/
m9mCvvgqs6kU7YNb81/2WQXgayfv+yacYzjDb33yq/OQr4R5LKtEpsEurdX/
ZAQJ8uDyKK1TgLPTrNO3BGD9M9Xhs2pVOLap9BzHL8iTGPdamvsdRZ5UGW78
hfaxxg9+r2ugsJ/RGwLDOSDe3J48LGYnmDKME4bsgDdtL9WxIbjObtpGSAH0
/IB678kt8zi59qexhhDoMLP5/JFKWBeT/vLoL/BS2Ze/TQ/ATkzdMmuzZAob
nNL84wg6gmQT/bfkDvxj0H3UGnjosfExr0T4vPi1nuodoDvVZU4U7ofX6J8x
y3Dwx8xj5mI66M31nNkDL9YS5L69JlMvQV8m2dByF0HvlJ8qcrgjRJBhmVum
RngJ+u+f7JvpMgR5POHfxBjyw74g7dhXONn/rdVmBeAguUmZ/wXkpU3eIadt
4P8OXtz/6iWa43ZS9NpZ4L/AukpsFayHjHXPuvAC6sNOrr3f6nFS86iw4gfg
p4Sch9nWfyn6Q9DNG0/E0fMX/WePQL8HHmHfJA55vGiXjXQV8JDg3wr7eKg7
gvqD+Z7SFKGb6PGmA/SHhOJT7DN8/2Rvjnwc2sfENbUU5UkpW6lo6B9G+9Pi
XcM7flDEl+XaJy3Bng+wkOjzgJMI6megE9Sbxz0ekv3o+Z2arxDhDvn3imQI
G+jiwAdPe8OAB1NaubhZ7ASpmcMn3wE6S+DThNQzBsG0VQ3eUa5AMFfUysjX
A5/ORlnaRYPdwifO1woDDwg773v0fh5nmaw/YtmykSDvr+V3GBMlCCue/HXB
wIN0vt6xM8DjVdOW+iEtVJcUNlaM7heQ744zG9D8hldnv+6F+uOagX61GNqH
LOY3f9wN9NXqj1uWg74bNpxdmgb/DxnevoT68Eu/6Rpz5SNoK7nrm++gvlaX
s38wUV816bmDA/D3U4J58iZwndyKQ3tVgYd8azSNj6E+PXeDG2XqKfL9h+M/
5uB9vQI1038hTpzZbgv5AR+UTGlt6QPeW/Gn0CQS6ghGI9/1Jqg76GM3tvVC
HGmvod+ieQLfB14JjcL3BCnmjDSi/RVN5/TCginaUoxNzQnNkwwO6rPMh7qx
1zI0ZQonvupMZHlBvXAq4VZgNcSL0qDDewnQt0krgjX3o3Pcy30m5Jdwcnpd
r5wg4MShsl+5HvJ76Hmur47o+WSF9URNH+DJR25LM/DVaUnPihdo7url6U9i
aRQZlqC6Wmsl2r/9c1e3LfDBycRVhwtw7HYcv6bEIk4ox5y9aAd2/Zdx4o7W
Nsgf+mLyBsCfRBHPCqu3FJEau/+dB+TT8hCJFcGwngRvkZ2ob6Bpd+U3adS3
fzEi5341hdF1wmoEi8J61Ex51y3ipNbTNo5mNK8mYOuty2EUcbks1LRbhqh9
u2Vf7bI98Pv991dKxOOE3oibe5QkQbqr8OxaBfmGlbepdDQHJ3NyZ88GQZ53
0BHG3FC/ZdGwtT6gg5LPiN65WUQxVFWH/lhAvnTQOfzyHfAs0z34OncFRSce
YbM6BPVVD9/ieAboGnKD495DaRR9Ml8gBs0Ray+9YRnRipMyzbMZ/mzAq1fX
ufmtIYjnL16UCEB+r420amDC7+e/GS2Lgzxz+YWoyGXAw1ovTlYkmmOhH/iA
AXmZOax7fX8FTv7eKXJDgpNgplT8Yq2VIpj2IoTqHPCmXlzkv3yor/hVU397
s9HkUla65Dmwc4NrAc/MX5y+FcVULAA+/fn3Xe4tdL/MNtFgMAevrR/QmwhQ
JljVDR4SohB3lqV6V1z7cMLhysVOcfCDr4JThhvkM9HToxpjP0B3hxRcuAZ6
d6tcXLbONNjdPE1CgJcgXSt+M9D8d3WhmchzoO/zmvmyBr9R2Ngri7334DqF
pu/0NkPeUnwQrHGyC6czyxbok7C+8Nn1olGTODOM18BxE+BV+1umD9cSjjnn
dNfGIVzu3fxMBeLY5NrrqgV0DnhuMf4Xk8JqFloHtAZwzM1SeNsB1Pc/IMMC
zV82YrmXQ7yxjIatxtF8xQyNlSd0MILWfef4/Z8MEdSvd7CXJiCPPtb+2FKP
0x7SzbJaEG8JuyXDYkAP0MYZ5zEOguAUdFYTWkXQG7vVBI+AfZlVmY8NII6I
wdao+mjc+l3S2phuZajXsuZWov5+5KTOqOsrnHHN/5jpOTkC27v73txG0MFu
dom616Ae7PqP5AsBe1rnXzXUh3ggbFcH/l1OsI6sXTidD3VURqyhTcUcThYe
u8DlAHlNy+/pmuug107RftbeUL9lPbkuFgM8Eu16uIgL7N/O86/LHeqNynWm
7iGgx98vVSahPsS4yvUfO4HPp1Xv8sWNQ11ZclpYBT7v66aa25IQx+u0hrmH
pnFGUPZkhiysR/Dpy2mpFKgjmVTd7bc4E79yqfAS6MHAaQ92U+CVsbcGt0o6
Ie+k/H5qqIT2Fz+9EgF6oiOnkHMKcDkz13IfQ3M79jz/43EXx7zPbbAdABy8
Vpum01A8OLUJvUgHXt32rzolhcLOh/vp3/5D0RNF6+LTwb6kvVef7U7Q3cLM
xp+jYMdj9vwan6kubFWxtiVcz1K/YlMp4M4gp9ikDZ3nL2GvagEdFv/plfJ7
lP/pDstbwAOLWXP4XojL3isxdc7zoDdN6jC7CMpXnPVI6uV2ghYJy9dcB3+n
73W0hfjizMHW+usqoAcEN2//cZeiMD1D/r99n3HGknDjRXPIB8ovS90XOiis
+TH3R3W0fyD50V02iAOnfoURN4gPsuT6tAjw46nAdMtFiIPhQ8O/NrDTBH5u
7B06H2fLz9VvDvlsmce0IlR9GHbWvY79PUWccEouoeDvQu8PxsoNU/TP8ZyF
fjSvbpJfjIL12Qz1mlrOUdg5P/dEdO5vMUYREwOeYl+nQ0Sh/ntzWpnJAThR
8phxOQTsKyRhwik+QBGHzQvuOwPuBH0tN7ZjNDEXwCHLu4omlWb+yZ2FuN/j
o/5sK9R5fhYqI02zFGk0Y6TgCXhySkiOqGqisBTPkP3WPAQx2dgk3b+OII2F
HE3Xo7+778QSIM8zQ2Qi5iD/SLhnG6UB/qzr3Q4H/6KwrO40TRHQG8dLzrqG
Qp73EUh5sm4Q8mVtmAOjBM2V7EvPhXU7VDz8fA38V+h/dUwIrmdModtUDexp
Jr3muzDUoTrB6w3wKdw67t6hbRa7CIz33F71mQWc8N9DKRoAr4uHPtKTAj7N
P3+CobqA07+xu0eDxdHz6XGXxiGKqLF1MFCXI8jn9laJq9B5uSZPLhvQJcoH
NH40Qz5fedzKKhd4/bWIrVIJ8MjmXwUHQCdgru/2ODzlIFhsL4ZmfysRZIwp
n/NvHjRpaaoJ5fFX39kC0T4c8aJDAweH0dy7HyJXfXHyh8RvNk6IB1Wd2OlL
bTjp1T6j6r8M9Obdvbe2w/WNBzEyoM7CBlqlpwI6KDLj3bT/JPhZOefHYw6I
N1LuhtvVUorc+ztoQgLwIJZwSO10PY416a1iFIM+eK1pkDMP+VbKXmpFKepz
8AQfzZzFWX9PluIawDt8zwJ8Q9G52ySzwspOqCNHlRLHAA8SNi8bLVH94MwR
1d6G613XfKKwH/RYK+V+xxb4pIsz7UdwJcV6ZnovplaKIC+n7Jb9BTprrOeO
CAfg7U1EGD2L+qIeY3n5XED3A6aSsv7gpLjkLscjaK6Dku3tAD8ce1fUIlDF
SZDR/Lev7wY7MLZhitnpFDZ1PvfKszGcdagkL2GvIoE1n7sW/egLug+/tHtV
JY69VTU1kQE+LheRUbBCdbJxsK77J8hvJhzF/llUMrcYi6cH1js22naQgfYV
Cb2+ty+RIjcc7/scDV4JyszcNNwI8Xjjw/akIZx+JNvjW4g+p+BG3g53qsuw
veOHJ+TppkORRw9JEPTZtbUagyIEefvuPa0q1HdlxV0fb6ijBwPVe2xADx4v
cpk+ArrxiEXclttQl7COvOqPasbJt+rfps3h5yzHTVu4wB/ho/xvysBPf3kO
lpbBOn6t1P6UPo6TRG0dHxvYReLA7LXn6Llz10viWSr418l7Pzqfdj6ofLsU
1BfjTsM/VUUJhu69PeoxUKdPHteMWQnfe+LZrKTsEkUYOKSkSsM6xxI27jwP
fmA31XgxAXiaESu1d4TXhfvVbimyBF2LvxXhkCe6DjM2LOoDT3UP3Kj9DfV4
lipZ+w3yLKNV89iWVJzuj1kb6gR2KRg4bhADOvI82y7XnaCjtgl2J30FXbVH
PZ67De0DZd+bk52HMxXIF58MAOemrhP94z9x0jwwNBX1DfA03HIK6f34S9fy
d0zg5Dd9Y1EJjCB3mET4hm0nWPs3aL+oQftZuC+1OzXirOfn9naEwvXlvfwS
dXsEJ0fWnOyuBF1j0NO0Cgd9YXvmc8IqsF+tXULJNsgHM/rqUsif51663HVF
cySHONeiPiCjMl1kE6yTrJ1j3fWisDfqOmoP0POoxfw/5cArDnjx3C/Ul6Px
VdKzbNCXrnUhGnD9ojn5y8ZBN4yeGXzMnMOJIi7mTDL8XvVJ3RFV4JmbsnO3
z8C6TucGZsXAdfUsaHCZwOesOJ9m9bQVpw/vvr4V5c8xhau0/HKC9Ck9ZbwD
fq7tf29aO0yRw1eM7RUEacx928ODqVCnPpDVpcVRXX/9Z1qEDejiwnVvuPKA
dx5w570vxIkjaw/zqUA8hRecUV0PfuUNedq4FurS82eMttuBXfw/vBla14CT
iZSSXQCaA2WsMX2+EM2xe3jpjhlOe3IHDOwB3LKs1tgMoP1hLu05dfD5hLyu
35ManGQMFmzuQPtJuvZ8P2SAY5wdepd/8RK1uxrGY97sRvWVXNuL9xBfnSYb
HKEODSk0fX8U6fOjq6NqIF+TnWlKlV4UkaISteALnxPbeirWvwsnt/4n/tSX
m6C1U3FPTJog+yY0dfbAddR3eW/8MokTD8cfqotCvay9rcVnHHCov/dmTyr4
zYtzJY3O00uyfSxTmUK65cTnsXqK3sxucYRNlKA/5SbI3kHzmJK2D58uorCN
rzLf8oA9JN7XaewH/ko+aTTZ1k9h3Q4pv/u6ccwv5I1MfRfUh32Za2wjKeZF
sd/NzxlE1wuelE2lwIOS431GIahflf87t8E/FBHtksreBzxPJH6u9aqmyBdn
LnRdQf0n+edPoXlgN3Mjtfm4CIaXw84TvkoEq/dZ7CdhwO+VujG701CPVYmz
y3sDTiVO3bs3D7ojcfje1IcmnJy8tisTA3+FlQiY68GrId8To2DAk9mR2ZQu
+HlFr8B+qhfwvtJN8RwPQR8LEQ3jROdIcs/H20bhGLd22U2eBgoz3dCivH0Y
/Cj+1k70HY7djPurXA52OhC4ZP0I6ikRoXRHvu84g5vbQhED3TlGXP10poSi
m1NqBCTXEwz7/j3ywNsY41Zp4UwaxOm97i3fQbfeDZuS0oT6+oqacphgO47d
CKm7kwv5T2ON5mERbuDtNQqiVdkUMWFn1eUO9qkwiixH54rpXaIOwuM4rZrK
vfsc8CHH5juhSpDf9WQdPzai/uIa0v14O04Wba6QNEP9MxSb37C9oVj8Vm5T
42C/kVOXHivLEGTQQxfh3VAHcH789jAIcOT2yMJKD66fZAYI8EH9k6ZdfOsP
H8Eyr+hzNt+M+jG7/mkB3X9Pc0z/Lbz/UDxOT6HngvS7GwfcIX52pRsmdeDE
oNnc2tegK+qlFG03gQ7+Fp40KwS8tDl0lktlEcf0Nr6bfPkbxy4kCHQOdeNd
vdHuY1s2E2Rs/9yYIMS913hDjyV6rnr3vxs3m3Bscuj+17Po3E5iRAD3R5wY
PXFtjQXYk7tk5FAr8Fpdu++vRX6CcG6pb3gAfGwR3WVNovN9x89v2CtEdKVa
3HO/yiAI6zeGl/PRPGc1oeEk4A91+b6FhUmcPFkfIYHOA/6SyuRaDvn77oOw
NPZxnHjaWHI8GviencMM6wO8bL+dvD1kBu+yMDqqeFwJzX0W3i2ehs7H06Lj
UMc7CxtsWr6CYKx+dd1VWIaglfLeqH8F3P+ZVk0Cu5PU/qCFtcAnMdfVQvjB
Hu88D4TUw3rOtLAC10Ad8bESb0P76ba6F5e8BL0+vqxfJAf8OzwbGo+e+5EB
iTefIp3joXwm6xWFVebb+p4G/edoZ/H4AbzvyoGE6yyoLyLd0n5HDuMsk9fK
wQKbUH17JhpLwBle/9pauiGOMdy2lkikMLFlIxk3B3FirSsrOAR4deTNM7eq
IZwwf9WdnYfOn8bwDnAArg40chzVmaFYwUceeStvJOi59xWv0D6mTWlsbEeg
XrlwZbJ0agbqxxryVgas22FdR87ZbxQz2urizqfgJ1J2mourCupQzk/HA3op
+k+6scAhpGss7BSvg87IntN3EIV42suUv7dyAD3fK0qpikPzl17vJEqpWosd
9/b5g76IWHdt5AbgE78+cdNsGU2qVm07QcI6eS/tdFoN7xP1doq//IsiW+Mu
6vOsIgjdB8VLtoAnuTOjYS95iC6nYguVs1A/4G+WjaP5N+SQnkJaEoX52Pv4
9IMe1r2qIs+A/MVapyKol0Fh9w1C/3CjvnyTKj3e1jhmzeRWy4R6sn3R+mAB
4NrZt0SJf/X/5tXEDVXj5NTV/KASNG/7559ln6CeJnbz+Xk2UtjB2oRNpeB3
K/5VkeVdwCOx2ceHynEs/eJGp59ojkMk39Gv4FfB+2IXtXNxUkQsVEEV6qTU
15L7O+B9QsmSZD3o0rYLO3z6Z3Fy+7JjT63BL+aG5s+LVoAdG/TqVqdQZLRP
zaFOlCfEPqqIhVPYmojNK1CfhZe/v+sqQX1SWZxYYAb5+KuEt0s2xI17+Jxz
CZrf1G0pdRXizPrxp5oyuK7amLNSl6vALsfsRHjncbrMedU/1L81nWONBzvq
/2Uv5W7nCHUCz+BkVDSF+d/1iN03iWM2g88mKdTvV0LwOJlAYZrT/430wXps
X0tXvUD3NUXdx9NeQz2ezHH/BbyPEHzT5xGE5kyo9Lx9R2EnzNhrw6H+Kop1
SqqCfF/ddXeHP/CXZPVIwT/QPQVcUtJre9F+kO3zpqBb3bc8HrsF/kq942rs
CzqOce+4RRDUOzss1bI0wJ/LVLUWmyCu41xWT6L7YBEdmXuNF2B9sYxPq8Hv
uz9rzBXN4dhRl+qRrjmKHBwuCaiE9ep1yQrnfaQweTUHdnXIJwL8PyPeo+v6
tjLFHvR+7cTWnH0FOKZ+bfU/Z7R/nK08KAf8KSI8ZnoVeEUwvC9SKI8iv2hs
vSMHfNys3MfsBnzYTewrGQO/mv/2ikpB/ZkizjFm/uJk38lDt1bD7zt2WaVu
Bbz5YsTBM6jf/KDCkeMZOCYVF/XIj5sgG0ZPczkgfD3XD5/5RmFORsKGzXUU
mXnLt8YT3u/RaJW4rxP8E/IcK8jAyW09ifVj8P9vL5ZytIAevaIvcMhwFUFe
vc/X+Beds/Mbpd3g82NNyxpt0H7L7KPPhusorGP/rvAC4KeZv4XUa8hvpS1X
BX5DfGM7foR8v0RhC1e8rr9A52ZOHeZ4BTov5kVFuSyG5kfsGzasoLAM3MAn
A3DCcLF1iIA6/OZxkUgc+PtYQa7iVtQX2UT6piz8Xl5y9eNP82j/yWH+cnR/
Xuz8suUUxGHAOiwcfubOd8oSQudnLM+fsU6nSOHqy6wzYB/iiAQZAjgSayLn
pqEOqRXbYJOI5nVrH752NZvC3EqEUyPAvhjpuK4G9GpXjuKMUDyF+WZ9mjzZ
i3e5rt352QDiws6gXFcQcKNY3PtzeAgnOf7Tjp8Ge+n5RnT45MP748iwwjcU
lhi/sWkVyqf2DpmesK7npi5rsRUE7ce3NX4E7Z9/Z5nJ0Qa6aetT412DgJOT
eeQHqEOvLHbtt0D7Y8LG+I9EUBiD2LUQA9dNaAZ/fRMLuvOPw8MDsD7fBfux
N6AzhAnr6FLI79yWL5tz4fP0ai7gCVCXWJ/1+MNRTWEPEvm8ksDPW85pTuSi
c0KbdNpibcF/G+rOfQN+3eiIXXMDXtu1yu+5B+qrPVf6QgDF6/vmMS4Svlf6
2zr/LNCVPp9jP8fA7y2ChbugLoxO99hxHq4r5lbNiS2AC4amZvZ1dN5gl4UQ
OndHrAv9ewZer2zeRs4CHxHTXzZdBJzFXzNuWA86Tll17//zaaM/+0Iphbl8
/OjgAPrP5LG44w2oNxUm2OpQfaRYcjB3C8RLnZfsV3Z0X9A9fWspXHep2Eud
CcDX97SkiTm4vsHPXq92oTl4B5xfdKBzIWk7hnn90H6oT/cvSlNY2TnVmoFP
qL+hWE1hPkVevPZe4AnEWey4b9/j1ag/hVblXcQTt5/z1EFd3fGygM1pASd9
Upf59KH9+k87ok6AvvbIHVrjQVNYeKDPa/TcXG///IYc4I8smdhQQdDz7Xzx
xz4u4eTdXyKq+uwEvXet4RfmKoJ1Wg0/mAD6enzpAMMZcN/tfaV0wz+KfG4W
1TqG7r+JLRsqgfXx1ihv6gK7bNwubnVkGic1Cx/+zYR6ybmaK/AmvP+rrPwW
TtBJMz8PUxdAb72rPHOvFtXFXcrd1RcozPpCfoMPxNmgVt9uTrgeg9Zz+f/A
7lbxUq3dkFe6ixadmtCcwsDEFEELnNz/481EwUqCtHdeNT0O9jjxlV4rAfHl
FGG5Shv4t54YZmhAPbHvZ9t2ReC5Ws+SFUI9FBbUeDCzCP6uk7+iqx7is37q
6KIM+AmrT4xWdsaxzGXXUrJBR5h1eIofgHw1pLTLfHIGpz8dk0hOEyPIH82H
D6M5lfFsmx0R/lSFPqxesxF4Ztydp2AZjTmMrK2a7QB/aAp2niugSI/uf+6K
bASxcvuLOSuIwyxh3uEFNDciLme70HucvL6kaackQJC05sXVB5EOTu55NRiO
Y64B66O/TFKYfuQnF9RnjjV/dVVuDY41L66+PTtBkVdW/3rfDfg5FG10UfMf
TsZod45GQZxcyOBtXA35s5+3yuIX6AzNiK2P1w3h2PNPfpcvwuck8UhttwL+
U1ZQfhCdic5Hqdrq+1FE17uSlTvAH6wyz7j/PuBYjXufXiLaPy2a6jvxHXhO
6/jKF8M4vSXqrMlxyDM7j7nk+QIv2x3K582Dnyumtzmic1Ik/9tkchjHqJZi
SbSfcsPTQ5dtgDcckuYHtkD8bIvIe2YPeYl73VluJtgh+bOE22Xwc5L2Kt1R
yE9YulA/2x0cSysQXdYP68Tc8NStpyHum+3/agHOZpWOGleB/ctkfn74VUKR
Hz1XiqxC5/G+X5y8+BZ40l2hxAz00V9aynUrihM6hzMFeIG21mk3SMeJy2p9
IefECVJufvmFr6ArmGNOl5jVOFa66eSnM6BLFIqd5/fA+6wbhqX8IV62B8Vq
6AgSZJrPipRRpMvb7rck51KssR3z72jwZ/Pn0m8eELe+3WIep+B7f609JvkI
eJt7JniLVi2ODbhc5P/2k8K2eliKpkgT2EXOkiw038bPsfp2ezdFbDz2tcgY
4ljP8WO6C/BQhYz2+9M/caLti1bU5rVEV3+8UIT7RgJrNJ96fWAcZ84kXTzo
Bfo6xeiTlBHUo1VK5vpBAzj9n/u0w4wC5NV8J+f0QQpTvW2z0eorTqv02+uZ
o76t6aWrF+tBn6lLuAUBXvQH84L9oB6bq9126Svgo0vplw8zAydc26iKPliP
Mke69hjEXc1SIDf3Pwpr/cXcE7uFwHZEev81BV1548/+cM0NBMOIe+jl3020
3lFW2/htFfB/HT0V9BbHznQ+FIoCHXHXpeEiA/TUChH3fKsRCjOvtJB+Cvwj
ai+dj+6veeSsr5sBPZb4p89TBH6f7vThNeqLbcy9bfUzIYLscJL3lEX7Ak/Z
pTBb4HqazMz0RQlW1bP1UllytO/qL/LiQjjUX2FSvoajFFF87+wyX/jcbYr2
hxKlQAdoNIcfYxCCTgLhPvI7CYKv3mV1A1zfeoWe9wEoD5tcrkLn4rKErwY/
Qnq+5t5duhVwd0ehUMeewrb8NnyE6l9MwTNuzo3CsiJ3xKJ6/3iH3WVL4Lf0
89erFRqBn3F+ef8iCgu2ETILQ/MuBMV3pEHeIZf224X74YRK6p32OrRfbOR6
NpovtsVJPyMYnb8fZucoA/yzrgZWqC7B9yzkl1/xwjHF+8uFX0Ecm+wwK2IH
XGkKu8jhEB8x8xf9HqPnW+0rY06Mof3xDxfrUL/3iT1xhaAD5dXY0zxBn81w
nzAr/YoTmcqLYb4ycJ2xhimPgnFyISZucoMQQV/7ceI02rfMfJGYwfqBk1lR
ToZdEL+xOmkhrwC30tavfgei+XwrlnmhPp3JT35nob4Igpu3sMJ6cPLH0F0F
2+UEWfu6m08O7c/U9LtgGgj8+qi31x54ijh85Jp3LPDMMpW+p4B37VlNXiGo
F+05jw5s30LQQn9SVsD3kzZvzr5vwAiG1eKlp7GAny4F/eUR0fD9m3yb6Hqc
pG85JBFgNx2BV+v6SyjMYW/Ut6jvOK0zOv/kJ/hxiG+V4AHwz0NJNQYJdvq6
NjscncPl9Lb3fIv8W0gvaLwAvnn2X+5B0PveEZ36S8BLzSPdRtvnqbG0E35R
CYAfz7bm3ZxoX2vOXvPgCJzcbFN7G80/5u9y+igIvB/AFeLxE+q4kt1PdUXg
dYg6I4DO1ajnOlYdAz8wzBvP/GjHsZ27cOnPYD/fTfasdMDJ+B5pOQr1pdld
I8MGesFX0UwtDnSjsvG91fmAd6aSxO67H9F8t7lTvCSFfTxa7vkNeC/fJCh4
B+BjyybHdlv42cB1UvBoO0VMRNjxMFHfhN2bT5+6DnbmTDiD+nzaO6ylRGD9
uodv/PKEPCjvXXlAGr7HOp5RN4HqJ+dyo3WV8D2qwfnV+uj8ULv7PVVYp89x
88kvOP1b0nZ/MeBWegYXyWyliL+rpkMBJ1jOiMGoHNqndyy3JT2QIscEOE59
BpxIfqL7Xccp0q+Tb3QNfG+0f7YfOidS7/L7PifgYeZEx8XQaoqcqcP60XNP
zsu/I9d1Az5Yalrb6tC8gzO8blAPK1eE7nJsx4kETq1GNTS/6qJMSggfQWxo
0da5BPzGEWQaiPbFvpoW7smYwYk1ObzFTyUgjrQT7M4D7rMeq/98B/xdHTzV
qQD26rk+m1IOeYWeTgw0Az36Wj/nFjWFk8yCV6azwO9LKvfO3Ef9U2vOJjT5
wGsovw7aP4q5mtb6WoP+Wmln3/kS4jwjyVsD9JBZdJi4wHIa+2co1cK9nSDV
xwjBONQns7vxc5svRT/MOpymB/mBxbGVmOAhaK7//vTPAD4MzuXWhPxD+0tt
D7/opLC/T3NFeQEnXZjJryrUd+S0zb3lYaB3mw1chdB5mfaR1Q+gjiVP2Nnq
ZVJYcdDloS40N+xD69vgVIi7tY0dfg2Al2dLSikRwA/PDkf9B5939/P2ZZ1g
75FLxnr9EK+tR4QFDJEO3mnh8Rvw1XxiWie0CMfKWtRP2wI/LcmY3RhB+2EO
bDrzFvgpfRvfyU9gt6Bkxx9zsK5kfUuzWMDT4RVKs5moT15BgsVCEo59iFNy
eQzXkypg9IUL+JLVFM1sQnPs7n94sRM+bzJW/2Mg1ItfTfMLBNFcRT8/6w9h
FNb57Oi/PWsI7HVcxf12yP8+Wd7hDHh/mUbCQCLEAxa0vfE6QWE0/1J0eAxO
Tt93sUf7K3fc8M1WgO9fkuvLVQHdMpt12v0IG0HXCFhio2IE08bc/jq6HxJ8
I9v6lwCNYcxcE55nFJYvx8qQA31horjwbls7ut+Nsa+C/Pyt4knfP9TnR/1u
0Hao+7Zjt8N7Z3HS+oCVVhSa+1DxJHAf8OcJ9pVedwHfYjleMX3AJx8DS78d
GcPpxn68dxfUk/HMDZnu/AQdQNp0voJ4MQ2gb1igvmyzHxqkoqA+Ozn7UWQC
J3OmOyY3iBLk5cgvlB7oMhOj4fRC8LNhtpBpFtiHEl3mje57HtBV2xyPdM7o
5gxtdA6CKWhrGwJ2Efl8YeoahYn+qL79HvWDz0uQdAL//tf5tmwtvL+yZj5N
H3iAwS9rO5gDefXqWqdy4Ldxr5qIeag3Pv6okggFfMhvSA7xaqDIJ2vioqPR
eWeuGpXQNKj3FdcZ2qC+F6qfvyiBfXYMBNW/g/h12uNWfQd+XyDQscxlnMKq
xScW9dHzA2/512PAb8zrPGJYIoUdsSuMbgCd49EpcqwWdFnsIJuVKOon7nlX
4E45TlaGxhf5g96XEC44tGuUwviOXV5UR8+rFLFQI9CN5MY921MhzxFrLBNu
+eIYz3J3g3+cBH1Fx5NNCd4X3ma17MsKghS6EGURuZygjz/jKrsrTJCKDw3X
7IVXrXCP4j4uGquNPKDwCOrGhT65OiFYH3FzLzO6hsJSr3xf5QV1hA0HN4ch
4I0MGt6jD3oc7xxLyAUeGAg5qeSC+hG/WBZwBewZ/LK79RTq23ia45FaHIX9
MhDb0wN+jHb31TsJdhPX9Y2mR3HST/R6wIAIQW79coZGfWRrj0yeacwDXKdo
sHX+wcnEAwzVAMBTTNxgOAv+zqo+4xMG+bAez/jatkBhEhn8uyTAT/euXEqe
gnz+NUyN3An6Z+vNd2+vwDpdOQS3sSahLqjlq30MflQOu6pvmIFjn9qN394H
nGyQ+94+jfqKGf58N4/6PY1iz84Aznt78k9dBf1ASjdFV0Ae4Vd8vK8D9Usf
6fDSBHzo3H8axAZ82fo53bUN3lf2ys3Zu5sizd11Ptej/eBr22+HAf5YCRph
T6qgfiwq1aIA13qZOwQcP0P9YHqb5B5H5/vsC/JLcXLYZTrpOZo7wIWPR0L9
qGMydHA5fJ/EZq2OD8B3ej7RvX3wvfRD/fvPIC5Ig4pLOqCredcVJeyD1/P+
LZdlAT+FloLh40s4zf6898sZcYLOGyJV7CAP0P215H+cNMY4uL5xcwSFldR/
fCIL/iSFTt8MzaMwVhj3PdUcHGPvEm11R+dkbnI8+BJPYfimuZiVgMOyjg/h
ebBe/e4cLmfg99LzUyHfwS+sLXaB0xSO/ftdk8k9h5OnlzJ2ovl/u018Bbx+
4mTgmOsjJvhXcsy72g/lWWbYxlA9iEffyhtKwKd3u9ews4F+uttlK5KH+rhe
O84v6w7r2b4h+D3wprPiy8urwD9PJJf8EiHv+Q6qd9wAPr67be5W3zTq46/5
S/gNheIm0xL4mDWqEh/NwrGVO8OKktHc2j1ljJYUCrMd3sDkAR3KZBv5VVxO
YRdivV+i/ZqhQjMLOT8o+k2U083foIt6e6q3o3NfboZqf6hBnNwgkt/yEPC6
F5tRd0Xn7p/ud3xbCryeWfzlSS7Eneoj5QHQAQ4T2R7rQYdmVNrdJhehbhfI
HC1E5zHbLwhbwfqsP6R/OQx8kEhWVXcDr5NRls8MQecmb94WQMD7/dus8n1+
URhR8VItIAwnFZ+3qZqKEwzlO4b0wCaCLmcM/+yEuuWA7QHueHRf+c5/aqXA
f83iHn7GgGvZze/lJoDPZkrmDsc3USTGdvjjEvDhb53xaLRfkzypdQ3d30ur
fznyEep35XSxNw7fKfLifx3FKpB/z3xu5ngHdnbw3/NYpQrq12OX6+okCZqh
nKn/aRXBYIgu0328GXCkwCn1JBR4udJEPP4TTvZV6/PkAp+ZnwzpYof67fU1
bfdg4KW1hZyXT3IQpJva4wcivARdsDSWWYHmCnw4EPQG6ims5bG/DPjF/eTL
oyZgJ2m1J/+NfscxkdyQ59ugrrJ2+3pqEvIhfWl6Oj2UwqyG206g+a+0pMtd
V9B/6X8O5KkBbwVsr9Vzg3q/8OFKUFpQFzWxNQdwEaRlbVPbcsB9hQpT0Q70
zuThCxk6TRTGGOT3JyJx7IJkk58n4P/5jS7q3TKC5P79i6t7NUFGttw86An2
VJ0fqHCE+K7LPSrrgfqlP9rd6Qr2tgrYe+/yd5x8/iGlXJiNJkSqfwvyChJ0
5vuLT2XXEsmXkzvVe3aAP6q/bNcEfCrtSSqggA8G/VvOo33lrIDFvCaI/6Zm
sYuHID/Wtrde+4L6nkQp3kT5/+H1t3nAexgjVK9jbRyOjehOG5yBPJ+1+rT5
RCXFvCpiNHMW9UPI6hBbgnxGinD4ZyVSgmcNS90llQnyg3IMdmQ5zYg5evw/
P6gv5XaV7WTOQ/06uSAU+Qmn91wuNXojSHR5h5///nobQbYwLN44Qt1iuXWr
WMNygtgzu1KWgp/V3TyndVD9Q2jvim8B3rHeH2vtj2PmNz+y2QPOVE+kvtwA
fuhYfXR9MOhjMQ9Jznqoy1mbTvmrA28pCXjNo/PuWPLROgHg64rDHANN/YCX
XSYaQoDfhSsvpFF/PKdAX+s8iEvr2ZbRH/0Qp75SdwPBDp2r3QTYwZ8mTjEP
M0Bvez3IwOKgfsZuprQ/uIdjxSWvi9fA+iRCw/u6wT6/9bTmrYCvs9bHbU/6
QmFi/QaewrCeJD9C9uByQu+2tsFMP9hH4dZnVxUZgjjEO3d1mziNcZx4bc8D
eaDnn0k2moNdr2R96vofCuvb+krbEN0f28i8/RPi5ZCFmQ4P4HagtFV1WTlF
1k2FNH1D99uIhAyF4xQj7eiwjwbop8XieC90TnJIqxirbMaJUbtQZvlWgmxI
aXM1AnzlH3fiO4Lmvha6Fs+Cbh/jM3jaATxQnh9N6v/BGasPiq+4IQv5NMhQ
QR7wIyFb8+dUK07ObZVOroL6OKzGR+U96t9Yevz3fgonX1149nQe9QlY/iKg
ooGic+oyX6JzAfbD2oc7wR5l8q/sZiEOTY4kKmlA/udtP77aA+LoWcyW3fsg
X7Y2/fTV66Gw8e+aQiTqq0+rTC4m45j7xL/0LcDnPedqb3wAuzAvaxTuQudr
n/xW8SoGfuuafNGB+tjHf7egLSksUedOyvpahIPZ/uegR7rkGst5FnHa/KDx
Qv96omujaeh48Q6CtjrlLPOfMEHbk7qhWwFnZazqiTuAE7fenzucoT6PuqDs
jOaH+pdpxMuMobk4U7tOQ3ysD+NsskP3pZ/vkbcFHFg1q2jWz6PnfHp3fryj
CN3pba3SwI/Funohx8Ce2F7NOGsbnJXDyJXdrExgScH+5U9/4LX3+e1a+rYT
WLIuj596LtSxyrOznWUUcenI6y0HRYiuDZYGIo/k4e+rj6ssCREkD21gJMJF
0Mmr/SNw8Pd8wr8GUfS86M45vW1QD/quXG1FlUE++Xh+ky6sp3n97I/TwOfM
O4Ebj8VQmJAtu20K5NPzKyoCVMB/O3S0r/KCv/RcZRJdWynmXB7ZwA9xav1R
sGAUdEnikX0HGW041t4ecUgf7X/6/k33dBGam7PlUfsXiik8se9kAuBsnUrU
wmnQXUwhroMVaN6PbOdjfqhzzOelQpatJGhW3+MZWTmiaypj59EhWRojVQJb
t0bjGIfFu5QPgAtVj5ZMdH+Y2K+xlwylSE5B0zp3yK8ObmcKp3twcmWQqtgN
wE3QXq52W+CtzQky98ZRXj8cHtMCfgg3/e/fq16cfFMXeQXNr24KOCanghH0
Pc+dR9kkCLJ5bFeY12qanMrm234YndNgkxMxLQA9tI3v/fMUijQ0Ofv3Ndgj
RrIlXBjw1RMzWmyN+uWJuj0cqcBJ9ykZBUkugjA+Xd65B+rWyTS2Osk+4CGh
tnUSoKt2VCcZE7DedZltAleAr2viJrwY/3DGg+8rkx9IE1hXsKugJOjIMjn5
R2+Bt9XV/CruDIOddKo1Z7Nx7OT1U+ePchDEwkNJoQ2gO4Zaf7Xow+cxnEt+
H82isBWKt/Pi0XPY285aKe9xwuFPfMzmPcAbE52tMZtojJl++2RTBUXXdGq/
MQYc19Y7zuRUU5jLTPm4L9TlPJGYZjz4aSxr8bd4KUU+PG9m7MRNEA/2X0jY
DDg9mTRUEQg8eD+nbmwG/LDlQp/WNPDdoY2pLWjfkGp/Cb/8LEXfKzgqLA14
NW99FDAN+i36yZL7Tj6C5EyaTzRG/Y967hTlvaOwNSN3tzfBz4yYbh40L4g8
Y28WCjqoRmvO8PMPvGuTiDOdvgn0jdSF4NWQL89Vjf14AH7dcrBX2ATiDPcK
NDAAXA88H7y0EdaP7XimeBDqVEKyuyEG1aHrD3LWAi9ffyCtfxnqSIbCley2
NJzmFz/xchztsz3/36tTKRStwHfaqB/ipPfcKWecnyAPG3xc5aJCYCIfsKe7
YP3WQl+HrIH37tRedV8OdtdMVtmC9UJ9fpTeoQ12sHi/e1Mo+Dtrh7kkN9hz
8keBXBfkb6MD9boKEgQWP2L65yfwc8G+qbetwAt57F8CcyC/3reetyUAH21v
pOxqIG5OWa3xToG4UqhQya6QIIix+pEMaagfLF484e4D/Eexr1i6AfbXktl3
yw7ww825MfBQP44V6j9SQ/fN7+3b4NEL9ZpGq9w46CBMtLF7Dd8shUlNahxW
Btyqvik7XdWNk2VWn9ougK6J+d5z4zvYkSgM4CqIRv1xprTReVVpVYnHx7lp
LFAn8Vb+H5x14Ogecwbaf9/ClL8KeopNcOOdwXUE3dvRz/sH7LT3j7R9ANq/
d+r9nphZnJ5YzXfWC+2rvmybegz0ptKSrvLpfzjZFrJ7VyPa36jU5JiVQ5G/
pA49HYH6Iu/7Bk2DBZyMY7u2uGwDgWV85FKoBLvqKhXZLy7gLNUnmim6MgSp
/uXhK2M2gmF7dEP3fwRBbnoh+f7WMqj7ycD+gUyKXhX4Kp9LgSCVhI+yhcsR
mMFzjilnsHN5YrXyXsDvzgNed1TECHLRzr49Guw4E7KhzgCu9+vLuF5TqLui
pPOWe4A93k8ornw3jdOmx79LkmAnWsnH8RKqX+JuH0b74WKxPbdXzVCsPP5D
ku7KBLH+qlveyFoaY+d+9WRHHeBrSlb3OuCpu9bgmP0ExP9Yh5su1Mci4V9m
CiBe7lpYq1UOUTRravXtUvj8Vwapv+QAV+ZhD2a3gW7x5c7V1/0I62gwMQ7l
RPtZn3cpg371vmoz6MNFE5tfW40ekCXIVy4N98rBfufCM9I5Ac+m0YP+jwBf
srejd+6HV75/PVpGgCvNy7ZCeaAX3M/b7Pm/iq7FG6o8jt+ltI6YMZhskTvW
tuWRg1hi3V+IKLE1NoVtymHLssf7bNtjrsfhFB2rzZwQ3S1ZLVIeqwfd3zk9
1jbIiDJlGT0W7aoZg2Ua2e/9A+Z35v5+38/rd+/v910B/ofIWjuyQwrjTYz4
cd9n7yjPT8p+xhL3U/bacX0Sm58Et9XDvH8sup0254DwlwvSyV7I41ExL5+I
hUhyfuXX0YagN7g1/rv4n0F/O5r0/aCzJi0yHwl33tPA/mkW6N3NmzoL7nyM
/k1gaD3ot+6oNjgccKieLc64AXz8Q/WnSg3gKku/TX4VfnfMrHV1qRLyxd5I
p/YBCgkV05tMYX4sG13TPWaovqpql6mdXyD65HpeZSR3/3DcnUINZvFZqTzi
W6j3+6UN9w4JEaoLM7gC+RHHvPZn7gL/19arA7wgx+/xevlOD3zRpxxaNqpg
+RLe+3Uh/oh43qVvdIJxHzg86rhvj+msY77P2g0R1v4UF+oN+DsZtrGe6+et
SJvcXWGA8Mir7/NX2iJC7tOaoIW6dWq16ScJTIQ3THU42yFaIB3umFyDaH1p
qFrniGizi78XvgC/fW2p82q6DeIHvio66OWLcFn0nZf73ZBq3e3egVA+6N2L
NvFXkHP3hOl/DIJ1lbj3ygzkFDOw+wGbA35A8tjEuAvmixmYULpDTszN0kaV
WQFP1EZmDpNIotQESBkRwmOdJTVWsK4q151WTU2QS1TuMXntLL1sKZw6BToz
nMHLXATe8doeYBo7x/ZtEDg9VcD4GX0aN7sVmFSP9VgXkIgufj7tRkD9LqAu
k2WAa59NQ3l6wO8hzbR9UCvk7jGZKB3+j+ZA8A3bN5TEKvMe77w/QiZupWXw
nMzq3EKFlsS457jJwFVLrO5s5m+u84O81WiofEhieluEjLmxFqP51PCRb8wx
vbm7ws8T+O/agSfd1eALkFGGZXkpt48p7Pz3MPCIp3/IH1A3mBcwRJ6BPDTm
K74C9dX9C2Vcwr3HO1M2w0BOebZcNv4G/IXH6mHyHNRPgevw4BFjjJudJ8o/
h/U5UWw76Ax6Fey61OLE3Ztw8rrdi3EK7y0PNLC2RGSVt9k1T8gr688KJYuQ
vwTS8UQXrm9RZMsWw0sUwZPvQGthfcR/7xQ3gJ9ntluo919mifXebS5l4D8r
gm1KrcE/bEqUtYaC/jS2+16q0lGqi7o8h2yYV4scB0mFKcZ/1YqTEz9B9KVQ
C7sk4KNHub8m3wLc/jZTOSB8TeGlaMGFVGtEJqXaLM2Av459R0+4Qs6MPZEy
6wK+lSh+fy6liaVH/WI3CJYjRrFL1FwEPCcziDLu4vrSe25MlV9myQ/5wvxo
Z4S94ywUpqtwan13b91ByHtn5JFGTrMs0X4iKahgnsJ58YN1cQIk6UzRTW91
RKTGP4ffDTiPsOWNjwLeptvmtUXcOZq3eYXXk7n78Pnmp0Gvk4v+CXlAYDrC
8/i+0wRWzTd/FrTZDWExsefmQ2eoF/xQZN1DEfHIw5wPeMTt7/5bV05h6yrD
yTDg+8Pub3scQc88SiYaOj+Arg75LXD7AqToVd6duyyTOLd0JccX0YE+ulQa
/FWZq8C//yOsMg+4VWOzCqMtZvPsKi+om9iu8D81LJMdOVpxQYSJmKjZ2Rgb
zCRos+u2eSPEdOSmNYEvYaN3LXJ9zIYqBx+nAy8nqLdmIKjr98o0uynAcyOv
Ys0st68T0pgvPUqp9n3wPlIDONYU3DI6bYz+B6Dde+0=
      "], $CellContext`x1, $CellContext`x2], True}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984123687*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"opts: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\<\"MaxIterations\"\>", "\[Rule]", "Automatic"}], ",", 
      RowBox[{"\<\"Method\"\>", "\[Rule]", 
       RowBox[{"{", "\<\"Automatic\"\>", "}"}]}], ",", 
      RowBox[{"\<\"Method\"\>", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\<\"Automatic\"\>", ",", 
         RowBox[{"{", "}"}]}], "}"}]}], ",", 
      RowBox[{"\<\"RandomSeed\"\>", "\[Rule]", "0"}], ",", 
      RowBox[{"\<\"Tolerance\"\>", "\[Rule]", "0.001`"}]}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["opts: ", 10], 
   Short[{
    "MaxIterations" -> Automatic, "Method" -> {"Automatic"}, 
     "Method" -> {"Automatic", {}}, "RandomSeed" -> 0, "Tolerance" -> 0.001}, 
    10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984127593*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"fopts: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\<\"AccuracyGoal\"\>", "\[Rule]", "Automatic"}], ",", 
      RowBox[{"\<\"EvaluationMonitor\"\>", "\[Rule]", "None"}], ",", 
      RowBox[{"\<\"MaxIterations\"\>", "\[Rule]", "100"}], ",", 
      RowBox[{"\<\"Method\"\>", "\[Rule]", "Automatic"}], ",", 
      RowBox[{"\<\"PrecisionGoal\"\>", "\[Rule]", "Automatic"}], ",", 
      RowBox[{"\<\"StepMonitor\"\>", "\[Rule]", "None"}], ",", 
      RowBox[{"\<\"WorkingPrecision\"\>", "\[Rule]", "MachinePrecision"}]}], 
     "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["fopts: ", 10], 
   Short[{
    "AccuracyGoal" -> Automatic, "EvaluationMonitor" -> None, "MaxIterations" -> 
     100, "Method" -> Automatic, "PrecisionGoal" -> Automatic, "StepMonitor" -> 
     None, "WorkingPrecision" -> MachinePrecision}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289841305227`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Method -> \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", "\<\"Automatic\"\>", "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Method -> ", 10], 
   Short[{"Automatic"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289841334524`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Options: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\<\"MaxIterations\"\>", "\[Rule]", "Automatic"}], ",", 
      RowBox[{"\<\"Method\"\>", "\[Rule]", 
       RowBox[{"{", "\<\"Automatic\"\>", "}"}]}], ",", 
      RowBox[{"\<\"Method\"\>", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\<\"Automatic\"\>", ",", 
         RowBox[{"{", "}"}]}], "}"}]}], ",", 
      RowBox[{"\<\"RandomSeed\"\>", "\[Rule]", "0"}], ",", 
      RowBox[{"\<\"Tolerance\"\>", "\[Rule]", "0.001`"}], ",", 
      RowBox[{"\<\"AccuracyGoal\"\>", "\[Rule]", "Automatic"}], ",", 
      RowBox[{"\<\"EvaluationMonitor\"\>", "\[Rule]", "None"}], ",", 
      RowBox[{"\<\"MaxIterations\"\>", "\[Rule]", "100"}], ",", 
      RowBox[{"\<\"Method\"\>", "\[Rule]", "Automatic"}], ",", 
      RowBox[{"\<\"PrecisionGoal\"\>", "\[Rule]", "Automatic"}], ",", 
      RowBox[{"\<\"StepMonitor\"\>", "\[Rule]", "None"}], ",", 
      RowBox[{"\<\"WorkingPrecision\"\>", "\[Rule]", "MachinePrecision"}]}], 
     "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Options: ", 10], 
   Short[{
    "MaxIterations" -> Automatic, "Method" -> {"Automatic"}, 
     "Method" -> {"Automatic", {}}, "RandomSeed" -> 0, "Tolerance" -> 0.001, 
     "AccuracyGoal" -> Automatic, "EvaluationMonitor" -> None, 
     "MaxIterations" -> 100, "Method" -> Automatic, "PrecisionGoal" -> 
     Automatic, "StepMonitor" -> None, "WorkingPrecision" -> 
     MachinePrecision}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984136382*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Initial Memory: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["50149180",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Initial Memory: ", 10], 
   Short[50149180, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984139312*^9}],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"Entering NMin\"\>", "Subsubsection",
   StripOnInput->False],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984141265*^9}],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"Entering NMinimize...\"\>", "Subsubsection",
   StripOnInput->False],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289841441946`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Options: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"MaxIterations", "\[Rule]", "Automatic"}], ",", 
      RowBox[{"Method", "\[Rule]", 
       RowBox[{"{", "\<\"Automatic\"\>", "}"}]}]}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Options: ", 10], 
   Short[{MaxIterations -> Automatic, Method -> {"Automatic"}}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289841471243`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Held Options: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Held Options: ", 10], 
   Short[{}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984150054*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Caller: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["NMaximize",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Caller: ", 10], 
   Short[NMaximize, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984152007*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Method: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", "\<\"Automatic\"\>", "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Method: ", 10], 
   Short[{"Automatic"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289841559134`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"Entering optionCheck[General, ...]\"\>", "Subsubsection",
   StripOnInput->False],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289841578665`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
   "0.001`", ",", "Automatic", ",", "0", ",", "Automatic", ",", "Automatic", 
    ",", "MachinePrecision", ",", "Automatic"}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984160796*^9}],

Cell[BoxData[
 TagBox["\<\"Returning optionCheck: \"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984163726*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{"0.001`", ",", "0.001`", ",", "Automatic", ",", "0", ",", 
    FractionBox["MachinePrecision", "2"], ",", 
    FractionBox["MachinePrecision", "2"], ",", "MachinePrecision", ",", 
    "Automatic"}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289841686087`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Option Handling Time: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0.`",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Option Handling Time: ", 10], 
   Short[0., 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289841715384`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Option Handling Memory: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["2504",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Option Handling Memory: ", 10], 
   Short[2504, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984174468*^9}],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"Entering AutomaticNM\"\>", "Subsubsection",
   StripOnInput->False],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984176421*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"TryLinProg args:\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", 
       RowBox[{"objective", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "0.01966398659794777`"}], ",", "8.940303944001755`",
              ",", "0.1585748958377735`"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
            "0.21144177178382506`", ",", "7.938589867531277`", ",", 
             "2.6013548549343`"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
            "0.2143619902624323`", ",", "4.920408975513851`", ",", 
             "2.032227390508126`"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
            "0.10739113760234886`", ",", "3.0866613768383786`", ",", 
             "7.7733583505104775`"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1.7533799528052896`"}], ",", 
             RowBox[{"-", "0.2864880005474788`"}], ",", 
             "4.0566117985719075`"}], "}"}], ",", 
           RowBox[{"\[LeftSkeleton]", "7691", "\[RightSkeleton]"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "8.811728457042875`"}], ",", 
             RowBox[{"-", "7.089805444082913`"}], ",", 
             "24.283820566580857`"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
            "17.68532578568579`", ",", "5.0370991579691236`", ",", 
             "0.15194175653567754`"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
            "6.812939732358473`", ",", "1.8078913161586456`", ",", 
             "5.98936310501756`"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
            "0.006713407773020208`", ",", "13.321237355279152`", ",", 
             "3.1938604900771566`"}], "}"}]}], "}"}], ",", "x1", ",", "x2"}], 
        "]"}]}], ",", 
      RowBox[{"{", "True", "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"x1", ",", "x2"}], "}"}]}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["TryLinProg args:", 10], 
   Short[{-$CellContext`objective[CompressedData["
1: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
FOOcVU6+rezz8glT3cwQggzgThHW58JkQuS+ynjAX4uTykZv4F1utz+mE7Cu
ZM+b65SFMEvps1zLOnU6KywxeHP8JoxLjn213KNII8a1cL9lbwnyt7LmZ9Xl
mP5A+DsvrMNkf05odTTE291PxadxkqA79BxWDINem69qDCMGwA8ukG+P/aTI
N1JDO7zBd3WzHiffhzo9PtpsdWSGoGsITc/nUI/x0XpEP+hdx3D+bDzow4x/
Rk3Mb4IpkJrR1a2P0Z3J4EH9lZjmlZPZ/5n9fP06TjGqJUjBt1I7RZbBOja+
8CoFvi3vMw+I7Scc1v8Z0r+vj1nEU72XCyqYrJpd5VoG+PORqqz+Ig+++msu
9xGoYzqLMTV5jyDHWN2ynuDbtD48YzR2EaRb7/2CJJjnmLGjb8wK9nnAPT4p
EVBvVR7CwaCLovwXAwU3YDKzv/DZPdDx85lhiZvlaIbgQNnOxRsxvcFqok0E
eI82l65wfEbQf9yELI4DzwttmtJ1gOvf/kg0q4Y854wuLSxin2stL3HhTSbQ
ap//mjihvvcVP7t1GHSXvtOX5ltB4S32Gbw8gJt6Gz/J66qYfLTt0+434JcD
Z9Zrnm4Dv1rgXdQMeQ226QzF9eAL39/jjy0iSGQfVeS4DDtwL992aA/Mj4cu
dD8A/SsO7O9ex37P1pSjVTeUonX5pXMnGJi5ZmxRostqTNY67PjrtBSjEUmZ
R4f7CPzoK4vjEvQnAq/VZVaAnlsbnq2XKKDw4eCvocug7/sbc0Nc8A/Bii1w
V16lRdsZZPynbbYVkyGqEb+2rqCRoqrj6eOjBD6w6NuOG9qYvmGUWvEE6rc/
4pTijWGCNGi/HZIqg2mq+niXqQLbH1ZLB7wnkGp5Kk2CblRkKtsdW4nJk+7X
18ryYVTsVOYqDbw0N6dpkj9OsHbtn+d6ronJL/hKwzbAY++v7nUXgZ++Baw8
uxT0bs3eFxVuwNNZrP606Y9Qt5ydzmaRhIMbfxk6rgXxP8pH7Id8Yw2x18qp
BGneGPieF/JnUiV6eBbylD4gWp3wk6K/NX1u7QNezYvP3HUZ9Km/7XbA1XaC
XOImubIMeLu38KqEC/t8dGOGx89mitXQquZXCX2Zxex0yNwIhXoTrPZd4qBp
Y8krc9vUMLPEOT+8AeK3hfvIJkGow94sozsOwIOfIh6vKq0D3RrRkjnEfr/o
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
fjvVln1THtfVPBfttegNzeRGvNqqCePrtlW8JqGGiMaigm0+EAeTfMJ+l2C+
RoKmefL4PZH2hR4S+KrrGd8pHcjXxL+c8rVeNPHnEod0wxDJCo3jtcXnJXTv
zKu8gusH8tZ7r/5CE0lXN3OsgnW5dk/meUALSSkKnJjE55MoGXp5JOgOsajH
3135EOWwO8tNYBETaNy4YpTSAp2Vk3gJ9/lwXk4celBMsiJd68/fW47aHhb7
Od+BcXaZLC0ZgLx3j9GgR36TlPGv7L4yaUQdrXPZ0gt4Pt+0Wn1oEWL/V16o
ZKeBqF6lNX+2w3yEzgerDeB9y8oWB3le4nqsyy/pQn6RNSlafrGFJNwvLbjV
Avj3N+nWjl8Q91plZb/JTySlwiNiziWG0OAaT54AwCOh0+oS28Gf0IGyX7wQ
31b1M3f+AP9Gy9a9OfKYZo7/1fuuCjzEed2sNObV62LrPV1h3Xq9RwQG6oAn
7+XzSgKdYvFBtOVUIuBqE1tmJeRj/Z1V1vNV+Fz8E1XOehI9rpI2q9BFhFng
hnu5kK9Wry61OQF68vDiQ687IJ65Ol4ePdpFt+2fzyprB/+VnW7W0/9NU66H
OT0vSzJtG3zlrxQpoEDFaUOzsQ2IEJtIHjlSTVJVd/u+YZ0j1flJ2+4ryW6P
FouThzxhdbvqg34lTQRsNjLA+9NVSrMvHf0MOq28Wkooh0Q/Q11icV2wwH07
Te6ATpHla+z7VE0T0WzH6zPAJ33GSjfeF2K0cp7qB/UD/jxeedfAB9clD1NO
ycoiiehTy1zWDJIo+0D9zofgL5dvjwjfwO+7/h4IPU+DviuPUeAHv9HqSFo7
B/YfOJ6iFQd6O6qB/9l5GK+Kxp6J+20kUXmA2TkBce9yIypaAPCQsPfWqvKm
qSVKD43DAb9R2CKhCbhfZJmoKoJ489DjlngA+ehix21rvA9C7FjenyXgp+Sh
MJNo0MFv2O21fxYgan9wrHcyB7ari+O+MZrZciKz+z8N8Nck3U/id2jCYfvk
BYU8OvyO1v7iX4DTQ8dbjspCvolklzzlB9xTn1x1Xw3G+ffwmUO23STjKv7k
Aj/ojVV0eT6u81Wdmh7k0UESr/zOcjaKIGo0tU5qlB+h/a482nhf6xKvZ5ym
YC/3gjUBtnCdl4LeFf9gfnOOT+O9/9Bol+R/Z95DninY+CY4SQAxfTez04+J
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
       "], $CellContext`x1, $CellContext`x2], {
     True}, {$CellContext`x1, $CellContext`x2}}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289842516165`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"TryLinProg results: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"$Failed", "[", 
      RowBox[{"\<\"NotLinear\"\>", ",", 
       RowBox[{"{", "True", "}"}]}], "]"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["TryLinProg results: ", 10], 
   Short[{
     $Failed["NotLinear", {True}]}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984254546*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Pre-Do[] Loop Time: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0.09399999999999409`",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Pre-Do[] Loop Time: ", 10], 
   Short[0.09399999999999409, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984257476*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Pre-Do[] Loop Memory: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["272",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Pre-Do[] Loop Memory: ", 10], 
   Short[272, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289842604055`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"We have \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["1",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\" sets of constraints\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["We have ", 10], 
   Short[1, 10], 
   Short[" sets of constraints", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984263335*^9}],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"Entering 1th loop through the constraints\"\>", 
   "Subsubsection",
   StripOnInput->False],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289842652884`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"The initial result is: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"$Failed", "[", 
     RowBox[{"\<\"NotLinear\"\>", ",", 
      RowBox[{"{", "True", "}"}]}], "]"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["The initial result is: ", 10], 
   Short[
    $Failed["NotLinear", {True}], 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984268218*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"reason: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"NotLinear\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["reason: ", 10], 
   Short["NotLinear", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289842711477`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"constraints: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", "True", "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["constraints: ", 10], 
   Short[{True}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289842740774`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Elements: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Elements: ", 10], 
   Short[{}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984277007*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"method: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"NelderMead\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["method: ", 10], 
   Short["NelderMead", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022898427896*^9}],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"Entering validConstraintsQ...\"\>", "Subsubsection",
   StripOnInput->False],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022898428189*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"cons: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["cons: ", 10], 
   Short[{}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984283843*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"vars: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"x1", ",", "x2"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["vars: ", 10], 
   Short[{$CellContext`x1, $CellContext`x2}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289842867727`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"test1: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["True",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"   test2: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["True",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["test1: ", 10], 
   Short[True, 10], 
   Short["   test2: ", 10], 
   Short[True, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289842897024`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Returning validConstraintsQ: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["False",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Returning validConstraintsQ: ", 10], 
   Short[False, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984292632*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Going through the loop -- method is: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"NelderMead\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Going through the loop -- method is: ", 10], 
   Short["NelderMead", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984295562*^9}],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"Entering NM\"\>", "Subsubsection",
   StripOnInput->False],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289842984915`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"f: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", 
     RowBox[{"objective", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "0.01966398659794777`"}], ",", "8.940303944001755`", 
           ",", "0.1585748958377735`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "0.21144177178382506`", ",", "7.938589867531277`", ",", 
           "2.6013548549343`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "0.2143619902624323`", ",", "4.920408975513851`", ",", 
           "2.032227390508126`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "0.10739113760234886`", ",", "3.0866613768383786`", ",", 
           "7.7733583505104775`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1.7533799528052896`"}], ",", 
           RowBox[{"-", "0.2864880005474788`"}], ",", "4.0566117985719075`"}],
           "}"}], ",", 
         RowBox[{"\[LeftSkeleton]", "7691", "\[RightSkeleton]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "8.811728457042875`"}], ",", 
           RowBox[{"-", "7.089805444082913`"}], ",", "24.283820566580857`"}], 
          "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "17.68532578568579`", ",", "5.0370991579691236`", ",", 
           "0.15194175653567754`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "6.812939732358473`", ",", "1.8078913161586456`", ",", 
           "5.98936310501756`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "0.006713407773020208`", ",", "13.321237355279152`", ",", 
           "3.1938604900771566`"}], "}"}]}], "}"}], ",", "x1", ",", "x2"}], 
      "]"}]}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"   cons: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["f: ", 10], 
   Short[-$CellContext`objective[CompressedData["
1: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
FOOcVU6+rezz8glT3cwQggzgThHW58JkQuS+ynjAX4uTykZv4F1utz+mE7Cu
ZM+b65SFMEvps1zLOnU6KywxeHP8JoxLjn213KNII8a1cL9lbwnyt7LmZ9Xl
mP5A+DsvrMNkf05odTTE291PxadxkqA79BxWDINem69qDCMGwA8ukG+P/aTI
N1JDO7zBd3WzHiffhzo9PtpsdWSGoGsITc/nUI/x0XpEP+hdx3D+bDzow4x/
Rk3Mb4IpkJrR1a2P0Z3J4EH9lZjmlZPZ/5n9fP06TjGqJUjBt1I7RZbBOja+
8CoFvi3vMw+I7Scc1v8Z0r+vj1nEU72XCyqYrJpd5VoG+PORqqz+Ig+++msu
9xGoYzqLMTV5jyDHWN2ynuDbtD48YzR2EaRb7/2CJJjnmLGjb8wK9nnAPT4p
EVBvVR7CwaCLovwXAwU3YDKzv/DZPdDx85lhiZvlaIbgQNnOxRsxvcFqok0E
eI82l65wfEbQf9yELI4DzwttmtJ1gOvf/kg0q4Y854wuLSxin2stL3HhTSbQ
ap//mjihvvcVP7t1GHSXvtOX5ltB4S32Gbw8gJt6Gz/J66qYfLTt0+434JcD
Z9Zrnm4Dv1rgXdQMeQ226QzF9eAL39/jjy0iSGQfVeS4DDtwL992aA/Mj4cu
dD8A/SsO7O9ex37P1pSjVTeUonX5pXMnGJi5ZmxRostqTNY67PjrtBSjEUmZ
R4f7CPzoK4vjEvQnAq/VZVaAnlsbnq2XKKDw4eCvocug7/sbc0Nc8A/Bii1w
V16lRdsZZPynbbYVkyGqEb+2rqCRoqrj6eOjBD6w6NuOG9qYvmGUWvEE6rc/
4pTijWGCNGi/HZIqg2mq+niXqQLbH1ZLB7wnkGp5Kk2CblRkKtsdW4nJk+7X
18ryYVTsVOYqDbw0N6dpkj9OsHbtn+d6ronJL/hKwzbAY++v7nUXgZ++Baw8
uxT0bs3eFxVuwNNZrP606Y9Qt5ydzmaRhIMbfxk6rgXxP8pH7Id8Yw2x18qp
BGneGPieF/JnUiV6eBbylD4gWp3wk6K/NX1u7QNezYvP3HUZ9Km/7XbA1XaC
XOImubIMeLu38KqEC/t8dGOGx89mitXQquZXCX2Zxex0yNwIhXoTrPZd4qBp
Y8krc9vUMLPEOT+8AeK3hfvIJkGow94sozsOwIOfIh6vKq0D3RrRkjnEfr/o
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
fjvVln1THtfVPBfttegNzeRGvNqqCePrtlW8JqGGiMaigm0+EAeTfMJ+l2C+
RoKmefL4PZH2hR4S+KrrGd8pHcjXxL+c8rVeNPHnEod0wxDJCo3jtcXnJXTv
zKu8gusH8tZ7r/5CE0lXN3OsgnW5dk/meUALSSkKnJjE55MoGXp5JOgOsajH
3135EOWwO8tNYBETaNy4YpTSAp2Vk3gJ9/lwXk4celBMsiJd68/fW47aHhb7
Od+BcXaZLC0ZgLx3j9GgR36TlPGv7L4yaUQdrXPZ0gt4Pt+0Wn1oEWL/V16o
ZKeBqF6lNX+2w3yEzgerDeB9y8oWB3le4nqsyy/pQn6RNSlafrGFJNwvLbjV
Avj3N+nWjl8Q91plZb/JTySlwiNiziWG0OAaT54AwCOh0+oS28Gf0IGyX7wQ
31b1M3f+AP9Gy9a9OfKYZo7/1fuuCjzEed2sNObV62LrPV1h3Xq9RwQG6oAn
7+XzSgKdYvFBtOVUIuBqE1tmJeRj/Z1V1vNV+Fz8E1XOehI9rpI2q9BFhFng
hnu5kK9Wry61OQF68vDiQ687IJ65Ol4ePdpFt+2fzyprB/+VnW7W0/9NU66H
OT0vSzJtG3zlrxQpoEDFaUOzsQ2IEJtIHjlSTVJVd/u+YZ0j1flJ2+4ryW6P
FouThzxhdbvqg34lTQRsNjLA+9NVSrMvHf0MOq28Wkooh0Q/Q11icV2wwH07
Te6ATpHla+z7VE0T0WzH6zPAJ33GSjfeF2K0cp7qB/UD/jxeedfAB9clD1NO
ycoiiehTy1zWDJIo+0D9zofgL5dvjwjfwO+7/h4IPU+DviuPUeAHv9HqSFo7
B/YfOJ6iFQd6O6qB/9l5GK+Kxp6J+20kUXmA2TkBce9yIypaAPCQsPfWqvKm
qSVKD43DAb9R2CKhCbhfZJmoKoJ489DjlngA+ehix21rvA9C7FjenyXgp+Sh
MJNo0MFv2O21fxYgan9wrHcyB7ari+O+MZrZciKz+z8N8Nck3U/id2jCYfvk
BYU8OvyO1v7iX4DTQ8dbjspCvolklzzlB9xTn1x1Xw3G+ffwmUO23STjKv7k
Aj/ojVV0eT6u81Wdmh7k0UESr/zOcjaKIGo0tU5qlB+h/a482nhf6xKvZ5ym
YC/3gjUBtnCdl4LeFf9gfnOOT+O9/9Bol+R/Z95DninY+CY4SQAxfTez04+J
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
      "], $CellContext`x1, $CellContext`x2], 10], 
   Short["   cons: ", 10], 
   Short[{}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984370757*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Initial Memory Usage: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["50162484",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Initial Memory Usage: ", 10], 
   Short[50162484, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289843746634`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{"\<\"MaxRestarts\"\>", "\[Rule]", "3"}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289843766165`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"Entering optionCheck[NelderMead...]\"\>", "Subsubsection",
   StripOnInput->False],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984379546*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{"Automatic", ",", "Automatic", ",", "1", ",", 
    FractionBox["1", "2"], ",", "2", ",", 
    FractionBox["1", "2"], ",", "Automatic", ",", "3", ",", "Automatic", ",", 
    "2", ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}]}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984382476*^9}],

Cell[BoxData[
 TagBox["\<\"Returning optionCheck...\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289843854055`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{"Automatic", ",", "Automatic", ",", "1", ",", 
    FractionBox["1", "2"], ",", "2", ",", 
    FractionBox["1", "2"], ",", "3", ",", "100", ",", 
    RowBox[{"Function", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "Optimization`NMinimizeDump`diff", ",", 
        "Optimization`NMinimizeDump`itr"}], "}"}], ",", 
      RowBox[{
       SuperscriptBox["2", 
        RowBox[{"Floor", "[", 
         FractionBox["Optimization`NMinimizeDump`itr", "10"], "]"}]], " ", 
       SuperscriptBox["Optimization`NMinimizeDump`diff", "2"]}]}], "]"}], ",", 
    RowBox[{"{", "}"}]}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984388335*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Initial setup time: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0.`",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Initial setup time: ", 10], 
   Short[0., 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984393218*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Initial setup memory: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["360",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Initial setup memory: ", 10], 
   Short[360, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289843961477`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox[
    StyleBox["\<\"Entering loop iteration \"\>", "Subsubsection",
     StripOnInput->False],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["1",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[
    Style["Entering loop iteration ", "Subsubsection"], 10], 
   Short[1, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289843990774`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"Entering constraintHandler\"\>", "Subsubsection",
   StripOnInput->False],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984402007*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"x1", ",", "x2"}], "}"}]}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022898440396*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Unequal[]  constraints: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Unequal[]  constraints: ", 10], 
   Short[{}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022898440689*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Inequality  constraints: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Inequality  constraints: ", 10], 
   Short[{}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289844098196`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Inequality  constraints: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Inequality  constraints: ", 10], 
   Short[{}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289844117727`*^9}],

Cell[BoxData[
 TagBox["\<\"Constraints broken up into:\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289844147024`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{"{", "}"}], ",", 
    RowBox[{"{", "}"}]}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984417632*^9}],

Cell[BoxData[
 TagBox["\<\"Returning constraintHandler...\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984420562*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{"{", "}"}], ",", 
    RowBox[{"{", "}"}]}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289844234915`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"Entering presolve...\"\>", "Subsubsection",
   StripOnInput->False],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984426421*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x1", ",", "x2"}], "}"}], ",", 
    RowBox[{"{", "}"}], ",", 
    RowBox[{"{", "}"}], ",", 
    RowBox[{"{", "}"}], ",", 
    RowBox[{"-", 
     RowBox[{"objective", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "0.01966398659794777`"}], ",", "8.940303944001755`", 
           ",", "0.1585748958377735`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "0.21144177178382506`", ",", "7.938589867531277`", ",", 
           "2.6013548549343`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "0.2143619902624323`", ",", "4.920408975513851`", ",", 
           "2.032227390508126`"}], "}"}], ",", 
         RowBox[{"\[LeftSkeleton]", "7694", "\[RightSkeleton]"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "17.68532578568579`", ",", "5.0370991579691236`", ",", 
           "0.15194175653567754`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "6.812939732358473`", ",", "1.8078913161586456`", ",", 
           "5.98936310501756`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "0.006713407773020208`", ",", "13.321237355279152`", ",", 
           "3.1938604900771566`"}], "}"}]}], "}"}], ",", "x1", ",", "x2"}], 
      "]"}]}], ",", "Automatic", ",", 
    RowBox[{"Function", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "Optimization`NMinimizeDump`diff", ",", 
        "Optimization`NMinimizeDump`itr"}], "}"}], ",", 
      RowBox[{
       SuperscriptBox["2", 
        RowBox[{"Floor", "[", 
         FractionBox["Optimization`NMinimizeDump`itr", "10"], "]"}]], " ", 
       SuperscriptBox["Optimization`NMinimizeDump`diff", "2"]}]}], "]"}], ",",
     "MachinePrecision"}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289844654837`*^9}],

Cell[BoxData[
 TagBox["\<\"   Assumptions...\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022898446939*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Implied domains: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Implied domains: ", 10], 
   Short[{}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984471343*^9}],

Cell[BoxData[
 TagBox["\<\"   Substitutions...\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289844742727`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"Entering parseBounds\"\>", "Subsubsection",
   StripOnInput->False],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289844772024`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x1", ",", 
        RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"x2", ",", 
        RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], "}"}]}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289844811087`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289844840384`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x1", ",", 
      RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"x2", ",", 
      RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], "}"}]}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984486968*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x1", ",", 
      RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"x2", ",", 
      RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289844898977`*^9}],

Cell[BoxData[
 TagBox["\<\"Returning parseBounds...\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289844928274`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{"{", "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x1", ",", 
        RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"x2", ",", 
        RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], "}"}]}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x1", ",", 
        RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"x2", ",", 
        RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}]}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289844967337`*^9}],

Cell[BoxData[
 TagBox["\<\"New equal:\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984498687*^9}],

Cell[BoxData[
 TagBox["\<\"New inequal:\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289845016165`*^9}],

Cell[BoxData[
 TagBox["\<\"New function:\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984504546*^9}],

Cell[BoxData[
 TagBox["\<\"New variables:\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289845064993`*^9}],

Cell[BoxData[
 TagBox["\<\"Penalty function is:\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984509429*^9}],

Cell[BoxData[
 TagBox["\<\"Returning from presolve...\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289845123587`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{"{", "}"}], ",", 
    RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}], ",", 
    RowBox[{"{", "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x1", ",", 
        RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"x2", ",", 
        RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], "}"}]}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289845533743`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Constraints/Presolve Time: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0.17199999999999704`",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Constraints/Presolve Time: ", 10], 
   Short[0.17199999999999704`, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984556304*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Constraints/Presolve Memory: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["7312",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Constraints/Presolve Memory: ", 10], 
   Short[7312, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289845592337`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"Entering makeFunctions...\"\>", "Subsubsection",
   StripOnInput->False],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289845641165`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x1", ",", "x2"}], "}"}], ",", "MachinePrecision"}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289845680227`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"EvaluationMonitor", "\[RuleDelayed]", "None"}], ",", 
    RowBox[{"EvaluationMonitor", "\[Rule]", "None"}]}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289845709524`*^9}],

Cell[BoxData[
 TagBox["\<\"stepmonfunc done\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984573882*^9}],

Cell[BoxData[
 TagBox["\<\"nfFunc done\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984576812*^9}],

Cell[BoxData[
 TagBox["\<\"nfPenalty done\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984578765*^9}],

Cell[BoxData[
 TagBox["\<\"Returning makeFunctions:\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289845816946`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    TagBox[
     RowBox[{"Experimental`NumericalFunction", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x1", ",", "x2"}], "}"}], ",", 
       RowBox[{"-", 
        RowBox[{"objective", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "0.01966398659794777`"}], ",", 
              "8.940303944001755`", ",", "0.1585748958377735`"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
             "0.21144177178382506`", ",", "7.938589867531277`", ",", 
              "2.6013548549343`"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
             "0.2143619902624323`", ",", "4.920408975513851`", ",", 
              "2.032227390508126`"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
             "0.10739113760234886`", ",", "3.0866613768383786`", ",", 
              "7.7733583505104775`"}], "}"}], ",", 
            RowBox[{"\[LeftSkeleton]", "7692", "\[RightSkeleton]"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "8.811728457042875`"}], ",", 
              RowBox[{"-", "7.089805444082913`"}], ",", 
              "24.283820566580857`"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
             "17.68532578568579`", ",", "5.0370991579691236`", ",", 
              "0.15194175653567754`"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
             "6.812939732358473`", ",", "1.8078913161586456`", ",", 
              "5.98936310501756`"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
             "0.006713407773020208`", ",", "13.321237355279152`", ",", 
              "3.1938604900771566`"}], "}"}]}], "}"}], ",", "x1", ",", "x2"}],
          "]"}]}], ",", "\<\"-NumericalFunctionData-\"\>"}], "]"}],
     False,
     Editable->False,
     SelectWithContents->True], ",", 
    TagBox[
     RowBox[{
      RowBox[{"\[LeftSkeleton]", "30", "\[RightSkeleton]"}], "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x1", ",", "x2"}], "}"}], ",", "0", ",", 
       RowBox[{"\<\"-Nume\"\>", "\[Ellipsis]", "\<\"nData-\"\>"}]}], "]"}],
     False,
     Editable->False,
     SelectWithContents->True]}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289846373587`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"Entering initialPoints...\"\>", "Subsubsection",
   StripOnInput->False],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289846422415`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{"Automatic", ",", 
    RowBox[{"{", 
     RowBox[{"x1", ",", "x2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x1", ",", 
        RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"x2", ",", 
        RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], "}"}]}], "}"}], 
    ",", 
    RowBox[{"-", 
     RowBox[{"objective", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "0.01966398659794777`"}], ",", "8.940303944001755`", 
           ",", "0.1585748958377735`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "0.21144177178382506`", ",", "7.938589867531277`", ",", 
           "2.6013548549343`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "0.2143619902624323`", ",", "4.920408975513851`", ",", 
           "2.032227390508126`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "0.10739113760234886`", ",", "3.0866613768383786`", ",", 
           "7.7733583505104775`"}], "}"}], ",", 
         RowBox[{"\[LeftSkeleton]", "7692", "\[RightSkeleton]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "8.811728457042875`"}], ",", 
           RowBox[{"-", "7.089805444082913`"}], ",", "24.283820566580857`"}], 
          "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "17.68532578568579`", ",", "5.0370991579691236`", ",", 
           "0.15194175653567754`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "6.812939732358473`", ",", "1.8078913161586456`", ",", 
           "5.98936310501756`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "0.006713407773020208`", ",", "13.321237355279152`", ",", 
           "3.1938604900771566`"}], "}"}]}], "}"}], ",", "x1", ",", "x2"}], 
      "]"}]}], ",", 
    RowBox[{"{", "}"}], ",", "3", ",", "MachinePrecision", ",", "NMaximize"}],
    "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984723296*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"inequal: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["inequal: ", 10], 
   Short[{}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984726226*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"linineq: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["linineq: ", 10], 
   Short[{}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289847291555`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"LinSatPnt: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["LinSatPnt: ", 10], 
   Short[{1, 1}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289847340384`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Extended bounds: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Extended bounds: ", 10], 
   Short[{{-1, 1}, {-1, 1}}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984736968*^9}],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"Entering generatePoints...\"\>", "Subsubsection",
   StripOnInput->False],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984738921*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"min #pts = \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["3",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"\\tmax #pts = \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["30",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["min #pts = ", 10], 
   Short[3, 10], 
   Short["\tmax #pts = ", 10], 
   Short[30, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289847428274`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Initial points: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["Automatic",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Initial points: ", 10], 
   Short[Automatic, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289847447805`*^9}],

Cell[BoxData[
 TagBox["\<\"Returning generatePoints...\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022898474771*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Generated \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["3",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\" of \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["3",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\" points inside the region. (First Pass)\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Generated ", 10], 
   Short[3, 10], 
   Short[" of ", 10], 
   Short[3, 10], 
   Short[" points inside the region. (First Pass)", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022898475064*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Points: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0.9186212148724066`", ",", "0.7166887533790196`"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "0.5357689240245056`"}], ",", 
        RowBox[{"-", "0.13703001527149958`"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0.757209721931284`", ",", "0.15240174247361854`"}], "}"}]}], 
     "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Points: ", 10], 
   Short[{{0.9186212148724066, 
    0.7166887533790196}, {-0.5357689240245056, -0.13703001527149958`}, {
    0.757209721931284, 0.15240174247361854`}}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289847535696`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Generated \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["3",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\" of \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["3",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\" points inside the region.\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Generated ", 10], 
   Short[3, 10], 
   Short[" of ", 10], 
   Short[3, 10], 
   Short[" points inside the region.", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289847564993`*^9}],

Cell[BoxData[
 TagBox["\<\"Returning initialPoints: \"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984759429*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0.9186212148724066`", ",", "0.7166887533790196`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "0.5357689240245056`"}], ",", 
      RowBox[{"-", "0.13703001527149958`"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.757209721931284`", ",", "0.15240174247361854`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289847623587`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"InitialPoints Time: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0.1880000000000024`",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["InitialPoints Time: ", 10], 
   Short[0.1880000000000024, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289847652884`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"InitialPoints Memory: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["252696",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["InitialPoints Memory: ", 10], 
   Short[252696, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289847672415`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"Entering CoreNM...\"\>", "Subsubsection",
   StripOnInput->False],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984770171*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"-", 
     RowBox[{"objective", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "0.01966398659794777`"}], ",", "8.940303944001755`", 
           ",", "0.1585748958377735`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "0.21144177178382506`", ",", "7.938589867531277`", ",", 
           "2.6013548549343`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "0.2143619902624323`", ",", "4.920408975513851`", ",", 
           "2.032227390508126`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "0.10739113760234886`", ",", "3.0866613768383786`", ",", 
           "7.7733583505104775`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1.7533799528052896`"}], ",", 
           RowBox[{"-", "0.2864880005474788`"}], ",", "4.0566117985719075`"}],
           "}"}], ",", 
         RowBox[{"\[LeftSkeleton]", "7691", "\[RightSkeleton]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "8.811728457042875`"}], ",", 
           RowBox[{"-", "7.089805444082913`"}], ",", "24.283820566580857`"}], 
          "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "17.68532578568579`", ",", "5.0370991579691236`", ",", 
           "0.15194175653567754`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "6.812939732358473`", ",", "1.8078913161586456`", ",", 
           "5.98936310501756`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "0.006713407773020208`", ",", "13.321237355279152`", ",", 
           "3.1938604900771566`"}], "}"}]}], "}"}], ",", "x1", ",", "x2"}], 
      "]"}]}], ",", "0", ",", 
    RowBox[{"\[LeftSkeleton]", "21", "\[RightSkeleton]"}], ",", 
    RowBox[{"Function", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], "}"}], ",", 
      RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}]}], "]"}], ",", 
    "Automatic"}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984815093*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Setting automatic bounds with: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", "}"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\" and \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"x1", ",", "x2"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Setting automatic bounds with: ", 10], 
   Short[{}, 10], 
   Short[" and ", 10], 
   Short[{$CellContext`x1, $CellContext`x2}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289848209524`*^9}],

Cell[BoxData[
 TagBox["\<\"Automatic bounds created: \"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289848248587`*^9}],

Cell[BoxData[
 TagBox["\<\"Compiled constraints...\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289848277884`*^9}],

Cell[BoxData[
 TagBox["\<\"Compiled modified objective function.\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289848316946`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"Entering the main loop\"\>", "Subsubsection",
   StripOnInput->False],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984835601*^9}],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"Entering makeFunctions...\"\>", "Subsubsection",
   StripOnInput->False],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289848385305`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x1", ",", "x2"}], "}"}], ",", "MachinePrecision"}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022898484146*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"EvaluationMonitor", "\[RuleDelayed]", "None"}], ",", 
    RowBox[{"EvaluationMonitor", "\[Rule]", "None"}]}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984846343*^9}],

Cell[BoxData[
 TagBox["\<\"stepmonfunc done\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984851226*^9}],

Cell[BoxData[
 TagBox["\<\"nfFunc done\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984855132*^9}],

Cell[BoxData[
 TagBox["\<\"nfPenalty done\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984858062*^9}],

Cell[BoxData[
 TagBox["\<\"Returning makeFunctions:\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289848609915`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    TagBox[
     RowBox[{"Experimental`NumericalFunction", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x1", ",", "x2"}], "}"}], ",", 
       RowBox[{"-", 
        RowBox[{"objective", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "0.01966398659794777`"}], ",", 
              "8.940303944001755`", ",", "0.1585748958377735`"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
             "0.21144177178382506`", ",", "7.938589867531277`", ",", 
              "2.6013548549343`"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
             "0.2143619902624323`", ",", "4.920408975513851`", ",", 
              "2.032227390508126`"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
             "0.10739113760234886`", ",", "3.0866613768383786`", ",", 
              "7.7733583505104775`"}], "}"}], ",", 
            RowBox[{"\[LeftSkeleton]", "7692", "\[RightSkeleton]"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "8.811728457042875`"}], ",", 
              RowBox[{"-", "7.089805444082913`"}], ",", 
              "24.283820566580857`"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
             "17.68532578568579`", ",", "5.0370991579691236`", ",", 
              "0.15194175653567754`"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
             "6.812939732358473`", ",", "1.8078913161586456`", ",", 
              "5.98936310501756`"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
             "0.006713407773020208`", ",", "13.321237355279152`", ",", 
              "3.1938604900771566`"}], "}"}]}], "}"}], ",", "x1", ",", "x2"}],
          "]"}]}], ",", "\<\"-NumericalFunctionData-\"\>"}], "]"}],
     False,
     Editable->False,
     SelectWithContents->True], ",", 
    TagBox[
     RowBox[{
      RowBox[{"\[LeftSkeleton]", "30", "\[RightSkeleton]"}], "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x1", ",", "x2"}], "}"}], ",", "0", ",", 
       RowBox[{"\<\"-Nume\"\>", "\[Ellipsis]", "\<\"nData-\"\>"}]}], "]"}],
     False,
     Editable->False,
     SelectWithContents->True]}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984904937*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"penalty=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["penalty=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984908843*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["1",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[1, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289849527884`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0.8379154684018453`", ",", "0.4345452479263191`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "0.5357689240245056`"}], ",", 
      RowBox[{"-", "0.13703001527149958`"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"2.211599860828196`", ",", "1.0061205111241378`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228984955718*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289849996634`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is even better\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289850416555`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7608.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7608., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228985045562*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Start\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Start"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289850484915`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["2",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[2, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289850504446`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2.251952734063477`", ",", "1.1471922638504881`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.757209721931284`", ",", "0.15240174247361854`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3.7466957461956696`", ",", "2.141982785227358`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228985054351*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228985098296*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is even better\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228985139312*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7626.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7626., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228985143218*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Start\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Start"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289851471243`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["3",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[3, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228985150054*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"4.413361505791205`", ",", "2.357234540463092`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.9186212148724066`", ",", "0.7166887533790196`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"7.908101796710002`", ",", "3.9977803275471646`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228985152007*^9}],

Cell[BoxData[
 TagBox["\<\"substituting new point is in the middle\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022898518814*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7626.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7626., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289851910696`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Start\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Start"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289851959524`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["4",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[4, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228985201812*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.574770277518932`", ",", "3.567276817075696`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3.585284253254547`", ",", "1.5776957743219566`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"9.564256301783317`", ",", "5.556857859829435`"}], "}"}]}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289852047415`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected  point is worse than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228985207671*^9}],

Cell[BoxData[
 TagBox["\<\"but better than the worst point\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228985210601*^9}],

Cell[BoxData[
 TagBox["\<\"contraction is better\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022898525064*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7626.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7626., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289852535696`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Start\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Start"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228985257476*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["5",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[5, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228985261382*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.574770277518932`", ",", "3.567276817075696`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"8.069513289651125`", ",", "4.562067338452565`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"5.0800272653867395`", ",", "2.572486295698827`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228985264312*^9}],

Cell[BoxData[
 TagBox["\<\"substituting new point is in the middle\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289853023977`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7626.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7626., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289853053274`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Start\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Start"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289853092337`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["6",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[6, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289853121634`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"5.160733011857301`", ",", "2.8546298011515274`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"7.908101796710002`", ",", "3.9977803275471646`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"2.4133642270046005`", ",", "1.7114792747558902`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228985315093*^9}],

Cell[BoxData[
 TagBox["\<\"reflected  point is worse than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289853561087`*^9}],

Cell[BoxData[
 TagBox["\<\"and worse than the worst point\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228985363921*^9}],

Cell[BoxData[
 TagBox["\<\"contraction is better\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289854059134`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7627.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7627., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289854098196`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Start\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Start"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228985413726*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["7",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[7, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289854166555`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"5.887928081305757`", ",", "3.2814891854767865`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"5.0800272653867395`", ",", "2.572486295698827`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.695828897224775`", ",", "3.990492075254746`"}], "}"}]}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228985419585*^9}],

Cell[BoxData[
 TagBox["\<\"reflected  point is worse than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228985424468*^9}],

Cell[BoxData[
 TagBox["\<\"but better than the worst point\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289854283743`*^9}],

Cell[BoxData[
 TagBox["\<\"contraction is better\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289854498587`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7627.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7627., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289854527884`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Start\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Start"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289854566946`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["8",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[8, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289854635305`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.413147946774458`", ",", "3.531097847357556`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"5.241438758327862`", ",", "3.1367733066042276`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"7.584857135221054`", ",", "3.9254223881108845`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022898546939*^9}],

Cell[BoxData[
 TagBox["\<\"reflected  point is worse than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228985516265*^9}],

Cell[BoxData[
 TagBox["\<\"and worse than the worst point\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289855191946`*^9}],

Cell[BoxData[
 TagBox["\<\"contraction is worse, SHRINKING!\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289855621634`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228985608062*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Start\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Start"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289856109915`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["9",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[9, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228985613921*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.150538014040108`", ",", "3.406293516417171`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.534417404283651`", ",", "3.426205064349346`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"5.766658623796564`", ",", "3.3863819684849963`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228985616851*^9}],

Cell[BoxData[
 TagBox["\<\"reflected  point is worse than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022898565396*^9}],

Cell[BoxData[
 TagBox["\<\"but better than the worst point\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022898565689*^9}],

Cell[BoxData[
 TagBox["\<\"contraction is better\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228985700835*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228985705718*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Start\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Start"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289857086477`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["10",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[10, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228985712554*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.185873132846397`", ",", "3.46371779490432`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"5.887928081305757`", ",", "3.2814891854767865`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.483818184387037`", ",", "3.6459464043318537`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289857154837`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected  point is worse than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228985766265*^9}],

Cell[BoxData[
 TagBox["\<\"but better than the worst point\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289857691946`*^9}],

Cell[BoxData[
 TagBox["\<\"contraction is better\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228985817046*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Checking convergence, itr = \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["10",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Checking convergence, itr = ", 10], 
   Short[10, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228985819976*^9}],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"Entering converge[]\"\>", "Subsubsection",
   StripOnInput->False],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228985825835*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0.`", ",", "0.`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.413147946774458`", ",", "3.531097847357556`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.`", ",", "0.`", ",", 
      RowBox[{"-", "2.`"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "7628.`"}], ",", 
      RowBox[{"-", "7629.`"}], ",", 
      RowBox[{"-", "7629.`"}]}], "}"}], ",", 
    SuperscriptBox["10", 
     RowBox[{
      RowBox[{"-", "MachinePrecision"}], "/", "2"}]], ",", 
    SuperscriptBox["10", 
     RowBox[{
      RowBox[{"-", "MachinePrecision"}], "/", "2"}]]}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289858316946`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Point convergence: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["True",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Point convergence: ", 10], 
   Short[True, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289858346243`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Funxn convergence: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["False",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Funxn convergence: ", 10], 
   Short[False, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228985837554*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Funxn  divergence: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["False",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Funxn  divergence: ", 10], 
   Short[False, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022898584439*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Returning converge: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Function\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Returning converge: ", 10], 
   Short[{False, "Function"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289858473196`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228985851226*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Function\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Function"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289858541555`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["11",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[11, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228985857085*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.373996802695587`", ",", "3.5429649734878215`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"5.958598318918336`", ",", "3.3963377424510837`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.789395286472839`", ",", "3.6895922045245593`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289858609915`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected  point is worse than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289858629446`*^9}],

Cell[BoxData[
 TagBox["\<\"and worse than the worst point\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289858648977`*^9}],

Cell[BoxData[
 TagBox["\<\"contraction is better\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228985868804*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228985870757*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Function\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Function"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022898587564*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["12",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[12, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289858785696`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.373996802695587`", ",", "3.5429649734878215`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.166297560806962`", ",", "3.4696513579694526`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.581696044584213`", ",", "3.6162785890061904`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289858814993`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected  point is worse than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228985919585*^9}],

Cell[BoxData[
 TagBox["\<\"and worse than the worst point\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228985922515*^9}],

Cell[BoxData[
 TagBox["\<\"contraction is worse, SHRINKING!\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228985967437*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228986009429*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Function\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Function"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228986013335*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["13",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[13, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289860152884`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.166297560806962`", ",", "3.4696513579694526`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.373996802695588`", ",", "3.542964973487821`"}], "}"}]}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228986018218*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289860592337`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is even better\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289861041555`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289861109915`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Function\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Function"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289861148977`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["14",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[14, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289861178274`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289861217337`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289861598196`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228986232085*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228986235015*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Function\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Function"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289862379446`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["15",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[15, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289862408743`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228986243804*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228986306304*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228986351226*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289863541555`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Function\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Function"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228986358062*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["16",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[16, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289863609915`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228986363921*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022898640396*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228986448882*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289864547415`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Function\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Function"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289864596243`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["17",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[17, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228986462554*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289864654837`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289865064993`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228986549468*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289865523977`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Function\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Function"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289865553274`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["18",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[18, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289865592337`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289865621634`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228986608062*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289866490774`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228986652007*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Function\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Function"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228986654937*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["19",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[19, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228986658843*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228986660796*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289867027884`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022898675064*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228986754546*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Function\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Function"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228986757476*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["20",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[20, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228986761382*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228986763335*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228986804351*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289868492727`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Checking convergence, itr = \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["20",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Checking convergence, itr = ", 10], 
   Short[20, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289868522024`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"Entering converge[]\"\>", "Subsubsection",
   StripOnInput->False],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228986858062*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "0.41539848377725264`"}], ",", 
      RowBox[{"-", "0.14662723103673692`"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.`", ",", "0.`", ",", "0.`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "7629.`"}], ",", 
      RowBox[{"-", "7629.`"}], ",", 
      RowBox[{"-", "7629.`"}]}], "}"}], ",", 
    SuperscriptBox["10", 
     RowBox[{
      RowBox[{"-", "MachinePrecision"}], "/", "2"}]], ",", 
    SuperscriptBox["10", 
     RowBox[{
      RowBox[{"-", "MachinePrecision"}], "/", "2"}]]}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228986863921*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Point convergence: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["False",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Point convergence: ", 10], 
   Short[False, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228986870757*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Funxn convergence: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["True",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Funxn convergence: ", 10], 
   Short[True, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289868746634`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Funxn  divergence: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["False",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Funxn  divergence: ", 10], 
   Short[False, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228986879546*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Returning converge: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Returning converge: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289868834524`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228986889312*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228986893218*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["21",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[21, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228986898101*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228986902007*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228986953765*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228987009429*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228987014312*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289870191946`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["22",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[22, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228987023101*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022898702896*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228987107085*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289871510305`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228987154937*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289871578665`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["23",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[23, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228987160796*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228987165679*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289872115774`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228987252593*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289872584524`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228987261382*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["24",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[24, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228987266265*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289872721243`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228987317046*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228987357085*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228987360015*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228987363921*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["25",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[25, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289873678274`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228987370757*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289874166555`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228987462554*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228987467437*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228987471343*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["26",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[26, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289874752493`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228987478179*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289875191946`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228987565093*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228987569976*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228987573882*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["27",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[27, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228987578765*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289875836477`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228987636382*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289876783743`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228987681304*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022898768521*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["28",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[28, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289876910696`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289876939993`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228987736968*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228987779937*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289877828665`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289877877493`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["29",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[29, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289877916555`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228987795562*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228987851226*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289878922415`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289878961477`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289878990774`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["30",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[30, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228987902007*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228987904937*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289879498587`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228987991851*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Checking convergence, itr = \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["30",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Checking convergence, itr = ", 10], 
   Short[30, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228987995757*^9}],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"Entering converge[]\"\>", "Subsubsection",
   StripOnInput->False],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022898799771*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "0.41539848377725264`"}], ",", 
      RowBox[{"-", "0.14662723103673692`"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.`", ",", "0.`", ",", "0.`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "7629.`"}], ",", 
      RowBox[{"-", "7629.`"}], ",", 
      RowBox[{"-", "7629.`"}]}], "}"}], ",", 
    SuperscriptBox["10", 
     RowBox[{
      RowBox[{"-", "MachinePrecision"}], "/", "2"}]], ",", 
    SuperscriptBox["10", 
     RowBox[{
      RowBox[{"-", "MachinePrecision"}], "/", "2"}]]}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289880016165`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Point convergence: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["False",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Point convergence: ", 10], 
   Short[False, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228988004546*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Funxn convergence: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["True",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Funxn convergence: ", 10], 
   Short[True, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228988011382*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Funxn  divergence: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["False",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Funxn  divergence: ", 10], 
   Short[False, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289880152884`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Returning converge: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Returning converge: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228988018218*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289880211477`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228988025054*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["31",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[31, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228988027007*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289880309134`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228988073882*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228988111968*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289881158743`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228988118804*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["32",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[32, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289881217337`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289881246634`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228988165679*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289882135305`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228988217437*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289882203665`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["33",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[33, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289882242727`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289882272024`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228988270171*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289883121634`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289883160696`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289883189993`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["34",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[34, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228988321929*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289883248587`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289883658743`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289884342337`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022898843814*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228988442046*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["35",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[35, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228988444976*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289884479055`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289884928274`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289885367727`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228988542632*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228988545562*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["36",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[36, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289885504446`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289885553274`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228988598296*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228988641265*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289886471243`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228988652007*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["37",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[37, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289886559134`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289886598196`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289887027884`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228988707671*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289887154837`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289887203665`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["38",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[38, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289887242727`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228988728179*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289887711477`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228988819976*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228988823882*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228988828765*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["39",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[39, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289888346243`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228988839507*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228988889312*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289889303274`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022898893521*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289889391165`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["40",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[40, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289889430227`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289889459524`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289889898977`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289890348196`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Checking convergence, itr = \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["40",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Checking convergence, itr = ", 10], 
   Short[40, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289890397024`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"Entering converge[]\"\>", "Subsubsection",
   StripOnInput->False],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228989042632*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "0.41539848377725264`"}], ",", 
      RowBox[{"-", "0.14662723103673692`"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.`", ",", "0.`", ",", "0.`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "7629.`"}], ",", 
      RowBox[{"-", "7629.`"}], ",", 
      RowBox[{"-", "7629.`"}]}], "}"}], ",", 
    SuperscriptBox["10", 
     RowBox[{
      RowBox[{"-", "MachinePrecision"}], "/", "2"}]], ",", 
    SuperscriptBox["10", 
     RowBox[{
      RowBox[{"-", "MachinePrecision"}], "/", "2"}]]}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289890484915`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Point convergence: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["False",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Point convergence: ", 10], 
   Short[False, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289890533743`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Funxn convergence: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["True",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Funxn convergence: ", 10], 
   Short[True, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289890572805`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Funxn  divergence: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["False",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Funxn  divergence: ", 10], 
   Short[False, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022898906021*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Returning converge: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Returning converge: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289890641165`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289890680227`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228989071929*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["41",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[41, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289890748587`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228989078765*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022898912564*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289891754446`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228989181304*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228989186187*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["42",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[42, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228989192046*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289891959524`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289892447805`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289892965384`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289893004446`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289893053274`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["43",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[43, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228989311187*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228989315093*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228989361968*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228989429351*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228989433257*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289894371634`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["44",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[44, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289894410696`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228989444976*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228989493804*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228989540679*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289895465384`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289895533743`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["45",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[45, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289895572805`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289895621634`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289896129446`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228989660796*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228989665679*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228989670562*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["46",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[46, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289896773977`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228989681304*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289897272024`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228989773101*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228989777007*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289897809134`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["47",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[47, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228989783843*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228989788726*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228989837554*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228989882476*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228989888335*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289898961477`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["48",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[48, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289899010305`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228989904937*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228989946929*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228989998687*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289900035696`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228990007476*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["49",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[49, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289900123587`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289900172415`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289900641165`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228990113921*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289901178274`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022899012271*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["50",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[50, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289901266165`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289901314993`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228990174468*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022899021646*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Checking convergence, itr = \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["50",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Checking convergence, itr = ", 10], 
   Short[50, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228990221343*^9}],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"Entering converge[]\"\>", "Subsubsection",
   StripOnInput->False],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289902252493`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "0.41539848377725264`"}], ",", 
      RowBox[{"-", "0.14662723103673692`"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.`", ",", "0.`", ",", "0.`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "7629.`"}], ",", 
      RowBox[{"-", "7629.`"}], ",", 
      RowBox[{"-", "7629.`"}]}], "}"}], ",", 
    SuperscriptBox["10", 
     RowBox[{
      RowBox[{"-", "MachinePrecision"}], "/", "2"}]], ",", 
    SuperscriptBox["10", 
     RowBox[{
      RowBox[{"-", "MachinePrecision"}], "/", "2"}]]}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228990230132*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Point convergence: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["False",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Point convergence: ", 10], 
   Short[False, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228990235015*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Funxn convergence: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["True",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Funxn convergence: ", 10], 
   Short[True, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228990238921*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Funxn  divergence: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["False",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Funxn  divergence: ", 10], 
   Short[False, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289902428274`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Returning converge: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Returning converge: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289902467337`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022899025064*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289902555227`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["51",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[51, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228990259429*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289902623587`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228990306304*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289903522024`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228990357085*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228990360015*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["52",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[52, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289903648977`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228990368804*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022899043814*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289904811087`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228990485015*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289904908743`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["53",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[53, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228990495757*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228990498687*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228990545562*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289905934134`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289905992727`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228990603179*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["54",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[54, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228990608062*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228990611968*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228990654937*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228990696929*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228990700835*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228990705718*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["55",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[55, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289907115774`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289907154837`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228990763335*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022899081314*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228990817046*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289908209524`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["56",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[56, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228990825835*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228990830718*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289908785696`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228990924468*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228990931304*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228990936187*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["57",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[57, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228990940093*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228990944976*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289909879446`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228991042632*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289910504446`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228991058257*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["58",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[58, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289910641165`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228991069976*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022899112564*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289912115774`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289912184134`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289912242727`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["59",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[59, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289912311087`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289912379446`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289912965384`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289913522024`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228991357085*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289913609915`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["60",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[60, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228991363921*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289913697805`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289914147024`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228991462554*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Checking convergence, itr = \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["60",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Checking convergence, itr = ", 10], 
   Short[60, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022899146646*^9}],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"Entering converge[]\"\>", "Subsubsection",
   StripOnInput->False],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228991473296*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "0.41539848377725264`"}], ",", 
      RowBox[{"-", "0.14662723103673692`"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.`", ",", "0.`", ",", "0.`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "7629.`"}], ",", 
      RowBox[{"-", "7629.`"}], ",", 
      RowBox[{"-", "7629.`"}]}], "}"}], ",", 
    SuperscriptBox["10", 
     RowBox[{
      RowBox[{"-", "MachinePrecision"}], "/", "2"}]], ",", 
    SuperscriptBox["10", 
     RowBox[{
      RowBox[{"-", "MachinePrecision"}], "/", "2"}]]}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289914791555`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Point convergence: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["False",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Point convergence: ", 10], 
   Short[False, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228991483062*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Funxn convergence: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["True",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Funxn convergence: ", 10], 
   Short[True, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228991486968*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Funxn  divergence: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["False",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Funxn  divergence: ", 10], 
   Short[False, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289914908743`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Returning converge: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Returning converge: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289914947805`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228991498687*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228991502593*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["61",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[61, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289915064993`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289915104055`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228991554351*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228991598296*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228991603179*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228991608062*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["62",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[62, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228991616851*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289916197805`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289916871634`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289917535696`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228991759429*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289917623587`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["63",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[63, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289917672415`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228991773101*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289918434134`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289918961477`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228991900054*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228991904937*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["64",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[64, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228991908843*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289919147024`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289919615774`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228992009429*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228992016265*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289920211477`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["65",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[65, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228992025054*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228992029937*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289920777884`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289921285696`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289921334524`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228992139312*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["66",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[66, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228992143218*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289921471243`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289921939993`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228992238921*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228992243804*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022899224771*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["67",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[67, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228992252593*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289922584524`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289923717337`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289924166555`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289924215384`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228992426421*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["68",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[68, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289924322805`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228992436187*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289924410696`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289924898977`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228992495757*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289925016165`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["69",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[69, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289925055227`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228992511382*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228992556304*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228992601226*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289926061087`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289926158743`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["70",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[70, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228992620757*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228992623687*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289926666555`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022899268814*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Checking convergence, itr = \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["70",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Checking convergence, itr = ", 10], 
   Short[70, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289926930227`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"Entering converge[]\"\>", "Subsubsection",
   StripOnInput->False],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228992696929*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "0.41539848377725264`"}], ",", 
      RowBox[{"-", "0.14662723103673692`"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.`", ",", "0.`", ",", "0.`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "7629.`"}], ",", 
      RowBox[{"-", "7629.`"}], ",", 
      RowBox[{"-", "7629.`"}]}], "}"}], ",", 
    SuperscriptBox["10", 
     RowBox[{
      RowBox[{"-", "MachinePrecision"}], "/", "2"}]], ",", 
    SuperscriptBox["10", 
     RowBox[{
      RowBox[{"-", "MachinePrecision"}], "/", "2"}]]}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228992701812*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Point convergence: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["False",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Point convergence: ", 10], 
   Short[False, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228992707671*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Funxn convergence: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["True",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Funxn convergence: ", 10], 
   Short[True, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228992712554*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Funxn  divergence: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["False",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Funxn  divergence: ", 10], 
   Short[False, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022899271646*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Returning converge: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Returning converge: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289927203665`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289927252493`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289927291555`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["71",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[71, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228992733062*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228992736968*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228992777007*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228992823882*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289928316946`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022899284146*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["72",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[72, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228992848296*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228992855132*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289928971243`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289929410696`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228992946929*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289929527884`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["73",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[73, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228992957671*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228992962554*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289930064993`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228993080718*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289930865774`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228993092437*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["74",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[74, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228993096343*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228993101226*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289931461477`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228993194976*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228993198882*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289932047415`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["75",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[75, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289932086477`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228993214507*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289932652884`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022899331314*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289933189993`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289933229055`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["76",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[76, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228993326812*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228993332671*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228993377593*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228993426421*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289934322805`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289934371634`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["77",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[77, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289934410696`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289934459524`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228993486968*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289935397024`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228993544585*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289935504446`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["78",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[78, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289935572805`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228993561187*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289936041555`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289936939993`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289936998587`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228993703765*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["79",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[79, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228993707671*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228993714507*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289937867727`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228993830718*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289938385305`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289938434134`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["80",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[80, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228993848296*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289938561087`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289938990774`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289939459524`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Checking convergence, itr = \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["80",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Checking convergence, itr = ", 10], 
   Short[80, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228993951812*^9}],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"Entering converge[]\"\>", "Subsubsection",
   StripOnInput->False],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289939566946`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "0.41539848377725264`"}], ",", 
      RowBox[{"-", "0.14662723103673692`"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.`", ",", "0.`", ",", "0.`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "7629.`"}], ",", 
      RowBox[{"-", "7629.`"}], ",", 
      RowBox[{"-", "7629.`"}]}], "}"}], ",", 
    SuperscriptBox["10", 
     RowBox[{
      RowBox[{"-", "MachinePrecision"}], "/", "2"}]], ",", 
    SuperscriptBox["10", 
     RowBox[{
      RowBox[{"-", "MachinePrecision"}], "/", "2"}]]}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228993962554*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Point convergence: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["False",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Point convergence: ", 10], 
   Short[False, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022899396646*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Funxn convergence: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["True",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Funxn convergence: ", 10], 
   Short[True, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228993971343*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Funxn  divergence: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["False",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Funxn  divergence: ", 10], 
   Short[False, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289939752493`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Returning converge: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Returning converge: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289939791555`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289939840384`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289939879446`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["81",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[81, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289939928274`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289939967337`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228994040679*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289940934134`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228994098296*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228994103179*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["82",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[82, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228994108062*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289941158743`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289941627493`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289943229055`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289943277884`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289943336477`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["83",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[83, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289943385305`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228994342437*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228994384429*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228994436187*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289944410696`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289944459524`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["84",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[84, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228994450835*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289944566946`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228994498687*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289945465384`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289945523977`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289945572805`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["85",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[85, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022899456314*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228994567046*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289946109915`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289946598196`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228994663726*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289946715384`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["86",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[86, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289946773977`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228994681304*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228994851226*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228994895171*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228994900054*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228994904937*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["87",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[87, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228994910796*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289949147024`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228994962554*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289950055227`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289950123587`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289950172415`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["88",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[88, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228995023101*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228995027007*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228995075835*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228995118804*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289951246634`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228995132476*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["89",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[89, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289951373587`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228995143218*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228995194976*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228995245757*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228995252593*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228995257476*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["90",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[90, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289952623587`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289952672415`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022899531314*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228995429351*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Checking convergence, itr = \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["90",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Checking convergence, itr = ", 10], 
   Short[90, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289954342337`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"Entering converge[]\"\>", "Subsubsection",
   StripOnInput->False],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289954391165`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "0.41539848377725264`"}], ",", 
      RowBox[{"-", "0.14662723103673692`"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.`", ",", "0.`", ",", "0.`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "7629.`"}], ",", 
      RowBox[{"-", "7629.`"}], ",", 
      RowBox[{"-", "7629.`"}]}], "}"}], ",", 
    SuperscriptBox["10", 
     RowBox[{
      RowBox[{"-", "MachinePrecision"}], "/", "2"}]], ",", 
    SuperscriptBox["10", 
     RowBox[{
      RowBox[{"-", "MachinePrecision"}], "/", "2"}]]}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289954439993`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Point convergence: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["False",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Point convergence: ", 10], 
   Short[False, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228995448882*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Funxn convergence: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["True",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Funxn convergence: ", 10], 
   Short[True, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289954547415`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Funxn  divergence: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["False",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Funxn  divergence: ", 10], 
   Short[False, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289954586477`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Returning converge: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Returning converge: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228995462554*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022899546646*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228995471343*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["91",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[91, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228995476226*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228995480132*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289954840384`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289954879446`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289954928274`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289954967337`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["92",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[92, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022899550064*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289955055227`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228995547515*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228995598296*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289956041555`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289956090384`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["93",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[93, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228995613921*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289956197805`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228995663726*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228995712554*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289957184134`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228995723296*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["94",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[94, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289957291555`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228995733062*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289957760305`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228995817046*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289958229055`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228995830718*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["95",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[95, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228995842437*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289958473196`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289958941946`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228995940093*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228995946929*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228995953765*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["96",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[96, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289959586477`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289959635305`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289960055227`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289960533743`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289960572805`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289960621634`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["97",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[97, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289960680227`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289960748587`*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289961266165`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289961715384`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228996179351*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228996183257*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["98",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[98, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289961891165`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228996196929*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289962428274`*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289962936087`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228996299468*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289963053274`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["99",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[99, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022899631021*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228996315093*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228996357085*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289964459524`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228996451812*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228996457671*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["100",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th iteration\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[100, 10], 
   Short["th iteration", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228996462554*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.270147181751275`", ",", "3.506308165728637`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.477846423639901`", ",", "3.5796217812470053`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
   "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228996467437*^9}],

Cell[BoxData[
 TagBox["\<\"reflected point is better than all the others\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228996533843*^9}],

Cell[BoxData[
 TagBox["\<\"expansion is not so good\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289965797415`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Checking convergence, itr = \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["100",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Checking convergence, itr = ", 10], 
   Short[100, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289965846243`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"Entering converge[]\"\>", "Subsubsection",
   StripOnInput->False],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289965934134`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "0.41539848377725264`"}], ",", 
      RowBox[{"-", "0.14662723103673692`"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.`", ",", "0.`", ",", "0.`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "7629.`"}], ",", 
      RowBox[{"-", "7629.`"}], ",", 
      RowBox[{"-", "7629.`"}]}], "}"}], ",", 
    SuperscriptBox["10", 
     RowBox[{
      RowBox[{"-", "MachinePrecision"}], "/", "2"}]], ",", 
    SuperscriptBox["10", 
     RowBox[{
      RowBox[{"-", "MachinePrecision"}], "/", "2"}]]}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289966002493`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Point convergence: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["False",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Point convergence: ", 10], 
   Short[False, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289966061087`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Funxn convergence: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["True",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Funxn convergence: ", 10], 
   Short[True, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289966109915`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Funxn  divergence: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["False",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Funxn  divergence: ", 10], 
   Short[False, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228996616851*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Returning converge: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Returning converge: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022899662271*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"function=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"  changes=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"8.977294885095501`", " ", "\<\"  distance=\"\>"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["function=", 10], 
   Short[-7629., 10], 
   Short["  changes=", 10], 
   Short[8.977294885095501 "  distance=", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228996627593*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"converge[]: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["converge[]: ", 10], 
   Short[{False, "Point"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289966334524`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Number of shrinks=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["2",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Number of shrinks=", 10], 
   Short[2, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228996638335*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"reason for exit: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"MaxIterations\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["reason for exit: ", 10], 
   Short["MaxIterations", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289966441946`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Number of restarts: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"/\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["3",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Number of restarts: ", 10], 
   Short[0, 10], 
   Short["/", 10], 
   Short[3, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289966490774`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"distance: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["distance: ", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022899665396*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"cdistance: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    InterpretationBox[
     RowBox[{
      TagBox["CompiledFunction",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False}, 
       PanelBox[
        PaneSelectorBox[{False->GridBox[{
           {
            PaneBox[
             ButtonBox[
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"],
               ImageSizeCache->{15., {0., 15.}}],
              Appearance->None,
              ButtonFunction:>(Typeset`open$$ = True),
              Evaluator->Automatic,
              Method->"Preemptive"],
             Alignment->{Center, Center},
             
             ImageSize->
              Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             {Thickness[0.038461538461538464`], 
              {FaceForm[{GrayLevel[0.93], Opacity[1.]}], 
               FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {
                1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{
                25.499999999999996`, 2.5}, {25.499999999999996`, 
                1.3953100000000003`}, {24.604699999999998`, 
                0.49999999999999994`}, {23.5, 0.49999999999999994`}, {2.5, 
                0.49999999999999994`}, {1.3953100000000003`, 
                0.49999999999999994`}, {0.49999999999999994`, 
                1.3953100000000003`}, {0.49999999999999994`, 2.5}, {
                0.49999999999999994`, 23.5}, {0.49999999999999994`, 
                24.604699999999998`}, {1.3953100000000003`, 
                25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
                25.499999999999996`}, {24.604699999999998`, 
                25.499999999999996`}, {25.499999999999996`, 
                24.604699999999998`}, {25.499999999999996`, 23.5}, {
                25.499999999999996`, 2.5}}}]}, 
              {FaceForm[{RGBColor[0.5, 0.5, 0.5], Opacity[1.]}], 
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
                19.116799999999998`}, {16.3832, 21.876199999999997`}, {
                16.3832, 20.021499999999996`}, {6.930469999999999, 
                20.021499999999996`}, {6.930469999999999, 
                18.212100000000003`}, {16.3832, 18.212100000000003`}, {
                16.3832, 16.357399999999995`}, {20.5426, 
                19.116799999999998`}}}], 
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {
                9.46445, 11.079700000000003`}, {9.46445, 
                12.933999999999997`}, {18.917199999999998`, 
                12.933999999999997`}, {18.917199999999998`, 14.7438}, {
                9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 13.8391}}}], 
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
                 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIRIGYC4r9qIkoPPog5zJd34+ifoeBwf6HGBfU8aYe0
2dKXhaMEHT77F2xc1CQH52elHtL/aqrg0KrArnpmjpRDvTCXYEG9gsOOYKuI
/6tlHZ5WFpRfO4qQn3ww8NOrXYpw/fNmfE3SCFCG8z8EiLwQ7lSF2w82/44y
nM937b/lmXNKDnK7FuxLZZFwMDfq/3NwgpKDccaL+Q9miDok9Mnt3x6k5FDt
mbylT0ECwk9QhOuXWfO/eIajPCq/WNYh5kh50jV+CYc1eV/nfGGShZsXte2a
OGevDNy8ZqG0W/9KpeD60cMLAIwUgfU=
                "]], 
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{12.82453, 
                5.289294374999999}, {11.960858124999998`, 8.29796625}, {
                11.080858124999999`, 8.29796625}, {12.417186249999999`, 
                4.337966249999999}, {13.193201874999998`, 
                4.337966249999999}, {14.540701874999998`, 8.29796625}, {
                13.688201874999999`, 8.29796625}, {12.82453, 
                5.289294374999999}}}], 
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
                 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIpIGYC4qwFP+fsFjB0WFcz7fnBvSIOLFaTza6GGTjM
l3fj6J+h4GC9PHLBXXc9DH7abOnLwlGCDtPNZKaxndfH4Is8/uOrISAD53uI
GTRGxyP4O4KtIv6fR/BbFdhVz8TIOqj9FNyfdEbfIejt5Y8zXiL4h7TunbCJ
koPzweYvkXP4mfT+6PSlBnD7n25Z/mROiSGcr7S/rqPX1AiuHsaHmQfjw+zz
lubzZjYxgrsHxoe5F8aH+QfGn/B91VROQQQfZr/Ei1viF75j8mHh6eiSdevo
cUM4Hz0+AG0eosQ=
                "]]}},
             AspectRatio->1,
             Axes->False,
             Background->GrayLevel[0.93],
             Frame->True,
             FrameStyle->Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]],
             FrameTicks->None,
             ImageSize->{Automatic, 
               Dynamic[
               3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification]), ImageSizeCache -> {45., {0., 9.}}]}], 
            GridBox[{
              {
               RowBox[{
                TagBox["\<\"Argument count: \"\>",
                 "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                TagBox["2",
                 "SummaryItem"]}]},
              {
               RowBox[{
                TagBox["\<\"Argument types: \"\>",
                 "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                TagBox[
                 StyleBox[
                  PaneBox[
                   RowBox[{"{", 
                    RowBox[{"_Real", ",", "_Real"}], "}"}],
                   BaselinePosition->Baseline,
                   ContentPadding->False,
                   FrameMargins->0,
                   ImageSize->{{1, 300}, Automatic},
                   StripOnInput->True],
                  LineBreakWithin->False],
                 "SummaryItem"]}]}
             },
             AutoDelete->False,
             
             BaseStyle->{
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False},
             
             GridBoxAlignment->{
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
             GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
          },
          AutoDelete->False,
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Rows" -> {{Top}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->
         GridBox[{
           {
            PaneBox[
             ButtonBox[
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]],
              Appearance->None,
              ButtonFunction:>(Typeset`open$$ = False),
              Evaluator->Automatic,
              Method->"Preemptive"],
             Alignment->{Center, Center},
             
             ImageSize->
              Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             {Thickness[0.038461538461538464`], 
              {FaceForm[{GrayLevel[0.93], Opacity[1.]}], 
               FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {
                1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{
                25.499999999999996`, 2.5}, {25.499999999999996`, 
                1.3953100000000003`}, {24.604699999999998`, 
                0.49999999999999994`}, {23.5, 0.49999999999999994`}, {2.5, 
                0.49999999999999994`}, {1.3953100000000003`, 
                0.49999999999999994`}, {0.49999999999999994`, 
                1.3953100000000003`}, {0.49999999999999994`, 2.5}, {
                0.49999999999999994`, 23.5}, {0.49999999999999994`, 
                24.604699999999998`}, {1.3953100000000003`, 
                25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
                25.499999999999996`}, {24.604699999999998`, 
                25.499999999999996`}, {25.499999999999996`, 
                24.604699999999998`}, {25.499999999999996`, 23.5}, {
                25.499999999999996`, 2.5}}}]}, 
              {FaceForm[{RGBColor[0.5, 0.5, 0.5], Opacity[1.]}], 
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
                19.116799999999998`}, {16.3832, 21.876199999999997`}, {
                16.3832, 20.021499999999996`}, {6.930469999999999, 
                20.021499999999996`}, {6.930469999999999, 
                18.212100000000003`}, {16.3832, 18.212100000000003`}, {
                16.3832, 16.357399999999995`}, {20.5426, 
                19.116799999999998`}}}], 
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {
                9.46445, 11.079700000000003`}, {9.46445, 
                12.933999999999997`}, {18.917199999999998`, 
                12.933999999999997`}, {18.917199999999998`, 14.7438}, {
                9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 13.8391}}}], 
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
                 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIRIGYC4r9qIkoPPog5zJd34+ifoeBwf6HGBfU8aYe0
2dKXhaMEHT77F2xc1CQH52elHtL/aqrg0KrArnpmjpRDvTCXYEG9gsOOYKuI
/6tlHZ5WFpRfO4qQn3ww8NOrXYpw/fNmfE3SCFCG8z8EiLwQ7lSF2w82/44y
nM937b/lmXNKDnK7FuxLZZFwMDfq/3NwgpKDccaL+Q9miDok9Mnt3x6k5FDt
mbylT0ECwk9QhOuXWfO/eIajPCq/WNYh5kh50jV+CYc1eV/nfGGShZsXte2a
OGevDNy8ZqG0W/9KpeD60cMLAIwUgfU=
                "]], 
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{12.82453, 
                5.289294374999999}, {11.960858124999998`, 8.29796625}, {
                11.080858124999999`, 8.29796625}, {12.417186249999999`, 
                4.337966249999999}, {13.193201874999998`, 
                4.337966249999999}, {14.540701874999998`, 8.29796625}, {
                13.688201874999999`, 8.29796625}, {12.82453, 
                5.289294374999999}}}], 
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
                 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIpIGYC4qwFP+fsFjB0WFcz7fnBvSIOLFaTza6GGTjM
l3fj6J+h4GC9PHLBXXc9DH7abOnLwlGCDtPNZKaxndfH4Is8/uOrISAD53uI
GTRGxyP4O4KtIv6fR/BbFdhVz8TIOqj9FNyfdEbfIejt5Y8zXiL4h7TunbCJ
koPzweYvkXP4mfT+6PSlBnD7n25Z/mROiSGcr7S/rqPX1AiuHsaHmQfjw+zz
lubzZjYxgrsHxoe5F8aH+QfGn/B91VROQQQfZr/Ei1viF75j8mHh6eiSdevo
cUM4Hz0+AG0eosQ=
                "]]}},
             AspectRatio->1,
             Axes->False,
             Background->GrayLevel[0.93],
             Frame->True,
             FrameStyle->Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]],
             FrameTicks->None,
             ImageSize->{Automatic, 
               Dynamic[
               3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification]), ImageSizeCache -> {45., {0., 9.}}]}], 
            GridBox[{
              {
               RowBox[{
                TagBox["\<\"Argument count: \"\>",
                 "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                TagBox["2",
                 "SummaryItem"]}]},
              {
               RowBox[{
                TagBox["\<\"Argument types: \"\>",
                 "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                TagBox[
                 PaneBox[
                  RowBox[{"{", 
                   RowBox[{"_Real", ",", "_Real"}], "}"}],
                  BaselinePosition->Baseline,
                  ContentPadding->False,
                  FrameMargins->0,
                  ImageSize->{{1, 500}, Automatic},
                  StripOnInput->True],
                 "SummaryItem"]}]},
              {
               RowBox[{
                TagBox["\<\"Variables: \"\>",
                 "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                TagBox[
                 RowBox[{"{", 
                  RowBox[{"x1", ",", "x2"}], "}"}],
                 "SummaryItem"]}]},
              {
               RowBox[{
                TagBox["\<\"Expression: \"\>",
                 "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                TagBox[
                 PaneBox["0",
                  BaselinePosition->Baseline,
                  ContentPadding->False,
                  FrameMargins->0,
                  ImageSize->{{1, 500}, Automatic},
                  StripOnInput->True],
                 "SummaryItem"]}]}
             },
             AutoDelete->False,
             
             BaseStyle->{
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False},
             
             GridBoxAlignment->{
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
             GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
          },
          AutoDelete->False,
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Rows" -> {{Top}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
         Typeset`open$$],
         ImageSize->Automatic],
        BaselinePosition->Baseline],
       DynamicModuleValues:>{}], "]"}],
     CompiledFunction[{10, 10., 5468}, {
       Blank[Real], 
       Blank[Real]}, {{3, 0, 0}, {3, 0, 1}, {2, 0, 0}}, {{0, {2, 0, 0}}}, {0, 
      1, 2, 0, 0}, {{1}}, 
      Function[{$CellContext`x1, $CellContext`x2}, 0], Evaluate],
     Editable->False,
     SelectWithContents->True,
     Selectable->False],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["cdistance: ", 10], 
   Short[
    CompiledFunction[{10, 10., 5468}, {
      Blank[Real], 
      Blank[Real]}, {{3, 0, 0}, {3, 0, 1}, {2, 0, 0}}, {{0, {2, 0, 0}}}, {0, 
     1, 2, 0, 0}, {{1}}, 
     Function[{$CellContext`x1, $CellContext`x2}, 0], Evaluate], 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022899668521*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"best: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["best: ", 10], 
   Short[{6.062447939862649, 3.4329945502102683`}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228996745757*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"result=\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "7629.`"}], ",", 
      RowBox[{"{", 
       RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
     "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["result=", 10], 
   Short[{-7629., {6.062447939862649, 3.4329945502102683`}}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022899675064*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{"Automatic", ",", "True"}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228996754546*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"First test: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["True",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["First test: ", 10], 
   Short[True, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228996759429*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Second test: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["False",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Second test: ", 10], 
   Short[False, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228996763335*^9}],

Cell[BoxData[
 TagBox["\<\"Don't expand the simplex: not desired\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228996768218*^9}],

Cell[BoxData[
 TagBox["\<\"Returning CoreNM from CoreNM\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289967721243`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "7629.`"}], ",", 
      RowBox[{"{", 
       RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
     "}"}], ",", "Automatic", ",", 
    RowBox[{"{", 
     RowBox[{"False", ",", "\<\"Point\"\>"}], "}"}]}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289967760305`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"CoreNM Time: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["10.093000000000004`",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["CoreNM Time: ", 10], 
   Short[10.093000000000004`, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289967809134`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"CoreNM Memory: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["2200360",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["CoreNM Memory: ", 10], 
   Short[2200360, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228996785796*^9}],

Cell[BoxData[
 TagBox["\<\"Fixing Integers\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228996790679*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"   Rules: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["   Rules: ", 10], 
   Short[{}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228996794585*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"   Result= \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "7629.`"}], ",", 
      RowBox[{"{", 
       RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}]}], 
     "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["   Result= ", 10], 
   Short[{-7629., {6.062447939862649, 3.4329945502102683`}}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228996799468*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Level 1 Postprocess Time: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0.`",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Level 1 Postprocess Time: ", 10], 
   Short[0., 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289968033743`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Level 1 Postprocess Memory: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["96",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Level 1 Postprocess Memory: ", 10], 
   Short[96, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228996808257*^9}],

Cell[BoxData[
 TagBox["\<\"   Postprocessing\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022899681314*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"   Distance: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["0",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["   Distance: ", 10], 
   Short[0, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289968180227`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox[
    StyleBox["\<\"Entering postprocess...postproc = \"\>", "Subsubsection",
     StripOnInput->False],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["Automatic",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[
    Style["Entering postprocess...postproc = ", "Subsubsection"], 10], 
   Short[Automatic, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228996821929*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox[
    StyleBox["\<\"Max IP postprocess time = \"\>", "Subsubsection",
     StripOnInput->False],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["10.09375`7.024652457290821",
    Short[#, 10]& ]}],
  SequenceForm[
   Short[
    Style["Max IP postprocess time = ", "Subsubsection"], 10], 
   Short[10.09375`7.024652457290821, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228996826812*^9}],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"Entering makeFunctions...\"\>", "Subsubsection",
   StripOnInput->False],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289968316946`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x1", ",", "x2"}], "}"}], ",", "MachinePrecision", ",", 
    RowBox[{"{", "}"}]}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289968404837`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"EvaluationMonitor", "\[RuleDelayed]", "None"}], ",", 
    RowBox[{"EvaluationMonitor", "\[Rule]", "None"}]}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289968453665`*^9}],

Cell[BoxData[
 TagBox["\<\"stepmonfunc done\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228996853179*^9}],

Cell[BoxData[
 TagBox["\<\"nfFunc done\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228996857085*^9}],

Cell[BoxData[
 TagBox["\<\"nfTotalFunc done\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289968609915`*^9}],

Cell[BoxData[
 TagBox["\<\"nfDist done\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289968658743`*^9}],

Cell[BoxData[
 TagBox["\<\"Returning makeFunctions:\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289968697805`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    TagBox[
     RowBox[{"Experimental`NumericalFunction", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x1", ",", "x2"}], "}"}], ",", 
       RowBox[{"-", 
        RowBox[{"objective", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "0.01966398659794777`"}], ",", 
              "8.940303944001755`", ",", "0.1585748958377735`"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
             "0.21144177178382506`", ",", "7.938589867531277`", ",", 
              "2.6013548549343`"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
             "0.2143619902624323`", ",", "4.920408975513851`", ",", 
              "2.032227390508126`"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
             "0.10739113760234886`", ",", "3.0866613768383786`", ",", 
              "7.7733583505104775`"}], "}"}], ",", 
            RowBox[{"\[LeftSkeleton]", "7692", "\[RightSkeleton]"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "8.811728457042875`"}], ",", 
              RowBox[{"-", "7.089805444082913`"}], ",", 
              "24.283820566580857`"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
             "17.68532578568579`", ",", "5.0370991579691236`", ",", 
              "0.15194175653567754`"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
             "6.812939732358473`", ",", "1.8078913161586456`", ",", 
              "5.98936310501756`"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
             "0.006713407773020208`", ",", "13.321237355279152`", ",", 
              "3.1938604900771566`"}], "}"}]}], "}"}], ",", "x1", ",", "x2"}],
          "]"}]}], ",", "\<\"-NumericalFunctionData-\"\>"}], "]"}],
     False,
     Editable->False,
     SelectWithContents->True], ",", 
    TagBox[
     RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}],
     False,
     Editable->False,
     SelectWithContents->True], ",", 
    TagBox[
     RowBox[{
      RowBox[{"\[LeftSkeleton]", "30", "\[RightSkeleton]"}], "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x1", ",", "x2"}], "}"}], ",", "0", ",", 
       RowBox[{"\<\"-Nume\"\>", "\[Ellipsis]", "\<\"nData-\"\>"}]}], "]"}],
     False,
     Editable->False,
     SelectWithContents->True]}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022899687564*^9}],

Cell[BoxData[
 TagBox["\<\"setup complete -- Switch on PPMethod\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289968805227`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"the internal $PostprocessOrder is \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"KKTIP\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["the internal $PostprocessOrder is ", 10], 
   Short["KKTIP", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289968854055`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"Entering KKT:\"\>", "Subsubsection",
   StripOnInput->False],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289968902884`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", "}"}], ",", 
    RowBox[{"{", "}"}], ",", 
    RowBox[{"-", 
     RowBox[{"objective", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "0.01966398659794777`"}], ",", "8.940303944001755`", 
           ",", "0.1585748958377735`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "0.21144177178382506`", ",", "7.938589867531277`", ",", 
           "2.6013548549343`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "0.2143619902624323`", ",", "4.920408975513851`", ",", 
           "2.032227390508126`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "0.10739113760234886`", ",", "3.0866613768383786`", ",", 
           "7.7733583505104775`"}], "}"}], ",", 
         RowBox[{"\[LeftSkeleton]", "7692", "\[RightSkeleton]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "8.811728457042875`"}], ",", 
           RowBox[{"-", "7.089805444082913`"}], ",", "24.283820566580857`"}], 
          "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "17.68532578568579`", ",", "5.0370991579691236`", ",", 
           "0.15194175653567754`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "6.812939732358473`", ",", "1.8078913161586456`", ",", 
           "5.98936310501756`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "0.006713407773020208`", ",", "13.321237355279152`", ",", 
           "3.1938604900771566`"}], "}"}]}], "}"}], ",", "x1", ",", "x2"}], 
      "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"x1", ",", "x2"}], "}"}], ",", 
    RowBox[{"{", "}"}]}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289969566946`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{"MachinePrecision", ",", 
    FractionBox["MachinePrecision", "2"], ",", 
    FractionBox["MachinePrecision", "2"], ",", "Automatic"}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228996962554*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Equations: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", 
       RowBox[{
        SuperscriptBox["objective", 
         TagBox[
          RowBox[{"(", 
           RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], ")"}],
          Derivative],
         MultilineFunction->None], "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "0.01966398659794777`"}], ",", "8.940303944001755`",
              ",", "0.1585748958377735`"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
            "0.21144177178382506`", ",", "7.938589867531277`", ",", 
             "2.6013548549343`"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
            "0.2143619902624323`", ",", "4.920408975513851`", ",", 
             "2.032227390508126`"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
            "0.10739113760234886`", ",", "3.0866613768383786`", ",", 
             "7.7733583505104775`"}], "}"}], ",", 
           RowBox[{"\[LeftSkeleton]", "7692", "\[RightSkeleton]"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "8.811728457042875`"}], ",", 
             RowBox[{"-", "7.089805444082913`"}], ",", 
             "24.283820566580857`"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
            "17.68532578568579`", ",", "5.0370991579691236`", ",", 
             "0.15194175653567754`"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
            "6.812939732358473`", ",", "1.8078913161586456`", ",", 
             "5.98936310501756`"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
            "0.006713407773020208`", ",", "13.321237355279152`", ",", 
             "3.1938604900771566`"}], "}"}]}], "}"}], ",", "x1", ",", "x2"}], 
        "]"}]}], ",", 
      RowBox[{"-", 
       RowBox[{
        SuperscriptBox["objective", 
         TagBox[
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
              RowBox[{"\[LeftSkeleton]", "7697", "\[RightSkeleton]"}], ",", 
              RowBox[{"{", 
               RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", "0", 
            ",", "1"}], ")"}],
          Derivative],
         MultilineFunction->None], "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\[LeftSkeleton]", "20", "\[RightSkeleton]"}], ",", 
             RowBox[{"\[LeftSkeleton]", "18", "\[RightSkeleton]"}], ",", 
             RowBox[{"\[LeftSkeleton]", "16", "\[RightSkeleton]"}]}], "}"}], 
           ",", 
           RowBox[{"\[LeftSkeleton]", "7697", "\[RightSkeleton]"}], ",", 
           RowBox[{"{", 
            RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], "}"}]}], 
          "}"}], ",", "x1", ",", "x2"}], "]"}]}]}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Equations: ", 10], 
   Short[{-Derivative[CompressedData["
1:eJztwTENACAQBLALWGAmwRIS3sD737DB0PZU3xpJ1k5mAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAPjJA5/PAd4=
       "], 1, 0][$CellContext`objective][CompressedData["
1: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
FOOcVU6+rezz8glT3cwQggzgThHW58JkQuS+ynjAX4uTykZv4F1utz+mE7Cu
ZM+b65SFMEvps1zLOnU6KywxeHP8JoxLjn213KNII8a1cL9lbwnyt7LmZ9Xl
mP5A+DsvrMNkf05odTTE291PxadxkqA79BxWDINem69qDCMGwA8ukG+P/aTI
N1JDO7zBd3WzHiffhzo9PtpsdWSGoGsITc/nUI/x0XpEP+hdx3D+bDzow4x/
Rk3Mb4IpkJrR1a2P0Z3J4EH9lZjmlZPZ/5n9fP06TjGqJUjBt1I7RZbBOja+
8CoFvi3vMw+I7Scc1v8Z0r+vj1nEU72XCyqYrJpd5VoG+PORqqz+Ig+++msu
9xGoYzqLMTV5jyDHWN2ynuDbtD48YzR2EaRb7/2CJJjnmLGjb8wK9nnAPT4p
EVBvVR7CwaCLovwXAwU3YDKzv/DZPdDx85lhiZvlaIbgQNnOxRsxvcFqok0E
eI82l65wfEbQf9yELI4DzwttmtJ1gOvf/kg0q4Y854wuLSxin2stL3HhTSbQ
ap//mjihvvcVP7t1GHSXvtOX5ltB4S32Gbw8gJt6Gz/J66qYfLTt0+434JcD
Z9Zrnm4Dv1rgXdQMeQ226QzF9eAL39/jjy0iSGQfVeS4DDtwL992aA/Mj4cu
dD8A/SsO7O9ex37P1pSjVTeUonX5pXMnGJi5ZmxRostqTNY67PjrtBSjEUmZ
R4f7CPzoK4vjEvQnAq/VZVaAnlsbnq2XKKDw4eCvocug7/sbc0Nc8A/Bii1w
V16lRdsZZPynbbYVkyGqEb+2rqCRoqrj6eOjBD6w6NuOG9qYvmGUWvEE6rc/
4pTijWGCNGi/HZIqg2mq+niXqQLbH1ZLB7wnkGp5Kk2CblRkKtsdW4nJk+7X
18ryYVTsVOYqDbw0N6dpkj9OsHbtn+d6ronJL/hKwzbAY++v7nUXgZ++Baw8
uxT0bs3eFxVuwNNZrP606Y9Qt5ydzmaRhIMbfxk6rgXxP8pH7Id8Yw2x18qp
BGneGPieF/JnUiV6eBbylD4gWp3wk6K/NX1u7QNezYvP3HUZ9Km/7XbA1XaC
XOImubIMeLu38KqEC/t8dGOGx89mitXQquZXCX2Zxex0yNwIhXoTrPZd4qBp
Y8krc9vUMLPEOT+8AeK3hfvIJkGow94sozsOwIOfIh6vKq0D3RrRkjnEfr/o
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
fjvVln1THtfVPBfttegNzeRGvNqqCePrtlW8JqGGiMaigm0+EAeTfMJ+l2C+
RoKmefL4PZH2hR4S+KrrGd8pHcjXxL+c8rVeNPHnEod0wxDJCo3jtcXnJXTv
zKu8gusH8tZ7r/5CE0lXN3OsgnW5dk/meUALSSkKnJjE55MoGXp5JOgOsajH
3135EOWwO8tNYBETaNy4YpTSAp2Vk3gJ9/lwXk4celBMsiJd68/fW47aHhb7
Od+BcXaZLC0ZgLx3j9GgR36TlPGv7L4yaUQdrXPZ0gt4Pt+0Wn1oEWL/V16o
ZKeBqF6lNX+2w3yEzgerDeB9y8oWB3le4nqsyy/pQn6RNSlafrGFJNwvLbjV
Avj3N+nWjl8Q91plZb/JTySlwiNiziWG0OAaT54AwCOh0+oS28Gf0IGyX7wQ
31b1M3f+AP9Gy9a9OfKYZo7/1fuuCjzEed2sNObV62LrPV1h3Xq9RwQG6oAn
7+XzSgKdYvFBtOVUIuBqE1tmJeRj/Z1V1vNV+Fz8E1XOehI9rpI2q9BFhFng
hnu5kK9Wry61OQF68vDiQ687IJ65Ol4ePdpFt+2fzyprB/+VnW7W0/9NU66H
OT0vSzJtG3zlrxQpoEDFaUOzsQ2IEJtIHjlSTVJVd/u+YZ0j1flJ2+4ryW6P
FouThzxhdbvqg34lTQRsNjLA+9NVSrMvHf0MOq28Wkooh0Q/Q11icV2wwH07
Te6ATpHla+z7VE0T0WzH6zPAJ33GSjfeF2K0cp7qB/UD/jxeedfAB9clD1NO
ycoiiehTy1zWDJIo+0D9zofgL5dvjwjfwO+7/h4IPU+DviuPUeAHv9HqSFo7
B/YfOJ6iFQd6O6qB/9l5GK+Kxp6J+20kUXmA2TkBce9yIypaAPCQsPfWqvKm
qSVKD43DAb9R2CKhCbhfZJmoKoJ489DjlngA+ehix21rvA9C7FjenyXgp+Sh
MJNo0MFv2O21fxYgan9wrHcyB7ari+O+MZrZciKz+z8N8Nck3U/id2jCYfvk
BYU8OvyO1v7iX4DTQ8dbjspCvolklzzlB9xTn1x1Xw3G+ffwmUO23STjKv7k
Aj/ojVV0eT6u81Wdmh7k0UESr/zOcjaKIGo0tU5qlB+h/a482nhf6xKvZ5ym
YC/3gjUBtnCdl4LeFf9gfnOOT+O9/9Bol+R/Z95DninY+CY4SQAxfTez04+J
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
       "], $CellContext`x1, $CellContext`x2], -Derivative[CompressedData["
1:eJztwTENACAQBLALWGAmwRIS3sD737DB0PZU3xpJ1k5mAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAPjJA5/PAd4=
       "], 0, 1][$CellContext`objective][CompressedData["
1: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
FOOcVU6+rezz8glT3cwQggzgThHW58JkQuS+ynjAX4uTykZv4F1utz+mE7Cu
ZM+b65SFMEvps1zLOnU6KywxeHP8JoxLjn213KNII8a1cL9lbwnyt7LmZ9Xl
mP5A+DsvrMNkf05odTTE291PxadxkqA79BxWDINem69qDCMGwA8ukG+P/aTI
N1JDO7zBd3WzHiffhzo9PtpsdWSGoGsITc/nUI/x0XpEP+hdx3D+bDzow4x/
Rk3Mb4IpkJrR1a2P0Z3J4EH9lZjmlZPZ/5n9fP06TjGqJUjBt1I7RZbBOja+
8CoFvi3vMw+I7Scc1v8Z0r+vj1nEU72XCyqYrJpd5VoG+PORqqz+Ig+++msu
9xGoYzqLMTV5jyDHWN2ynuDbtD48YzR2EaRb7/2CJJjnmLGjb8wK9nnAPT4p
EVBvVR7CwaCLovwXAwU3YDKzv/DZPdDx85lhiZvlaIbgQNnOxRsxvcFqok0E
eI82l65wfEbQf9yELI4DzwttmtJ1gOvf/kg0q4Y854wuLSxin2stL3HhTSbQ
ap//mjihvvcVP7t1GHSXvtOX5ltB4S32Gbw8gJt6Gz/J66qYfLTt0+434JcD
Z9Zrnm4Dv1rgXdQMeQ226QzF9eAL39/jjy0iSGQfVeS4DDtwL992aA/Mj4cu
dD8A/SsO7O9ex37P1pSjVTeUonX5pXMnGJi5ZmxRostqTNY67PjrtBSjEUmZ
R4f7CPzoK4vjEvQnAq/VZVaAnlsbnq2XKKDw4eCvocug7/sbc0Nc8A/Bii1w
V16lRdsZZPynbbYVkyGqEb+2rqCRoqrj6eOjBD6w6NuOG9qYvmGUWvEE6rc/
4pTijWGCNGi/HZIqg2mq+niXqQLbH1ZLB7wnkGp5Kk2CblRkKtsdW4nJk+7X
18ryYVTsVOYqDbw0N6dpkj9OsHbtn+d6ronJL/hKwzbAY++v7nUXgZ++Baw8
uxT0bs3eFxVuwNNZrP606Y9Qt5ydzmaRhIMbfxk6rgXxP8pH7Id8Yw2x18qp
BGneGPieF/JnUiV6eBbylD4gWp3wk6K/NX1u7QNezYvP3HUZ9Km/7XbA1XaC
XOImubIMeLu38KqEC/t8dGOGx89mitXQquZXCX2Zxex0yNwIhXoTrPZd4qBp
Y8krc9vUMLPEOT+8AeK3hfvIJkGow94sozsOwIOfIh6vKq0D3RrRkjnEfr/o
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
fjvVln1THtfVPBfttegNzeRGvNqqCePrtlW8JqGGiMaigm0+EAeTfMJ+l2C+
RoKmefL4PZH2hR4S+KrrGd8pHcjXxL+c8rVeNPHnEod0wxDJCo3jtcXnJXTv
zKu8gusH8tZ7r/5CE0lXN3OsgnW5dk/meUALSSkKnJjE55MoGXp5JOgOsajH
3135EOWwO8tNYBETaNy4YpTSAp2Vk3gJ9/lwXk4celBMsiJd68/fW47aHhb7
Od+BcXaZLC0ZgLx3j9GgR36TlPGv7L4yaUQdrXPZ0gt4Pt+0Wn1oEWL/V16o
ZKeBqF6lNX+2w3yEzgerDeB9y8oWB3le4nqsyy/pQn6RNSlafrGFJNwvLbjV
Avj3N+nWjl8Q91plZb/JTySlwiNiziWG0OAaT54AwCOh0+oS28Gf0IGyX7wQ
31b1M3f+AP9Gy9a9OfKYZo7/1fuuCjzEed2sNObV62LrPV1h3Xq9RwQG6oAn
7+XzSgKdYvFBtOVUIuBqE1tmJeRj/Z1V1vNV+Fz8E1XOehI9rpI2q9BFhFng
hnu5kK9Wry61OQF68vDiQ687IJ65Ol4ePdpFt+2fzyprB/+VnW7W0/9NU66H
OT0vSzJtG3zlrxQpoEDFaUOzsQ2IEJtIHjlSTVJVd/u+YZ0j1flJ2+4ryW6P
FouThzxhdbvqg34lTQRsNjLA+9NVSrMvHf0MOq28Wkooh0Q/Q11icV2wwH07
Te6ATpHla+z7VE0T0WzH6zPAJ33GSjfeF2K0cp7qB/UD/jxeedfAB9clD1NO
ycoiiehTy1zWDJIo+0D9zofgL5dvjwjfwO+7/h4IPU+DviuPUeAHv9HqSFo7
B/YfOJ6iFQd6O6qB/9l5GK+Kxp6J+20kUXmA2TkBce9yIypaAPCQsPfWqvKm
qSVKD43DAb9R2CKhCbhfZJmoKoJ489DjlngA+ehix21rvA9C7FjenyXgp+Sh
MJNo0MFv2O21fxYgan9wrHcyB7ari+O+MZrZciKz+z8N8Nck3U/id2jCYfvk
BYU8OvyO1v7iX4DTQ8dbjspCvolklzzlB9xTn1x1Xw3G+ffwmUO23STjKv7k
Aj/ojVV0eT6u81Wdmh7k0UESr/zOcjaKIGo0tU5qlB+h/a482nhf6xKvZ5ym
YC/3gjUBtnCdl4LeFf9gfnOOT+O9/9Bol+R/Z95DninY+CY4SQAxfTez04+J
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
       "], $CellContext`x1, $CellContext`x2]}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228997551421*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Prelim soln: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["$Failed",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Prelim soln: ", 10], 
   Short[$Failed, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228997608062*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Returning KKT: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"$Failed", ",", 
      RowBox[{"{", 
       RowBox[{"False", ",", "\<\"KKTFailed\"\>"}], "}"}]}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Returning KKT: ", 10], 
   Short[{$Failed, {False, "KKTFailed"}}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289976148977`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"Entering IPPostProcess\"\>", "Subsubsection",
   StripOnInput->False],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228997620757*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"InteriorPoint gives = \"\>",
    Short[#, 1000]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "7629"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
        RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0.`", ",", 
        RowBox[{"{", 
         RowBox[{"0.`", ",", "0.`", ",", "0.`"}], "}"}]}], "}"}], ",", "1"}], 
     "}"}],
    Short[#, 1000]& ]}],
  SequenceForm[
   Short["InteriorPoint gives = ", 1000], 
   Short[{-7629, {$CellContext`x1 -> 6.062447939862649, $CellContext`x2 -> 
      3.4329945502102683`}, {0., {0., 0., 0.}}, 1}, 1000]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289977086477`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Returning IPPostProcess: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "7629"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
          RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"True", ",", "\<\"Converged\"\>"}], "}"}]}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Returning IPPostProcess: ", 10], 
   Short[{{-7629, {$CellContext`x1 -> 6.062447939862649, $CellContext`x2 -> 
       3.4329945502102683`}}, {True, "Converged"}}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228997717437*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"before conFindMin, res = \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "7629"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
          RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"True", ",", "\<\"Converged\"\>"}], "}"}]}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["before conFindMin, res = ", 10], 
   Short[{{-7629, {$CellContext`x1 -> 6.062447939862649, $CellContext`x2 -> 
       3.4329945502102683`}}, {True, "Converged"}}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289977242727`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"Entering conViolation...\"\>", "Subsubsection",
   StripOnInput->False],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228997732085*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "7629"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
          RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "7629"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
          RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], 
       "}"}]}], "}"}], ",", 
    RowBox[{"{", "}"}], ",", 
    RowBox[{"{", "}"}], ",", 
    RowBox[{"{", "}"}], ",", 
    RowBox[{"{", "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"x1", ",", "x2"}], "}"}], ",", "0.001`", ",", "0.001`"}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228997738921*^9}],

Cell[BoxData[
 TagBox["\<\"Returning conViolation: \"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228997745757*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "7629"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
          RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], 
       "}"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "7629"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
          RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], 
       "}"}]}], "}"}]}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289977516165`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"Entering conFindMin\"\>", "Subsubsection",
   StripOnInput->False],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228997797515*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    "Optimization`NMinimizeDump`eq", ",", "Optimization`NMinimizeDump`ineq", 
    ",", 
    RowBox[{"-", 
     RowBox[{"objective", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "0.01966398659794777`"}], ",", "8.940303944001755`", 
           ",", "0.1585748958377735`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "0.21144177178382506`", ",", "7.938589867531277`", ",", 
           "2.6013548549343`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "0.2143619902624323`", ",", "4.920408975513851`", ",", 
           "2.032227390508126`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "0.10739113760234886`", ",", "3.0866613768383786`", ",", 
           "7.7733583505104775`"}], "}"}], ",", 
         RowBox[{"\[LeftSkeleton]", "7693", "\[RightSkeleton]"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "17.68532578568579`", ",", "5.0370991579691236`", ",", 
           "0.15194175653567754`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "6.812939732358473`", ",", "1.8078913161586456`", ",", 
           "5.98936310501756`"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "0.006713407773020208`", ",", "13.321237355279152`", ",", 
           "3.1938604900771566`"}], "}"}]}], "}"}], ",", "x1", ",", "x2"}], 
      "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"x1", ",", "x2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], "}"}]}], "}"}], 
    ",", 
    RowBox[{"{", "}"}]}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289979186087`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{"MachinePrecision", ",", 
    FractionBox["MachinePrecision", "2"], ",", 
    FractionBox["MachinePrecision", "2"], ",", "Automatic"}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289979234915`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Initial constraint violation: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["1",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Initial constraint violation: ", 10], 
   Short[1, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228997929351*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Initial function value: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Initial function value: ", 10], 
   Short[-7629., 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289979996634`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Initial function value: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "7629.`"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Initial function value: ", 10], 
   Short[-7629., 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289980064993`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox[
    StyleBox["\<\"Entering loop: {{i, maxiter}, {converged, {dist, ineqtol}}, \
{rate}} = \"\>", "Subsubsection",
     StripOnInput->False],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "100"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"False", ",", "\<\"Points\"\>"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "0.001`"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", "0.`", "}"}]}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short[
    Style[
    "Entering loop: {{i, maxiter}, {converged, {dist, ineqtol}}, {rate}} = ", 
     "Subsubsection"], 10], 
   Short[{{1, 100}, {{False, "Points"}, {1, 0.001}}, {0.}}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289980123587`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"conFindMin iteration: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["1",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["conFindMin iteration: ", 10], 
   Short[1, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228998020171*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"FindMin result: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "7629.`"}], ",", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], 
       "}"}]}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["FindMin result: ", 10], 
   Short[{-7629., {{6.062447939862649, 3.4329945502102683`}}}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228998085601*^9}],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"Entering converge[]\"\>", "Subsubsection",
   StripOnInput->False],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289981305227`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0.`", ",", "0.`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6.062447939862649`", ",", "3.4329945502102683`"}], "}"}], ",", 
    RowBox[{"{", "0.`", "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"-", "7629.`"}], "}"}], ",", 
    SuperscriptBox["10", 
     RowBox[{
      RowBox[{"-", "MachinePrecision"}], "/", "2"}]], ",", 
    SuperscriptBox["10", 
     RowBox[{
      RowBox[{"-", "MachinePrecision"}], "/", "2"}]]}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228998136382*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Point convergence: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["True",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Point convergence: ", 10], 
   Short[True, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228998141265*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Funxn convergence: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["True",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Funxn convergence: ", 10], 
   Short[True, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228998145171*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Funxn  divergence: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["False",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Funxn  divergence: ", 10], 
   Short[False, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289981529837`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Returning converge: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"True", ",", "\<\"ZeroStepSize\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Returning converge: ", 10], 
   Short[{True, "ZeroStepSize"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289981578665`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"{{i, maxiter}, {converged, {dist, idist, ineqtol}}, {rate}} = \
\"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"3", ",", "100"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"True", ",", "\<\"ZeroStepSize\"\>"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0.`", ",", "0.`", ",", "0.001`"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", "0.`", "}"}]}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["{{i, maxiter}, {converged, {dist, idist, ineqtol}}, {rate}} = ", 
    10], 
   Short[{{3, 100}, {{True, "ZeroStepSize"}, {0., 0., 0.001}}, {0.}}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228998163726*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Returning conFindMin: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "7629.`"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
          RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"False", ",", "\<\"FindMinimumFailure\"\>"}], "}"}]}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Returning conFindMin: ", 10], 
   Short[{{-7629., {$CellContext`x1 -> 6.062447939862649, $CellContext`x2 -> 
       3.4329945502102683`}}, {False, "FindMinimumFailure"}}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228998210601*^9}],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"Entering conViolation...\"\>", "Subsubsection",
   StripOnInput->False],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289982154837`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "7629.`"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
          RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "7629.`"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
          RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], 
       "}"}]}], "}"}], ",", 
    RowBox[{"{", "}"}], ",", 
    RowBox[{"{", "}"}], ",", 
    RowBox[{"{", "}"}], ",", 
    RowBox[{"{", "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"x1", ",", "x2"}], "}"}], ",", "0.001`", ",", "0.001`"}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289982223196`*^9}],

Cell[BoxData[
 TagBox["\<\"Returning conViolation: \"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228998226226*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "7629.`"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
          RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], 
       "}"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "7629.`"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
          RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], 
       "}"}]}], "}"}]}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289982340384`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"KKT/IP {f, feasibility} = \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "7629"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "7629"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
            RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], 
         "}"}]}], "}"}]}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["KKT/IP {f, feasibility} = ", 10], 
   Short[{-7629, {
     0, {-7629, {$CellContext`x1 -> 6.062447939862649, $CellContext`x2 -> 
        3.4329945502102683`}}}}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228998238921*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"conFindMin {f, feasibility} = \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"1", ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "7629.`"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
            RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], 
         "}"}]}], "}"}]}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["conFindMin {f, feasibility} = ", 10], 
   Short[{
    1, {0, {-7629., {$CellContext`x1 -> 6.062447939862649, $CellContext`x2 -> 
        3.4329945502102683`}}}}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228998243804*^9}],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"Entering rankResults...\"\>", "Subsubsection",
   StripOnInput->False],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228998248687*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "7629"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
           RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], 
        "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "7629.`"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
           RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], 
        "}"}]}], "}"}]}], "}"}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228998254546*^9}],

Cell[BoxData[
 TagBox["\<\"Returning rankResults: \"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289982584524`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"low = \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "7629"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
        RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], "}"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\" inside = \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "7629"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
        RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["low = ", 10], 
   Short[{-7629, {$CellContext`x1 -> 6.062447939862649, $CellContext`x2 -> 
      3.4329945502102683`}}, 10], 
   Short[" inside = ", 10], 
   Short[{-7629, {$CellContext`x1 -> 6.062447939862649, $CellContext`x2 -> 
      3.4329945502102683`}}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228998264312*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Returning postprocess: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "7629"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
          RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"True", ",", "\<\"Converged\"\>"}], "}"}]}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Returning postprocess: ", 10], 
   Short[{{-7629, {$CellContext`x1 -> 6.062447939862649, $CellContext`x2 -> 
       3.4329945502102683`}}, {True, "Converged"}}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228998270171*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"PostProc Result: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "7629"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
        RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["PostProc Result: ", 10], 
   Short[{-7629, {$CellContext`x1 -> 6.062447939862649, $CellContext`x2 -> 
      3.4329945502102683`}}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289982740774`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"PostProc Converge: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"True", ",", "\<\"Converged\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["PostProc Converge: ", 10], 
   Short[{True, "Converged"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022899827896*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Result: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "7629.`"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
          RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "7629"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
          RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], 
       "}"}]}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Result: ", 10], 
   Short[{{-7629., {$CellContext`x1 -> 6.062447939862649, $CellContext`x2 -> 
       3.4329945502102683`}}, {-7629, {$CellContext`x1 -> 
       6.062447939862649, $CellContext`x2 -> 3.4329945502102683`}}}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289982848196`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"Entering conViolation...\"\>", "Subsubsection",
   StripOnInput->False],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228998288726*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "7629.`"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
          RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "7629"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
          RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], 
       "}"}]}], "}"}], ",", 
    RowBox[{"{", "}"}], ",", 
    RowBox[{"{", "}"}], ",", 
    RowBox[{"{", "}"}], ",", 
    RowBox[{"{", "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"x1", ",", "x2"}], "}"}], ",", "0.001`", ",", "0.001`"}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228998294585*^9}],

Cell[BoxData[
 TagBox["\<\"Returning conViolation: \"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289982984915`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "7629"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
          RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], 
       "}"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "7629.`"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
          RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], 
       "}"}]}], "}"}]}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228998304351*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Level 2 Postprocess time: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["1.2039999999999935`",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Level 2 Postprocess time: ", 10], 
   Short[1.2039999999999935`, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289983092337`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Level 2 Postprocess Memory: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"-", "643088"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Level 2 Postprocess Memory: ", 10], 
   Short[-643088, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289983141165`*^9}],

Cell[BoxData[
 TagBox["\<\"Returning NM results: \"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289983189993`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "7629"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
            RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], 
         "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "7629.`"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
            RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], 
         "}"}]}], "}"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"True", ",", "\<\"Converged\"\>"}], "}"}]}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228998323882*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"The \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["1",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th result is: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "7629"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
              RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], 
           "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "7629.`"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
              RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], 
           "}"}]}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"True", ",", "\<\"Converged\"\>"}], "}"}]}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["The ", 10], 
   Short[1, 10], 
   Short["th result is: ", 10], 
   Short[{{{
      0, {-7629, {$CellContext`x1 -> 6.062447939862649, $CellContext`x2 -> 
         3.4329945502102683`}}}, {
      0, {-7629., {$CellContext`x1 -> 6.062447939862649, $CellContext`x2 -> 
         3.4329945502102683`}}}}, {True, "Converged"}}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289983297415`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"Raw Results list: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "7629"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
               RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], 
            "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "7629.`"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
               RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], 
            "}"}]}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"True", ",", "\<\"Converged\"\>"}], "}"}]}], "}"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["Raw Results list: ", 10], 
   Short[{{{{
       0, {-7629, {$CellContext`x1 -> 6.062447939862649, $CellContext`x2 -> 
          3.4329945502102683`}}}, {
       0, {-7629., {$CellContext`x1 -> 6.062447939862649, $CellContext`x2 -> 
          3.4329945502102683`}}}}, {True, "Converged"}}}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289983346243`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"Entering rankResults...\"\>", "Subsubsection",
   StripOnInput->False],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289983404837`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "7629"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
           RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], 
        "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "7629.`"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
           RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], 
        "}"}]}], "}"}]}], "}"}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289983453665`*^9}],

Cell[BoxData[
 TagBox["\<\"Returning rankResults: \"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289983502493`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"low = \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "7629"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
        RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], "}"}],
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\" inside = \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "7629"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
        RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["low = ", 10], 
   Short[{-7629, {$CellContext`x1 -> 6.062447939862649, $CellContext`x2 -> 
      3.4329945502102683`}}, 10], 
   Short[" inside = ", 10], 
   Short[{-7629, {$CellContext`x1 -> 6.062447939862649, $CellContext`x2 -> 
      3.4329945502102683`}}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289983561087`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox["\<\"Entering finishUp...\"\>", "Subsubsection",
   StripOnInput->False],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289983609915`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "7629"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
           RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], "}"}],
        ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "7629.`"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
           RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], 
        "}"}]}], "}"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "7629"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
        RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "7629"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
        RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{"{", "True", "}"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{"True", ",", "\<\"Converged\"\>"}], "}"}], "}"}]}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289983658743`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"   We're working with the \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["1",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["\<\"th set of constraints:\"\>",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["   We're working with the ", 10], 
   Short[1, 10], 
   Short["th set of constraints:", 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289983717337`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"   \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", "True", "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["   ", 10], 
   Short[{True}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.63022899837564*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"   \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", 
     RowBox[{"True", ",", "\<\"Converged\"\>"}], "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["   ", 10], 
   Short[{True, "Converged"}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289983805227`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"   Equality constraints: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["   Equality constraints: ", 10], 
   Short[{}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289983854055`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"   Equality values: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["   Equality values: ", 10], 
   Short[{}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289983902884`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"   Equality satisfied: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["   Equality satisfied: ", 10], 
   Short[{}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228998395171*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"   Unsatisfied equality position: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["   Unsatisfied equality position: ", 10], 
   Short[{}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228998400054*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"   Unsatisfied equalities: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["   Unsatisfied equalities: ", 10], 
   Short[{}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228998404937*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"   Unsatisfied inequality position: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["   Unsatisfied inequality position: ", 10], 
   Short[{}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289984098196`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"   Unsatisfied inequalities: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"{", "}"}],
    Short[#, 10]& ]}],
  SequenceForm[
   Short["   Unsatisfied inequalities: ", 10], 
   Short[{}, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289984147024`*^9}],

Cell[BoxData[
 TagBox["\<\"Returning finishUp finishUp: \"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289984186087`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"-", "7629"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
      RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], "}"}],
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228998424468*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"CleanUp Time: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["11.843999999999994`",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["CleanUp Time: ", 10], 
   Short[11.843999999999994`, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.630228998429351*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["\<\"CleanUp Memory: \"\>",
    Short[#, 10]& ], "\[InvisibleSpace]", 
   TagBox["1809160",
    Short[#, 10]& ]}],
  SequenceForm[
   Short["CleanUp Memory: ", 10], 
   Short[1809160, 10]],
  Editable->False]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289984342337`*^9}],

Cell[BoxData[
 TagBox["\<\"Returning AutomaticNM...\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289984391165`*^9}],

Cell[BoxData[
 TagBox["\<\"Returning NMinimize...\"\>",
  Short[#, 10]& ]], "Print",
 CellChangeTimes->{{3.626506142185918*^9, 3.6265061538347197`*^9}, 
   3.6302289984439993`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7629.`", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], ",", 
     RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.6265051892564077`*^9, 3.626505679958888*^9, 3.6265058862069244`*^9, 
   3.626505990752692*^9, {3.6265061470505505`*^9, 3.6265061660802383`*^9}, 
   3.630228998448882*^9}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  RowBox[{"Optimization`NMinimizeDump`$DiagnosticLevel", "=", "0"}], 
  ";"}]], "Input",
 CellChangeTimes->{3.6265061398791327`*^9}],

Cell[BoxData[
 RowBox[{"ClearAll", "[", 
  RowBox[{
  "header", ",", "noM", ",", "noU", ",", "noD", ",", "noAttr", ",", 
   "distanceMatrices", ",", "matchMatrix", ",", "mate", ",", "payoffMatrix", 
   ",", "ineqmembers", ",", "dataArray", ",", "x", ",", "f"}], "]"}]], "Input",
 CellChangeTimes->{{3.6266228146950502`*^9, 3.6266228793669257`*^9}, {
  3.6266229114919257`*^9, 3.6266229118356757`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["More tests 141204_1,2", "Subsubsection",
 CellChangeTimes->{{3.6265220565398808`*^9, 3.626522059475669*^9}, {
  3.6266747806449175`*^9, 3.6266747877542925`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"??", "payoffDM"}]], "Input",
 CellChangeTimes->{{3.6266312394141617`*^9, 3.6266312503047867`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 StyleBox["\<\"payoffDM[m,i,j] returns the payoff of i-upstream and \
j-upstream in the m-market.
\\nIt is used in the case of precomputed data. It is assumed that the \
distanceMatrices have been already assigned.\"\>", "MSG"]], "Print", \
"PrintUsage",
 CellChangeTimes->{3.6266724574261675`*^9},
 CellTags->"Info3626679657-1845125"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {GridBox[{
       {
        RowBox[{
         RowBox[{"payoffDM", "[", 
          RowBox[{"m_", ",", "i_", ",", "j_"}], "]"}], ":=", 
         RowBox[{
          RowBox[{"Prepend", "[", 
           RowBox[{
            RowBox[{"Cx", "[", 
             RowBox[{"noAttr", "-", "1"}], "]"}], ",", "1"}], "]"}], ".", 
          RowBox[{"distanceMatrices", "\[LeftDoubleBracket]", 
           RowBox[{"m", ",", "i", ",", "j"}], "\[RightDoubleBracket]"}]}]}]}
      },
      BaselinePosition->{Baseline, {1, 1}},
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxItemSize->{"Columns" -> {{
           Scaled[0.999]}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}}],
  Definition[$CellContext`payoffDM],
  Editable->False]], "Print",
 CellChangeTimes->{3.6266724574730425`*^9},
 CellTags->"Info3626679657-1845125"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"??", "payoff"}]], "Input",
 CellChangeTimes->{{3.6266313724922867`*^9, 3.6266313871954117`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 StyleBox["\<\"payoff[m,i,j] returns the payoff of i-upstream and j-upstream \
in the m-market.
\\nIt is used in the case of importing streams (not precomputed). It is \
assumed that u and d have been already assigned.\"\>", "MSG"]], "Print", \
"PrintUsage",
 CellChangeTimes->{3.6266724605667925`*^9},
 CellTags->"Info3626679660-1845125"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {GridBox[{
       {
        RowBox[{
         RowBox[{"payoff", "[", 
          RowBox[{"m_", ",", "i_", ",", "j_"}], "]"}], ":=", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Prepend", "[", 
             RowBox[{
              RowBox[{"Cx", "[", 
               RowBox[{"noAttr", "-", "1"}], "]"}], ",", "1"}], "]"}], " ", 
            RowBox[{"u", "\[LeftDoubleBracket]", 
             RowBox[{"m", ",", "i"}], "\[RightDoubleBracket]"}]}], ")"}], ".", 
          RowBox[{"d", "\[LeftDoubleBracket]", 
           RowBox[{"m", ",", "j"}], "\[RightDoubleBracket]"}]}]}]}
      },
      BaselinePosition->{Baseline, {1, 1}},
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxItemSize->{"Columns" -> {{
           Scaled[0.999]}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}}],
  Definition[$CellContext`payoff],
  Editable->False]], "Print",
 CellChangeTimes->{3.6266724605980425`*^9},
 CellTags->"Info3626679660-1845125"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"??", "CpayoffMatrix"}]], "Input",
 CellChangeTimes->{{3.6266724928011675`*^9, 3.6266724949574175`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 StyleBox["\<\"payoffMatrix=CpayoffMatrix[payoff(or payoffDM),noM,noU,noD] \
calculates and assigns the payoffMatrix.  \\nIn case of separated streams \
payoff is used and in the case of precomputed data payoffDM is used.\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.6266724955667925`*^9},
 CellTags->"Info3626679695-1845125"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {GridBox[{
       {
        RowBox[{
         RowBox[{"CpayoffMatrix", "[", 
          RowBox[{"payoff_", ",", 
           RowBox[{"noM_", ":", "noM"}], ",", 
           RowBox[{"noU_", ":", "noU"}], ",", 
           RowBox[{"noD_", ":", "noD"}], ",", 
           RowBox[{"parallel_", ":", "False"}]}], "]"}], ":=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"!", "parallel"}], ",", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"payoff", "[", 
              RowBox[{"m", ",", "i", ",", "j"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"m", ",", "1", ",", "noM"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", 
               RowBox[{
               "noU", "\[LeftDoubleBracket]", "m", 
                "\[RightDoubleBracket]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"j", ",", 
               RowBox[{
               "noD", "\[LeftDoubleBracket]", "m", 
                "\[RightDoubleBracket]"}]}], "}"}]}], "]"}], ",", 
           RowBox[{"ParallelTable", "[", 
            RowBox[{
             RowBox[{"payoff", "[", 
              RowBox[{"m", ",", "i", ",", "j"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"m", ",", "1", ",", "noM"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", 
               RowBox[{
               "noU", "\[LeftDoubleBracket]", "m", 
                "\[RightDoubleBracket]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"j", ",", 
               RowBox[{
               "noD", "\[LeftDoubleBracket]", "m", 
                "\[RightDoubleBracket]"}]}], "}"}]}], "]"}]}], "]"}]}]}
      },
      BaselinePosition->{Baseline, {1, 1}},
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxItemSize->{"Columns" -> {{
           Scaled[0.999]}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}}],
  Definition[$CellContext`CpayoffMatrix],
  Editable->False]], "Print",
 CellChangeTimes->{3.6266724955824175`*^9},
 CellTags->"Info3626679695-1845125"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"??", "Ctotalpayoff"}]], "Input",
 CellChangeTimes->{{3.6266749871292925`*^9, 3.6266749911917925`*^9}}],

Cell[CellGroupData[{

Cell["Global`Ctotalpayoff", "Print", "PrintUsage",
 CellChangeTimes->{3.6266750662855425`*^9},
 CellTags->"Info3626682266-2754311"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {GridBox[{
       {
        RowBox[{
         RowBox[{"Ctotalpayoff", "[", 
          RowBox[{"payoffobject_", ",", "mates_"}], "]"}], ":=", 
         RowBox[{"Switch", "[", 
          RowBox[{
           RowBox[{"Head", "[", "payoffobject", "]"}], ",", 
           "\[IndentingNewLine]", "Symbol", ",", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"payoffobject", "@@", "#1"}], "&"}], ",", "mates", ",", 
             RowBox[{"{", "2", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
           "List", ",", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Part", "@@", 
               RowBox[{"Join", "[", 
                RowBox[{
                 RowBox[{"{", "payoffobject", "}"}], ",", "#1"}], "]"}]}], 
              "&"}], ",", "mates", ",", 
             RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}]}
      },
      BaselinePosition->{Baseline, {1, 1}},
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxItemSize->{"Columns" -> {{
           Scaled[0.999]}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}}],
  Definition[$CellContext`Ctotalpayoff],
  Editable->False]], "Print",
 CellChangeTimes->{3.6266750663011675`*^9},
 CellTags->"Info3626682266-2754311"]
}, Open  ]]
}, Open  ]],

Cell["noAttr and distanceMatrices ARE DECLARED GLOBALY", "Text",
 CellChangeTimes->{{3.6266312835391617`*^9, 3.6266313158672867`*^9}, 
   3.6266313523829117`*^9, {3.6266747199261675`*^9, 3.6266747404886675`*^9}, {
   3.6266752112542925`*^9, 3.6266752135199175`*^9}},
 Background->RGBColor[1, 1, 0]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "testroutine", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testroutine", "[", "filename_", "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"header", ",", "noM", ",", "noU", ",", "noD", 
      RowBox[{"(*", 
       RowBox[{",", "noAttr"}], "*)"}], 
      RowBox[{"(*", 
       RowBox[{",", "distanceMatrices"}], "*)"}], ",", "matchMatrix", ",", 
      "mate", ",", "payoffMatrix", ",", "ineqmembers", ",", "dataArray", ",", 
      "x", ",", "f"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "header", ",", "noM", ",", "noU", ",", "noD", ",", "noAttr", ",", 
        "distanceMatrices", ",", "matchMatrix", ",", "mate"}], "}"}], "=", 
      RowBox[{"import", "[", 
       RowBox[{"filename", ",", "\"\<precomp\>\""}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"payoffMatrix", "=", 
      RowBox[{"CpayoffMatrix", "[", 
       RowBox[{"payoffDM", ",", "noM", ",", "noU", ",", "noD"}], "]"}]}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"ineqmembers", "=", 
      RowBox[{"Cineqmembers", "[", "mate", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"dataArray", "=", 
      RowBox[{"CdataArray", "[", 
       RowBox[{"payoffMatrix", ",", "ineqmembers", ",", 
        RowBox[{"Cx", "[", 
         RowBox[{"noAttr", "-", "1"}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"x", "=", 
      RowBox[{"Cx", "[", 
       RowBox[{"noAttr", "-", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"f", "=", 
      RowBox[{
       RowBox[{"objective", "[", 
        RowBox[{"dataArray", ",", 
         RowBox[{"Sequence", "@@", "#"}]}], "]"}], "&"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"AbsoluteTiming", "@", 
        RowBox[{"optimize", "[", 
         RowBox[{"f", ",", "x", ",", "#", ",", 
          RowBox[{"{", "}"}], ",", "True", ",", "True"}], "]"}]}], "&"}], "/@", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Automatic\>\"", ",", "\"\<DifferentialEvolution\>\"", ",", 
        "\"\<SimulatedAnnealing\>\"", ",", "\"\<RandomSearch\>\"", ",", 
        "\"\<NelderMead\>\"", ",", "\"\<ParticleSwarmOptimization\>\""}], 
       "}"}]}]}]}], "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellChangeTimes->{{3.626171011874079*^9, 3.626171023855977*^9}, 
   3.626504642775203*^9, {3.626522096282222*^9, 3.6265221619060383`*^9}, {
   3.626522224500779*^9, 3.626522317688379*^9}, {3.6265223639185314`*^9, 
   3.6265223683853226`*^9}, 3.6266229970544257`*^9, {3.6266230430075502`*^9, 
   3.6266230482575502`*^9}, {3.6266231330231757`*^9, 
   3.6266231435388002`*^9}, {3.6266307182579117`*^9, 
   3.6266307255704117`*^9}, {3.6266307967110367`*^9, 
   3.6266308439922867`*^9}, {3.6266309324766617`*^9, 
   3.6266309701641617`*^9}, {3.6266310622422867`*^9, 
   3.6266310651954117`*^9}, {3.6266719965824175`*^9, 
   3.6266720194886675`*^9}, {3.6266723828792925`*^9, 
   3.6266724049261675`*^9}, {3.6266724747386675`*^9, 
   3.6266724794261675`*^9}, {3.6266725939417925`*^9, 
   3.6266725967542925`*^9}, {3.6266726578792925`*^9, 
   3.6266726710824175`*^9}, {3.6266727265511675`*^9, 
   3.6266727537230425`*^9}, {3.6266728123324175`*^9, 3.6266728128324175`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"testroutine", "[", 
   RowBox[{
    RowBox[{"NotebookDirectory", "[", "]"}], "<>", "\"\</import/\>\"", "<>", 
    "\"\<dataformathematica5.dat\>\""}], "]"}], "//", "TableForm"}]], "Input"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {"6.7732578999999999425`6.851397525489337", GridBox[{
       {"\<\"Automatic\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", \
"\<\"\"\>"},
       {"7156.`", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "4.664586543713186`"}], 
        RowBox[{"x2", "\[Rule]", 
         RowBox[{"-", "3.033801439563864`"}]}], 
        RowBox[{"x3", "\[Rule]", "10.676304219461926`"}], 
        RowBox[{"x4", "\[Rule]", 
         RowBox[{"-", "0.40893371881088947`"}]}], 
        RowBox[{"x5", "\[Rule]", 
         RowBox[{"-", "3.840268215322684`"}]}], 
        RowBox[{"x6", "\[Rule]", 
         RowBox[{"-", "4.56843708720028`"}]}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"95.7997301999999990585`8.001964199259879", GridBox[{
       {"\<\"DifferentialEvolution\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", \
"\<\"\"\>", "\<\"\"\>"},
       {"7599.`", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "0.0041249016091614195`"}], 
        RowBox[{"x2", "\[Rule]", 
         RowBox[{"-", "0.5373592005589294`"}]}], 
        RowBox[{"x3", "\[Rule]", "4.9330197364668225`"}], 
        RowBox[{"x4", "\[Rule]", 
         RowBox[{"-", "3.0870685179099064`"}]}], 
        RowBox[{"x5", "\[Rule]", "1.7805801829855812`"}], 
        RowBox[{"x6", "\[Rule]", 
         RowBox[{"-", "0.3859984940225825`"}]}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"13.1872299000000001712`7.140753490820663", GridBox[{
       {"\<\"SimulatedAnnealing\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\
\"\"\>", "\<\"\"\>"},
       {"7157.`", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "0.5827394642117482`"}], 
        RowBox[{"x2", "\[Rule]", 
         RowBox[{"-", "2.0020824502405863`"}]}], 
        RowBox[{"x3", "\[Rule]", "3.0236451505363764`"}], 
        RowBox[{"x4", "\[Rule]", 
         RowBox[{"-", "0.4540849478953053`"}]}], 
        RowBox[{"x5", "\[Rule]", 
         RowBox[{"-", "0.17151111638835165`"}]}], 
        RowBox[{"x6", "\[Rule]", 
         RowBox[{"-", "0.4813892709981624`"}]}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"18.2344460999999995465`7.281492488751354", GridBox[{
       {"\<\"RandomSearch\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", \
"\<\"\"\>", "\<\"\"\>"},
       {"7134.`", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "0.47319963823682654`"}], 
        RowBox[{"x2", "\[Rule]", 
         RowBox[{"-", "0.5960386223213378`"}]}], 
        RowBox[{"x3", "\[Rule]", "0.7525347063866792`"}], 
        RowBox[{"x4", "\[Rule]", 
         RowBox[{"-", "0.40757500377554423`"}]}], 
        RowBox[{"x5", "\[Rule]", 
         RowBox[{"-", "0.17446892818468981`"}]}], 
        RowBox[{"x6", "\[Rule]", 
         RowBox[{"-", "0.4105157743822465`"}]}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"6.7304687000000003039`6.848645222189472", GridBox[{
       {"\<\"NelderMead\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", \
"\<\"\"\>"},
       {"7156.`", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "4.664586543713186`"}], 
        RowBox[{"x2", "\[Rule]", 
         RowBox[{"-", "3.033801439563864`"}]}], 
        RowBox[{"x3", "\[Rule]", "10.676304219461926`"}], 
        RowBox[{"x4", "\[Rule]", 
         RowBox[{"-", "0.40893371881088947`"}]}], 
        RowBox[{"x5", "\[Rule]", 
         RowBox[{"-", "3.840268215322684`"}]}], 
        RowBox[{"x6", "\[Rule]", 
         RowBox[{"-", "4.56843708720028`"}]}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"178.0853759999999965657`8.271228170849175", GridBox[{
       {"\<\"ParticleSwarmOptimization\"\>", "\<\"\"\>", "\<\"\"\>", \
"\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
       {"7162", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "7.337152017936243`"}], 
        RowBox[{"x2", "\[Rule]", 
         RowBox[{"-", "2.0117273561959133`"}]}], 
        RowBox[{"x3", "\[Rule]", "6.020931553608989`"}], 
        RowBox[{"x4", "\[Rule]", 
         RowBox[{"-", "0.252302929867409`"}]}], 
        RowBox[{"x5", "\[Rule]", 
         RowBox[{"-", "2.2876714606562385`"}]}], 
        RowBox[{"x6", "\[Rule]", "0.5027450086935704`"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  TableForm[{{
    6.7732578999999999425`6.851397525489337, {
     "Automatic", 
      7156., {$CellContext`x1 -> 
       4.664586543713186, $CellContext`x2 -> -3.033801439563864, \
$CellContext`x3 -> 
       10.676304219461926`, $CellContext`x4 -> -0.40893371881088947`, \
$CellContext`x5 -> -3.840268215322684, $CellContext`x6 -> \
-4.56843708720028}}}, {
    95.7997301999999990585`8.001964199259879, {
     "DifferentialEvolution", 
      7599., {$CellContext`x1 -> 
       0.0041249016091614195`, $CellContext`x2 -> -0.5373592005589294, \
$CellContext`x3 -> 
       4.9330197364668225`, $CellContext`x4 -> -3.0870685179099064`, \
$CellContext`x5 -> 
       1.7805801829855812`, $CellContext`x6 -> -0.3859984940225825}}}, {
    13.1872299000000001712`7.140753490820663, {
     "SimulatedAnnealing", 
      7157., {$CellContext`x1 -> 
       0.5827394642117482, $CellContext`x2 -> -2.0020824502405863`, \
$CellContext`x3 -> 
       3.0236451505363764`, $CellContext`x4 -> -0.4540849478953053, \
$CellContext`x5 -> -0.17151111638835165`, $CellContext`x6 -> \
-0.4813892709981624}}}, {
    18.2344460999999995465`7.281492488751354, {
     "RandomSearch", 
      7134., {$CellContext`x1 -> 
       0.47319963823682654`, $CellContext`x2 -> -0.5960386223213378, \
$CellContext`x3 -> 
       0.7525347063866792, $CellContext`x4 -> -0.40757500377554423`, \
$CellContext`x5 -> -0.17446892818468981`, $CellContext`x6 -> \
-0.4105157743822465}}}, {
    6.7304687000000003039`6.848645222189472, {
     "NelderMead", 
      7156., {$CellContext`x1 -> 
       4.664586543713186, $CellContext`x2 -> -3.033801439563864, \
$CellContext`x3 -> 
       10.676304219461926`, $CellContext`x4 -> -0.40893371881088947`, \
$CellContext`x5 -> -3.840268215322684, $CellContext`x6 -> \
-4.56843708720028}}}, {
    178.0853759999999965657`8.271228170849175, {
     "ParticleSwarmOptimization", 
      7162, {$CellContext`x1 -> 
       7.337152017936243, $CellContext`x2 -> -2.0117273561959133`, \
$CellContext`x3 -> 
       6.020931553608989, $CellContext`x4 -> -0.252302929867409, \
$CellContext`x5 -> -2.2876714606562385`, $CellContext`x6 -> 
       0.5027450086935704}}}}]]], "Output",
 CellChangeTimes->{3.626749747572179*^9, 3.626750155130787*^9, 
  3.626751147260681*^9, 3.626751489969589*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"SeedRandom", "[", "1234", "]"}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"testroutine", "[", 
   RowBox[{
    RowBox[{"NotebookDirectory", "[", "]"}], "<>", "\"\</import/\>\"", "<>", 
    "\"\<round1m1-1.xls.pre.dat\>\""}], "]"}], "//", "TableForm"}]], "Input",
 CellChangeTimes->{{3.6265223263282366`*^9, 3.626522335887092*^9}, {
  3.6265223811633306`*^9, 3.626522383467304*^9}, {3.626623568337414*^9, 
  3.6266235758842883`*^9}, {3.626623696274914*^9, 3.6266237025717883`*^9}}],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {"2.2915640000000001564`6.380731904233637", GridBox[{
       {"\<\"Automatic\"\>", "\<\"\"\>"},
       {"29960.`", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "3.2090869148586503`"}], 
        RowBox[{"x2", "\[Rule]", "2.2144514758512943`"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"10.3013931999999996947`7.033495877611504", GridBox[{
       {"\<\"DifferentialEvolution\"\>", "\<\"\"\>"},
       {"29965.`", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "3.646690661752024`"}], 
        RowBox[{"x2", "\[Rule]", "2.6830119769249214`"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"2.4788752000000000564`6.414854575862017", GridBox[{
       {"\<\"SimulatedAnnealing\"\>", "\<\"\"\>"},
       {"29963.`", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "3.6273810623007234`"}], 
        RowBox[{"x2", "\[Rule]", "2.681442595020003`"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"2.897499600000000175`6.482623297960881", GridBox[{
       {"\<\"RandomSearch\"\>", "\<\"\"\>"},
       {"29494.`", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "0.9186212148724066`"}], 
        RowBox[{"x2", "\[Rule]", "0.7166887533790196`"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"2.0940888000000001945`6.341595007304539", GridBox[{
       {"\<\"NelderMead\"\>", "\<\"\"\>"},
       {"29960.`", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "3.2090869148586503`"}], 
        RowBox[{"x2", "\[Rule]", "2.2144514758512943`"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"2.9151474999999997806`6.485260447268464", GridBox[{
       {"\<\"ParticleSwarmOptimization\"\>", "\<\"\"\>"},
       {"29965", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "3.806272002062654`"}], 
        RowBox[{"x2", "\[Rule]", "2.914218385630536`"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  TableForm[{{
    2.2915640000000001564`6.380731904233637, {
     "Automatic", 
      29960., {$CellContext`x1 -> 3.2090869148586503`, $CellContext`x2 -> 
       2.2144514758512943`}}}, {
    10.3013931999999996947`7.033495877611504, {
     "DifferentialEvolution", 
      29965., {$CellContext`x1 -> 3.646690661752024, $CellContext`x2 -> 
       2.6830119769249214`}}}, {
    2.4788752000000000564`6.414854575862017, {
     "SimulatedAnnealing", 
      29963., {$CellContext`x1 -> 3.6273810623007234`, $CellContext`x2 -> 
       2.681442595020003}}}, {
    2.897499600000000175`6.482623297960881, {
     "RandomSearch", 
      29494., {$CellContext`x1 -> 0.9186212148724066, $CellContext`x2 -> 
       0.7166887533790196}}}, {
    2.0940888000000001945`6.341595007304539, {
     "NelderMead", 
      29960., {$CellContext`x1 -> 3.2090869148586503`, $CellContext`x2 -> 
       2.2144514758512943`}}}, {
    2.9151474999999997806`6.485260447268464, {
     "ParticleSwarmOptimization", 
      29965, {$CellContext`x1 -> 3.806272002062654, $CellContext`x2 -> 
       2.914218385630536}}}}]]], "Output",
 CellChangeTimes->{3.626522433689296*^9, 3.6265227994444466`*^9, 
  3.6266230340544257`*^9, 3.6266231182106757`*^9, 3.6266231779138002`*^9, 
  3.6266233098825502`*^9, 3.626623669993664*^9, 3.626623760618664*^9, 
  3.6266306926797867`*^9, 3.6266768696136675`*^9, 3.6267517387775135`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"testroutine", "[", 
   RowBox[{
    RowBox[{"NotebookDirectory", "[", "]"}], "<>", "\"\</import/\>\"", "<>", 
    "\"\<round1m2-1.xls.pre.dat\>\""}], "]"}], "//", "TableForm"}]], "Input",
 CellChangeTimes->{3.6265224108689833`*^9}],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {"0.5625`5.770722440063024", GridBox[{
       {"\<\"Automatic\"\>", "\<\"\"\>"},
       {"7629.`", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], 
        RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"1.75`6.2636379619659195", GridBox[{
       {"\<\"DifferentialEvolution\"\>", "\<\"\"\>"},
       {"7630.`", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "4.290040651724732`"}], 
        RowBox[{"x2", "\[Rule]", "3.2143481872688393`"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"0.546875`5.758487983646013", GridBox[{
       {"\<\"SimulatedAnnealing\"\>", "\<\"\"\>"},
       {"7629.`", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "4.672413195072854`"}], 
        RowBox[{"x2", "\[Rule]", "3.257092027967423`"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"0.65625`5.837669229693637", GridBox[{
       {"\<\"RandomSearch\"\>", "\<\"\"\>"},
       {"7483.`", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "0.8659151619584017`"}], 
        RowBox[{"x2", "\[Rule]", "0.7673406197846462`"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"0.515625`5.732933879173625", GridBox[{
       {"\<\"NelderMead\"\>", "\<\"\"\>"},
       {"7629.`", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "6.062447939862649`"}], 
        RowBox[{"x2", "\[Rule]", "3.4329945502102683`"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"1.09375`6.0595179793099945", GridBox[{
       {"\<\"ParticleSwarmOptimization\"\>", "\<\"\"\>"},
       {"7629", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "6.036627322956493`"}], 
        RowBox[{"x2", "\[Rule]", "3.4217336835567718`"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  TableForm[{{
    0.5625`5.770722440063024, {
     "Automatic", 
      7629., {$CellContext`x1 -> 6.062447939862649, $CellContext`x2 -> 
       3.4329945502102683`}}}, {
    1.75`6.2636379619659195, {
     "DifferentialEvolution", 
      7630., {$CellContext`x1 -> 4.290040651724732, $CellContext`x2 -> 
       3.2143481872688393`}}}, {
    0.546875`5.758487983646013, {
     "SimulatedAnnealing", 
      7629., {$CellContext`x1 -> 4.672413195072854, $CellContext`x2 -> 
       3.257092027967423}}}, {
    0.65625`5.837669229693637, {
     "RandomSearch", 
      7483., {$CellContext`x1 -> 0.8659151619584017, $CellContext`x2 -> 
       0.7673406197846462}}}, {
    0.515625`5.732933879173625, {
     "NelderMead", 
      7629., {$CellContext`x1 -> 6.062447939862649, $CellContext`x2 -> 
       3.4329945502102683`}}}, {
    1.09375`6.0595179793099945, {
     "ParticleSwarmOptimization", 
      7629, {$CellContext`x1 -> 6.036627322956493, $CellContext`x2 -> 
       3.4217336835567718`}}}}]]], "Output",
 CellChangeTimes->{3.626522459560316*^9, 3.6266232133669257`*^9, 
  3.6266233206169257`*^9, 3.6266237716967883`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"testroutine", "[", 
   RowBox[{
    RowBox[{"NotebookDirectory", "[", "]"}], "<>", "\"\</import/\>\"", "<>", 
    "\"\<round1m5-1.xls.pre.dat\>\""}], "]"}], "//", "TableForm"}]], "Input",
 CellChangeTimes->{3.62652242455453*^9}],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {"0.140625`5.168662448735062", GridBox[{
       {"\<\"Automatic\"\>", "\<\"\"\>"},
       {"1211.`", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "7.908101796710002`"}], 
        RowBox[{"x2", "\[Rule]", "3.9977803275471646`"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"0.484375`5.70578163313001", GridBox[{
       {"\<\"DifferentialEvolution\"\>", "\<\"\"\>"},
       {"1211.`", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "5.2947948184438305`"}], 
        RowBox[{"x2", "\[Rule]", "2.822188588163719`"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"0.125`5.11750992628768", GridBox[{
       {"\<\"SimulatedAnnealing\"\>", "\<\"\"\>"},
       {"1211.`", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "2.9387921633806333`"}], 
        RowBox[{"x2", "\[Rule]", "2.0575876105729765`"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"0.125`5.11750992628768", GridBox[{
       {"\<\"RandomSearch\"\>", "\<\"\"\>"},
       {"1171.`", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "0.9186212148724066`"}], 
        RowBox[{"x2", "\[Rule]", "0.7166887533790196`"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"0.140625`5.168662448735062", GridBox[{
       {"\<\"NelderMead\"\>", "\<\"\"\>"},
       {"1211.`", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "7.908101796710002`"}], 
        RowBox[{"x2", "\[Rule]", "3.9977803275471646`"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"0.59375`5.794203535912547", GridBox[{
       {"\<\"ParticleSwarmOptimization\"\>", "\<\"\"\>"},
       {"1211", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "5.348721254449115`"}], 
        RowBox[{"x2", "\[Rule]", "2.8398438980098724`"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  TableForm[{{
    0.140625`5.168662448735062, {
     "Automatic", 
      1211., {$CellContext`x1 -> 7.908101796710002, $CellContext`x2 -> 
       3.9977803275471646`}}}, {
    0.484375`5.70578163313001, {
     "DifferentialEvolution", 
      1211., {$CellContext`x1 -> 5.2947948184438305`, $CellContext`x2 -> 
       2.822188588163719}}}, {
    0.125`5.11750992628768, {
     "SimulatedAnnealing", 
      1211., {$CellContext`x1 -> 2.9387921633806333`, $CellContext`x2 -> 
       2.0575876105729765`}}}, {
    0.125`5.11750992628768, {
     "RandomSearch", 
      1171., {$CellContext`x1 -> 0.9186212148724066, $CellContext`x2 -> 
       0.7166887533790196}}}, {
    0.140625`5.168662448735062, {
     "NelderMead", 
      1211., {$CellContext`x1 -> 7.908101796710002, $CellContext`x2 -> 
       3.9977803275471646`}}}, {
    0.59375`5.794203535912547, {
     "ParticleSwarmOptimization", 
      1211, {$CellContext`x1 -> 5.348721254449115, $CellContext`x2 -> 
       2.8398438980098724`}}}}]]], "Output",
 CellChangeTimes->{3.6265224662457385`*^9, 3.6266233280700502`*^9, 
  3.6266237790405383`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"testroutine", "[", 
   RowBox[{
    RowBox[{"NotebookDirectory", "[", "]"}], "<>", "\"\</import/\>\"", "<>", 
    "\"\<round1m10-1.xls.pre.dat\>\""}], "]"}], "//", "TableForm"}]], "Input",
 CellChangeTimes->{{3.6265224307596083`*^9, 3.6265224310428114`*^9}}],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {"0.0418938000000000019`4.642749668345604", GridBox[{
       {"\<\"Automatic\"\>", "\<\"\"\>"},
       {"332.`", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "4.8173119137507125`"}], 
        RowBox[{"x2", "\[Rule]", "2.7117359853520715`"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"0.3877862000000000253`5.609192263224762", GridBox[{
       {"\<\"DifferentialEvolution\"\>", "\<\"\"\>"},
       {"332.`", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "5.423056460019032`"}], 
        RowBox[{"x2", "\[Rule]", "3.4451992754744243`"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"0.0977521999999999974`5.010726453640198", GridBox[{
       {"\<\"SimulatedAnnealing\"\>", "\<\"\"\>"},
       {"329.`", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "3.7280362495003674`"}], 
        RowBox[{"x2", "\[Rule]", "1.905027681944536`"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"0.1020490000000000008`5.029408666607953", GridBox[{
       {"\<\"RandomSearch\"\>", "\<\"\"\>"},
       {"309.`", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "0.9186212148724066`"}], 
        RowBox[{"x2", "\[Rule]", "0.7166887533790196`"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"0.0526358000000000034`4.741881141347618", GridBox[{
       {"\<\"NelderMead\"\>", "\<\"\"\>"},
       {"332.`", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "4.8173119137507125`"}], 
        RowBox[{"x2", "\[Rule]", "2.7117359853520715`"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"0.6316296000000000133`5.821062387395243", GridBox[{
       {"\<\"ParticleSwarmOptimization\"\>", "\<\"\"\>"},
       {"332", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "4.4972152170778905`"}], 
        RowBox[{"x2", "\[Rule]", "3.060289782285711`"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  TableForm[{{
    0.0418938000000000019`4.642749668345604, {
     "Automatic", 
      332., {$CellContext`x1 -> 4.8173119137507125`, $CellContext`x2 -> 
       2.7117359853520715`}}}, {
    0.3877862000000000253`5.609192263224762, {
     "DifferentialEvolution", 
      332., {$CellContext`x1 -> 5.423056460019032, $CellContext`x2 -> 
       3.4451992754744243`}}}, {
    0.0977521999999999974`5.010726453640198, {
     "SimulatedAnnealing", 
      329., {$CellContext`x1 -> 3.7280362495003674`, $CellContext`x2 -> 
       1.905027681944536}}}, {
    0.1020490000000000008`5.029408666607953, {
     "RandomSearch", 
      309., {$CellContext`x1 -> 0.9186212148724066, $CellContext`x2 -> 
       0.7166887533790196}}}, {
    0.0526358000000000034`4.741881141347618, {
     "NelderMead", 
      332., {$CellContext`x1 -> 4.8173119137507125`, $CellContext`x2 -> 
       2.7117359853520715`}}}, {
    0.6316296000000000133`5.821062387395243, {
     "ParticleSwarmOptimization", 
      332, {$CellContext`x1 -> 4.4972152170778905`, $CellContext`x2 -> 
       3.060289782285711}}}}]]], "Output",
 CellChangeTimes->{
  3.6265224718624907`*^9, 3.6266233348825502`*^9, 3.626623786149914*^9, 
   3.626707387097345*^9, 3.6267080671587515`*^9, {3.6267080978237906`*^9, 
   3.626708108522366*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"testroutine", "[", 
   RowBox[{
    RowBox[{"NotebookDirectory", "[", "]"}], "<>", "\"\</import/\>\"", "<>", 
    "\"\<round1m10-10.xls.pre.dat\>\""}], "]"}], "//", "TableForm"}]], "Input",
 CellChangeTimes->{{3.6265224568079915`*^9, 3.6265224586781735`*^9}}],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {"2.65625`6.444868860674011", GridBox[{
       {"\<\"Automatic\"\>", "\<\"\"\>"},
       {"30550.`", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "3.81257581121738`"}], 
        RowBox[{"x2", "\[Rule]", "2.690429796153129`"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"8.90625`6.970294794968229", GridBox[{
       {"\<\"DifferentialEvolution\"\>", "\<\"\"\>"},
       {"30551.`", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "3.795875842412239`"}], 
        RowBox[{"x2", "\[Rule]", "2.6684242377735647`"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"1.984375`6.318223660251694", GridBox[{
       {"\<\"SimulatedAnnealing\"\>", "\<\"\"\>"},
       {"30550.`", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "3.718889526305182`"}], 
        RowBox[{"x2", "\[Rule]", "2.486424864963069`"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"3.15625`6.519771308742361", GridBox[{
       {"\<\"RandomSearch\"\>", "\<\"\"\>"},
       {"30456.`", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "0.8659151619584017`"}], 
        RowBox[{"x2", "\[Rule]", "0.7673406197846462`"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"2.59375`6.434528027335792", GridBox[{
       {"\<\"NelderMead\"\>", "\<\"\"\>"},
       {"30550.`", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "3.81257581121738`"}], 
        RowBox[{"x2", "\[Rule]", "2.690429796153129`"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"55.53125`7.765137362765019", GridBox[{
       {"\<\"ParticleSwarmOptimization\"\>", "\<\"\"\>"},
       {"30550", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "3.741669762580953`"}], 
        RowBox[{"x2", "\[Rule]", "2.4935708665997467`"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  TableForm[{{
    2.65625`6.444868860674011, {
     "Automatic", 
      30550., {$CellContext`x1 -> 3.81257581121738, $CellContext`x2 -> 
       2.690429796153129}}}, {
    8.90625`6.970294794968229, {
     "DifferentialEvolution", 
      30551., {$CellContext`x1 -> 3.795875842412239, $CellContext`x2 -> 
       2.6684242377735647`}}}, {
    1.984375`6.318223660251694, {
     "SimulatedAnnealing", 
      30550., {$CellContext`x1 -> 3.718889526305182, $CellContext`x2 -> 
       2.486424864963069}}}, {
    3.15625`6.519771308742361, {
     "RandomSearch", 
      30456., {$CellContext`x1 -> 0.8659151619584017, $CellContext`x2 -> 
       0.7673406197846462}}}, {
    2.59375`6.434528027335792, {
     "NelderMead", 
      30550., {$CellContext`x1 -> 3.81257581121738, $CellContext`x2 -> 
       2.690429796153129}}}, {
    55.53125`7.765137362765019, {
     "ParticleSwarmOptimization", 
      30550, {$CellContext`x1 -> 3.741669762580953, $CellContext`x2 -> 
       2.4935708665997467`}}}}]]], "Output",
 CellChangeTimes->{3.6265225764111605`*^9, 3.6265227156484933`*^9, 
  3.626623423462414*^9, 3.626623873118664*^9}]
}, Open  ]],

Cell["TODO : CHANGE PARTICLE OPTIMIZATION RANGE! (MIN AND MAX)", "Text",
 CellChangeTimes->{{3.62662403448365*^9, 3.6266240533903112`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"testroutine", "[", 
   RowBox[{
    RowBox[{"NotebookDirectory", "[", "]"}], "<>", "\"\</import/\>\"", "<>", 
    "\"\<precomp_testdata.dat\>\""}], "]"}], "//", "TableForm"}]], "Input"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {"0.046875`4.691541194015399", GridBox[{
       {"\<\"Automatic\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
       {"86.`", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "2.0003194310929855`"}], 
        RowBox[{"x2", "\[Rule]", 
         RowBox[{"-", "3.850885219438706`"}]}], 
        RowBox[{"x3", "\[Rule]", "4.046243907015815`"}], 
        RowBox[{"x4", "\[Rule]", 
         RowBox[{"-", "2.4223894120862415`"}]}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"0.5`5.719569917615643", GridBox[{
       {"\<\"DifferentialEvolution\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
       {"94.`", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "0.5581258162013214`"}], 
        RowBox[{"x2", "\[Rule]", 
         RowBox[{"-", "4.800116600381188`"}]}], 
        RowBox[{"x3", "\[Rule]", "1.5099068783225753`"}], 
        RowBox[{"x4", "\[Rule]", "0.49599482885320956`"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"0.0625`4.816479930623699", GridBox[{
       {"\<\"SimulatedAnnealing\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
       {"90.`", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", 
         RowBox[{"-", "0.07025634862061597`"}]}], 
        RowBox[{"x2", "\[Rule]", 
         RowBox[{"-", "0.10692796349018996`"}]}], 
        RowBox[{"x3", "\[Rule]", "3.564716255785826`"}], 
        RowBox[{"x4", "\[Rule]", 
         RowBox[{"-", "0.75497851255751`"}]}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"0.125`5.11750992628768", GridBox[{
       {"\<\"RandomSearch\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
       {"83.`", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", 
         RowBox[{"-", "0.00887784484149931`"}]}], 
        RowBox[{"x2", "\[Rule]", 
         RowBox[{"-", "0.3974634242404692`"}]}], 
        RowBox[{"x3", "\[Rule]", "0.9768116362071552`"}], 
        RowBox[{"x4", "\[Rule]", 
         RowBox[{"-", "0.016830921823386358`"}]}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"0.046875`4.691541194015399", GridBox[{
       {"\<\"NelderMead\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
       {"86.`", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "2.0003194310929855`"}], 
        RowBox[{"x2", "\[Rule]", 
         RowBox[{"-", "3.850885219438706`"}]}], 
        RowBox[{"x3", "\[Rule]", "4.046243907015815`"}], 
        RowBox[{"x4", "\[Rule]", 
         RowBox[{"-", "2.4223894120862415`"}]}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]},
    {"2.453125`6.410319591704971", GridBox[{
       {"\<\"ParticleSwarmOptimization\"\>", "\<\"\"\>", "\<\"\"\>", \
"\<\"\"\>"},
       {"93", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
       {
        RowBox[{"x1", "\[Rule]", "0.6745436648106622`"}], 
        RowBox[{"x2", "\[Rule]", 
         RowBox[{"-", "8.98984506498487`"}]}], 
        RowBox[{"x3", "\[Rule]", "3.647619688723798`"}], 
        RowBox[{"x4", "\[Rule]", "2.032371822875329`"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  TableForm[{{
    0.046875`4.691541194015399, {
     "Automatic", 
      86., {$CellContext`x1 -> 
       2.0003194310929855`, $CellContext`x2 -> -3.850885219438706, \
$CellContext`x3 -> 
       4.046243907015815, $CellContext`x4 -> -2.4223894120862415`}}}, {
    0.5`5.719569917615643, {
     "DifferentialEvolution", 
      94., {$CellContext`x1 -> 
       0.5581258162013214, $CellContext`x2 -> -4.800116600381188, \
$CellContext`x3 -> 1.5099068783225753`, $CellContext`x4 -> 
       0.49599482885320956`}}}, {
    0.0625`4.816479930623699, {
     "SimulatedAnnealing", 
      90., {$CellContext`x1 -> -0.07025634862061597, $CellContext`x2 -> \
-0.10692796349018996`, $CellContext`x3 -> 
       3.564716255785826, $CellContext`x4 -> -0.75497851255751}}}, {
    0.125`5.11750992628768, {
     "RandomSearch", 
      83., {$CellContext`x1 -> -0.00887784484149931, $CellContext`x2 -> \
-0.3974634242404692, $CellContext`x3 -> 
       0.9768116362071552, $CellContext`x4 -> -0.016830921823386358`}}}, {
    0.046875`4.691541194015399, {
     "NelderMead", 
      86., {$CellContext`x1 -> 
       2.0003194310929855`, $CellContext`x2 -> -3.850885219438706, \
$CellContext`x3 -> 
       4.046243907015815, $CellContext`x4 -> -2.4223894120862415`}}}, {
    2.453125`6.410319591704971, {
     "ParticleSwarmOptimization", 
      93, {$CellContext`x1 -> 
       0.6745436648106622, $CellContext`x2 -> -8.98984506498487, \
$CellContext`x3 -> 3.647619688723798, $CellContext`x4 -> 
       2.032371822875329}}}}]]], "Output",
 CellChangeTimes->{{3.6267098887689395`*^9, 3.6267099560970645`*^9}, 
   3.6267099903626895`*^9, {3.6267101829251895`*^9, 3.6267101943158145`*^9}, {
   3.6267102299251895`*^9, 3.6267102464251895`*^9}, {3.6267104248783145`*^9, 
   3.6267104355814395`*^9}}]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6267099684251895`*^9, 3.6267099706126895`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["maximize routine for MSE", "Section",
 CellChangeTimes->{{3.630171838608887*^9, 3.6301718555620127`*^9}}],

Cell[CellGroupData[{

Cell["\<\
making the dataArray invariant to exchanging attributes (columns)\
\>", "Subsubsection",
 CellChangeTimes->{{3.6216681949582443`*^9, 3.621668226224493*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataArray", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "2.681529669999996`"}], ",", 
        RowBox[{"-", "2.856878039999998`"}], ",", "1.2138993770000042`"}], 
       "}"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"0.`", ",", "0", ",", "0"}], "}"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "5.105592649999991`"}], ",", "19.375777529999993`", ",", 
        "20.833505917999986`"}], "}"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "7.300392346999999`"}], ",", "11.734344039999996`", ",", 
        "4.27582184900001`"}], "}"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "10.165918046000002`"}], ",", "3.3200157750000017`", ",",
         "1.428386828000015`"}], "}"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "5.665879133999994`"}], ",", "0.7199797199999978`", ",", 
        "9.683662228999992`"}], "}"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"17.49876948299999`", ",", 
        RowBox[{"-", "2.980697673999998`"}], ",", "7.163838940000005`"}], 
       "}"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"3.573676431999999`", ",", 
        RowBox[{"-", "6.13357770399999`"}], ",", "5.166011698999995`"}], 
       "}"}], "}"}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.62164806866091*^9, 3.6216480703183365`*^9}, {
  3.6216661839502244`*^9, 3.6216661988191323`*^9}}],

Cell[CellGroupData[{

Cell[BoxData["dataArray"], "Input",
 CellChangeTimes->{{3.6216662374268813`*^9, 3.621666239923259*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "2.681529669999996`"}], ",", 
      RowBox[{"-", "2.856878039999998`"}], ",", "1.2138993770000042`"}], 
     "}"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"0.`", ",", "0", ",", "0"}], "}"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "5.105592649999991`"}], ",", "19.375777529999993`", ",", 
      "20.833505917999986`"}], "}"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "7.300392346999999`"}], ",", "11.734344039999996`", ",", 
      "4.27582184900001`"}], "}"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "10.165918046000002`"}], ",", "3.3200157750000017`", ",", 
      "1.428386828000015`"}], "}"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "5.665879133999994`"}], ",", "0.7199797199999978`", ",", 
      "9.683662228999992`"}], "}"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"17.49876948299999`", ",", 
      RowBox[{"-", "2.980697673999998`"}], ",", "7.163838940000005`"}], "}"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"3.573676431999999`", ",", 
      RowBox[{"-", "6.13357770399999`"}], ",", "5.166011698999995`"}], "}"}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.621666240449882*^9, 3.62166829052666*^9, 
  3.6263391813178415`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Permute", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x1", ",", "x2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6216663699932184`*^9, 3.6216663872224035`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x2", ",", "x1"}], "}"}]], "Output",
 CellChangeTimes->{3.621666387696067*^9, 3.6216682964825935`*^9, 
  3.6263391847553415`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", "order", "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"order", "=", 
     RowBox[{"Ordering", "[", 
      RowBox[{"(*", 
       RowBox[{"Smaller", " ", "deviation", " ", "first"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"StandardDeviation", "/@", 
       RowBox[{"(", 
        RowBox[{"Transpose", "@", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"dataArray", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "All", ",", 
              RowBox[{"2", ";;", 
               RowBox[{"-", "1"}]}]}], "]"}], "]"}], ",", "1"}], "]"}]}], 
        ")"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"Print", "[", "order", "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{"dataArray", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", "All", ",", 
       RowBox[{"Prepend", "[", 
        RowBox[{
         RowBox[{"order", "+", "1"}], ",", "1"}], "]"}]}], "]"}], "]"}]}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.6216655634586267`*^9, 3.6216657189925437`*^9}, {
  3.621665750835803*^9, 3.6216657710361495`*^9}, {3.621666251496768*^9, 
  3.6216663178953614`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "1"}], "}"}]], "Print",
 CellChangeTimes->{3.6216663184334474`*^9, 3.621668297513651*^9, 
  3.6263391933022165`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "2.681529669999996`"}], ",", "1.2138993770000042`", ",", 
      RowBox[{"-", "2.856878039999998`"}]}], "}"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"0.`", ",", "0", ",", "0"}], "}"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "5.105592649999991`"}], ",", "20.833505917999986`", ",", 
      "19.375777529999993`"}], "}"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "7.300392346999999`"}], ",", "4.27582184900001`", ",", 
      "11.734344039999996`"}], "}"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "10.165918046000002`"}], ",", "1.428386828000015`", ",", 
      "3.3200157750000017`"}], "}"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "5.665879133999994`"}], ",", "9.683662228999992`", ",", 
      "0.7199797199999978`"}], "}"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"17.49876948299999`", ",", "7.163838940000005`", ",", 
      RowBox[{"-", "2.980697673999998`"}]}], "}"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"3.573676431999999`", ",", "5.166011698999995`", ",", 
      RowBox[{"-", "6.13357770399999`"}]}], "}"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.621666241443074*^9, {3.621666294789798*^9, 3.6216663184373536`*^9}, 
   3.6216682975181446`*^9, 3.6263391933022165`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Code", "Subsubsection",
 CellChangeTimes->{{3.630231735607917*^9, 3.630231737474128*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "maximize", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"maximize", "::", "usage"}], "=", 
   "\"\<maximize[dataArray_,noAttr_,method_:\\\"DifferentialEvolution\\\", \
permuteinvariant_:True, printflag_:True] is MSE specific and uses the \
optimize function. It uses the objective function (that counts the number of \
satisfied inequalities). It returns a list {max,{x1->value1, x2->value2, \
...}, number of inequalities} where max is the maximum number of satisfied \
inequalities found and the solution of the maximization method \
{value1,value2,...}\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"maximize", "[", 
    RowBox[{"dataArray_", ",", "noAttr_", ",", 
     RowBox[{"method_:", "\"\<DifferentialEvolution\>\""}], ",", 
     RowBox[{"permuteinvariant_:", "True"}], ",", 
     RowBox[{"printflag_:", "True"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "sol", ",", "x", ",", "\[IndentingNewLine]", "order", ",", 
       "invariantdataArray", ",", "reverseorder"}], "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"(", 
          RowBox[{"Developer`PackedArrayQ", "[", "dataArray", "]"}], ")"}]}], 
        ",", 
        RowBox[{
        "Print", "[", 
         "\"\<WARNING - The dataArray IS NOT a packed array. Calculations \
will be severely slowed down.\>\"", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"x", "=", 
       RowBox[{"Cx", "[", 
        RowBox[{"noAttr", "-", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"permuteinvariant", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"order", "=", 
          RowBox[{"Ordering", "[", 
           RowBox[{"(*", 
            RowBox[{"Smaller", " ", "deviation", " ", "first"}], "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"N", "[", 
            RowBox[{"StandardDeviation", "/@", 
             RowBox[{"(", 
              RowBox[{"Transpose", "@", 
               RowBox[{"dataArray", "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", 
                  RowBox[{"2", ";;", 
                   RowBox[{"-", "1"}]}]}], "]"}], "]"}]}], ")"}]}], "]"}], 
           "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"invariantdataArray", "=", 
          RowBox[{"dataArray", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", 
             RowBox[{"Prepend", "[", 
              RowBox[{
               RowBox[{"order", "+", "1"}], ",", "1"}], "]"}]}], "]"}], 
           "]"}]}], ";", 
         RowBox[{"(*", 
          RowBox[{"invariantdataArray", " ", "remains", " ", "packed"}], 
          "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"sol", "=", 
          RowBox[{"optimize", "[", 
           RowBox[{
            StyleBox[
             RowBox[{
              RowBox[{"objective", "[", 
               RowBox[{"invariantdataArray", ",", 
                RowBox[{"Sequence", "@@", "#"}]}], "]"}], "&"}],
             Background->RGBColor[1, 1, 0]], ",", "x", ",", "method"}], 
           "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"sol", "=", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"sol", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", 
            RowBox[{"x", "/.", 
             RowBox[{"sol", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"reverseorder", "=", 
          RowBox[{
           RowBox[{"SortBy", "[", 
            RowBox[{
             RowBox[{"Transpose", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"sol", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], ",", "order"}], "}"}], "]"}],
              ",", "Last"}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "1"}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"sol", "=", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"sol", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", "reverseorder", ",", 
            RowBox[{"Length", "@", "dataArray"}]}], "}"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"printflag", ",", 
           RowBox[{"Print", "[", 
            RowBox[{
            "\"\< The new ordering of attributes used for calculating the \
solutio order=\>\"", ",", "order"}], 
            RowBox[{"(*", 
             RowBox[{",", "\"\<  reverse order=\>\"", ",", "reverseorder"}], 
             "*)"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", ",", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"sol", "=", 
          RowBox[{"optimize", "[", 
           RowBox[{
            StyleBox[
             RowBox[{
              RowBox[{"objective", "[", 
               RowBox[{"dataArray", ",", 
                RowBox[{"Sequence", "@@", "#"}]}], "]"}], "&"}],
             Background->RGBColor[1, 1, 0]], ",", "x", ",", "method"}], 
           "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"sol", "=", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"sol", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", 
            RowBox[{"x", "/.", 
             RowBox[{"sol", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], ",", 
            RowBox[{"Length", "@", "dataArray"}]}], "}"}]}]}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{"printflag", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<Method \>\"", "<>", 
           RowBox[{"ToString", "[", "method", "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<Completed : \>\"", ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<Number of satisfied inequalities\>\"", "\[Rule]", 
              RowBox[{"sol", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], ",", 
             RowBox[{"Thread", "[", 
              RowBox[{
               RowBox[{"header", "[", 
                RowBox[{"[", 
                 RowBox[{"5", ";;", 
                  RowBox[{"(", 
                   RowBox[{"5", "+", "noAttr", "-", "2"}], ")"}]}], "]"}], 
                "]"}], "\[Rule]", 
               RowBox[{"sol", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", 
             RowBox[{"\"\<Number of inequalities\>\"", "\[Rule]", 
              RowBox[{"Length", "@", "dataArray"}]}]}], "}"}], ",", 
           "\[IndentingNewLine]", "\"\<\\nSatisfied Ineqs Analysis:\\n \>\"", 
           ",", "\[IndentingNewLine]", 
           RowBox[{"Grid", "[", 
            RowBox[{
             RowBox[{"objectiveV", "[", 
              RowBox[{"dataArray", ",", 
               RowBox[{"Sequence", "@@", 
                RowBox[{"(", 
                 RowBox[{"sol", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], ")"}]}]}], "]"}], ",", 
             RowBox[{"Frame", "\[Rule]", "All"}]}], "]"}]}], 
          "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], ";",
       "\[IndentingNewLine]", "sol"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Information", "[", 
  RowBox[{"maximize", ",", 
   RowBox[{"LongForm", "\[Rule]", "False"}]}], "]"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.6301725312495127`*^9, 3.6301725646870127`*^9}, {
   3.6301726152495127`*^9, 3.6301726294370127`*^9}, {3.630172682515137*^9, 
   3.630172706921387*^9}, {3.6301727382182627`*^9, 3.6301727699995127`*^9}, {
   3.6301728034682627`*^9, 3.630172832983887*^9}, {3.6301729252807627`*^9, 
   3.6301730042495127`*^9}, {3.630173238140137*^9, 3.630173238952637*^9}, {
   3.630173641577637*^9, 3.630173649765137*^9}, {3.6301737174995127`*^9, 
   3.6301737388745127`*^9}, {3.630173850265137*^9, 3.6301738558120127`*^9}, {
   3.630173922921387*^9, 3.6301739365620127`*^9}, {3.6301739695620127`*^9, 
   3.630173970171387*^9}, {3.630174237483887*^9, 3.630174276921387*^9}, {
   3.6301743488745127`*^9, 3.6301743498120127`*^9}, {3.630228389984331*^9, 
   3.6302283964540577`*^9}, {3.6302290490046654`*^9, 
   3.6302290523738337`*^9}, {3.630229126045*^9, 3.63022914088875*^9}, {
   3.6302294670895624`*^9, 3.6302294777907343`*^9}, {3.63022951826925*^9, 
   3.6302297209268913`*^9}, {3.630231103888073*^9, 3.630231195474987*^9}, {
   3.6302317959645443`*^9, 3.6302318330751286`*^9}, {3.6302318669052067`*^9, 
   3.630231932059389*^9}, {3.631181481796926*^9, 3.631181499578176*^9}, {
   3.631181539093801*^9, 3.631181563640676*^9}, {3.6327341282219553`*^9, 
   3.632734202823555*^9}, {3.6327429203052053`*^9, 3.6327429576895747`*^9}, {
   3.6337020004683437`*^9, 3.633702003293316*^9}, {3.633702039067235*^9, 
   3.6337021662414784`*^9}, {3.6527750180166187`*^9, 3.652775023103841*^9}, {
   3.652775109366375*^9, 3.652775118554171*^9}, {3.65734493770287*^9, 
   3.657344961774979*^9}, {3.657345452491479*^9, 3.657345453771372*^9}, {
   3.65734564579902*^9, 3.657345646684732*^9}, {3.657345770421894*^9, 
   3.657345784574196*^9}, {3.6854662311648684`*^9, 3.68546623242233*^9}, {
   3.685467058350451*^9, 3.685467140737974*^9}, 3.697052241607657*^9, {
   3.711435391620947*^9, 3.711435406784834*^9}, {3.717727448562086*^9, 
   3.717727458754202*^9}, {3.718005344772203*^9, 3.718005352286118*^9}, {
   3.718005589268017*^9, 3.718005624652545*^9}, {3.718005800656749*^9, 
   3.718005809543769*^9}, {3.718005897114892*^9, 3.71800590226795*^9}, {
   3.718005992733891*^9, 3.7180059996278267`*^9}, {3.718006074471768*^9, 
   3.7180061526756887`*^9}, {3.90221771260765*^9, 3.902217734101294*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"94749ebf-85cc-4450-ac4f-a669526ac2c7"],

Cell[BoxData[
 StyleBox["\<\"maximize[dataArray_,noAttr_,method_:\\\"DifferentialEvolution\\\
\", permuteinvariant_:False, printflag_:False] is MSE specific and uses the \
optimize function. It uses the objective function (that counts the number of \
satisfied inequalities). It returns a list {max,{x1->value1, x2->value2, \
...}} where max is the maximum number of satisfied inequalities found and the \
solution of the maximization method {value1,value2,...}\"\>", "MSG"]], "Print",\
 "PrintUsage",
 CellChangeTimes->{3.711435407347705*^9},
 CellTags->
  "Info173711446207-1085476",ExpressionUUID->"5216d1ef-0a75-4cb7-9f40-\
23f863ea27c9"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
AutoGeneratedPackage->Automatic,
WindowSize->{2369, 1585},
WindowMargins->{{Automatic, 0}, {89, Automatic}},
ShowSelection->True,
Magnification->1.25,
FrontEndVersion->"11.3 for Linux x86 (64-bit) (March 6, 2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Info3626679657-1845125"->{
  Cell[1843845, 37786, 349, 7, 78, "Print",ExpressionUUID->"ec2819c9-9df3-496c-bd61-a1e57d806103",
   CellTags->"Info3626679657-1845125"],
  Cell[1844197, 37795, 1152, 30, 33, "Print",ExpressionUUID->"7a7b32ae-83f3-41a6-a50f-3c90adb2e27c",
   CellTags->"Info3626679657-1845125"]},
 "Info3626679660-1845125"->{
  Cell[1845543, 37837, 353, 7, 78, "Print",ExpressionUUID->"ad9d2137-3cdd-4aa0-a0a9-6f2569ea21c9",
   CellTags->"Info3626679660-1845125"],
  Cell[1845899, 37846, 1305, 34, 33, "Print",ExpressionUUID->"00b5cd1d-7e3f-4031-bb9e-187ad7ed1b6b",
   CellTags->"Info3626679660-1845125"]},
 "Info3626679695-1845125"->{
  Cell[1847405, 37892, 357, 6, 78, "Print",ExpressionUUID->"5dd399ea-01a9-4d7b-8e09-045525794522",
   CellTags->"Info3626679695-1845125"],
  Cell[1847765, 37900, 2409, 62, 63, "Print",ExpressionUUID->"41f0fa71-a6a9-4769-87eb-ce9f936ae3a8",
   CellTags->"Info3626679695-1845125"]},
 "Info3626682266-2754311"->{
  Cell[1850374, 37974, 131, 2, 60, "Print",ExpressionUUID->"1f870f63-74e3-46f2-b9de-41db22e4ba1b",
   CellTags->"Info3626682266-2754311"],
  Cell[1850508, 37978, 1611, 42, 92, "Print",ExpressionUUID->"6b24f61d-01cc-4ffe-ad1c-70aca2e8edd5",
   CellTags->"Info3626682266-2754311"]},
 "Info173711446207-1085476"->{
  Cell[1921601, 39754, 642, 11, 78, "Print",ExpressionUUID->"5216d1ef-0a75-4cb7-9f40-23f863ea27c9",
   CellTags->"Info173711446207-1085476"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Info3626679657-1845125", 1922657, 39783},
 {"Info3626679660-1845125", 1922967, 39788},
 {"Info3626679695-1845125", 1923277, 39793},
 {"Info3626682266-2754311", 1923587, 39798},
 {"Info173711446207-1085476", 1923899, 39803}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 511, 7, 88, "Section",ExpressionUUID->"7730b3e8-2b64-4aed-902a-de59ea35c867"],
Cell[CellGroupData[{
Cell[1115, 33, 110, 1, 59, "Subsubsection",ExpressionUUID->"67748a6d-a4f5-453c-91a3-a1655b8a40e2"],
Cell[1228, 36, 272, 5, 46, "Text",ExpressionUUID->"abf1e51c-922f-46c2-a904-32ac947100da"],
Cell[1503, 43, 179, 4, 41, "Input",ExpressionUUID->"fb69e299-bb4c-4108-982f-c31c36446deb"],
Cell[1685, 49, 148, 3, 41, "Input",ExpressionUUID->"032ed064-2441-4946-bd67-94dadf98483b"],
Cell[1836, 54, 132, 2, 41, "Input",ExpressionUUID->"872cca61-562e-45b9-a426-e788cd83a4e4"],
Cell[1971, 58, 591, 11, 94, "Input",ExpressionUUID->"33897e8c-02a3-4085-9051-ff0a98a5381c"],
Cell[CellGroupData[{
Cell[2587, 73, 386, 8, 61, "Input",ExpressionUUID->"42541344-c81c-4f5f-9020-1258a100c94a",
 InitializationCell->True],
Cell[2976, 83, 154, 3, 35, "Echo",ExpressionUUID->"6dfd7a2e-c0db-47fc-9e74-f3c4322232fa"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[3179, 92, 100, 1, 71, "Subsection",ExpressionUUID->"5d8fe406-7037-453e-a4dd-991008fbbf8a"],
Cell[3282, 95, 108, 3, 46, "Text",ExpressionUUID->"800b107b-7ff9-4412-ac84-56bec14b30a3",
 CellID->15517963],
Cell[3393, 100, 703, 23, 48, "Text",ExpressionUUID->"9a2d5cbe-6068-4d49-bbe9-67109baf3b42",
 CellID->400968379],
Cell[4099, 125, 2571, 88, 113, "Text",ExpressionUUID->"e2e85ce1-63b2-49c0-8906-f2b254419298",
 CellID->134958075],
Cell[6673, 215, 389, 7, 77, "Text",ExpressionUUID->"1912a4b4-d21a-4a09-b6ff-9a8071194a10",
 CellID->666318363],
Cell[7065, 224, 201, 5, 46, "Text",ExpressionUUID->"2f81fcfd-51b6-4ce1-b02e-64b4b022bb5c",
 CellID->373195045],
Cell[7269, 231, 201, 5, 46, "Text",ExpressionUUID->"b06e94d3-be81-48b1-9342-a310c1f94b40",
 CellID->373302394],
Cell[7473, 238, 1684, 43, 278, "DefinitionBox3Col",ExpressionUUID->"192f2f0e-c019-4e42-b521-8ba84b6541db",
 CellID->18427541],
Cell[CellGroupData[{
Cell[9182, 285, 163, 3, 41, "Input",ExpressionUUID->"234f630c-4470-4769-9720-152da5392d21"],
Cell[9348, 290, 192, 4, 46, "Output",ExpressionUUID->"74c0c489-b483-447f-a9bb-e2c21b272cdb"]
}, Open  ]],
Cell[9555, 297, 546, 11, 139, "Text",ExpressionUUID->"a9befba6-fb6c-401a-a89b-14fe338614bb"],
Cell[10104, 310, 239, 5, 77, "Text",ExpressionUUID->"0594598b-2a3d-4186-93f3-d30b793bf210"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[10392, 321, 105, 1, 88, "Section",ExpressionUUID->"6c874237-737f-4f6c-bbe4-c735649a8e51"],
Cell[10500, 324, 154, 4, 46, "Text",ExpressionUUID->"1c9725ea-6765-4368-854f-bbe19585a77a"],
Cell[CellGroupData[{
Cell[10679, 332, 129, 1, 41, "Input",ExpressionUUID->"68094ba0-0664-4da3-91c0-31a9ee23b212"],
Cell[10811, 335, 349, 7, 46, "Output",ExpressionUUID->"7bc82378-773e-4e25-b74e-a147b03d8fa6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11197, 347, 306, 8, 41, "Input",ExpressionUUID->"9bc4e39b-7095-4ed1-bff1-01c9fc2b9d18"],
Cell[11506, 357, 3380, 70, 305, "Output",ExpressionUUID->"43303ee4-ab74-41d1-b030-2302d8d30c41"]
}, Open  ]],
Cell[14901, 430, 407, 9, 94, "Input",ExpressionUUID->"9b68298c-e402-4647-95c5-d3abcd4ac6bd",
 InitializationCell->True],
Cell[15311, 441, 12713, 244, 1566, "Input",ExpressionUUID->"dd4a70c4-a3cb-40db-a8c1-910e0409d304",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[28049, 689, 145, 2, 41, "Input",ExpressionUUID->"87dbeebc-40d5-4d71-ac68-bcd64f790abe"],
Cell[28197, 693, 398, 7, 46, "Output",ExpressionUUID->"320f2ebd-53cc-4b71-bfad-9fe543d89e9d"]
}, Open  ]],
Cell[28610, 703, 475, 11, 106, "Input",ExpressionUUID->"69e329fc-1618-46a7-8b58-73f356510d72"],
Cell[CellGroupData[{
Cell[29110, 718, 148, 2, 41, "Input",ExpressionUUID->"c806952f-4779-4fd1-b1dd-5992eebe9501"],
Cell[29261, 722, 315, 6, 46, "Output",ExpressionUUID->"e83112b0-e950-4805-833b-75cc389d699c"]
}, Open  ]],
Cell[29591, 731, 493, 9, 41, "Input",ExpressionUUID->"c93b63ca-8062-4eba-92cd-21a76200c795"],
Cell[CellGroupData[{
Cell[30109, 744, 98, 1, 59, "Subsubsection",ExpressionUUID->"f9c579eb-f5e3-4e51-9c68-c903bc1a518e"],
Cell[30210, 747, 533, 14, 41, "Input",ExpressionUUID->"31a02196-3c51-42fd-aea8-2e7b899b30a5"],
Cell[30746, 763, 379, 9, 41, "Input",ExpressionUUID->"f59f9406-543e-45dc-959d-4517d4dcfe5e"],
Cell[31128, 774, 190, 4, 41, "Input",ExpressionUUID->"796f692f-e34e-42d9-8ccf-42891dd5a0f1"],
Cell[31321, 780, 377, 8, 41, "Input",ExpressionUUID->"9e4d53fa-a8f6-40e5-8a90-42ef357ba2e3"],
Cell[CellGroupData[{
Cell[31723, 792, 101, 1, 41, "Input",ExpressionUUID->"ec405692-b093-4161-a3c9-b9fe80017fd8"],
Cell[31827, 795, 8787, 223, 117, "Output",ExpressionUUID->"0b8609bd-5f99-4fa4-94c0-fd24c784cf24"]
}, Open  ]],
Cell[CellGroupData[{
Cell[40651, 1023, 325, 5, 41, "Input",ExpressionUUID->"e1c82d15-422c-477f-9e85-8aa5d24f7d1c"],
Cell[40979, 1030, 547, 7, 46, "Output",ExpressionUUID->"af3185a3-635d-4ee7-87fb-4fac50ee4051"]
}, Open  ]],
Cell[CellGroupData[{
Cell[41563, 1042, 175, 4, 41, "Input",ExpressionUUID->"3bf91f7c-7a79-4018-8358-7980e4f45b14"],
Cell[41741, 1048, 385, 7, 46, "Output",ExpressionUUID->"0c63cdfd-5726-4c56-b345-5069ffdc2a5f"]
}, Open  ]],
Cell[42141, 1058, 396, 10, 74, "Input",ExpressionUUID->"d21244f9-a1ca-4c71-9563-21d2e0e53c23"],
Cell[CellGroupData[{
Cell[42562, 1072, 832, 19, 41, "Input",ExpressionUUID->"9c9d4b7d-3efe-4b4d-923b-d3d01d58a259"],
Cell[43397, 1093, 3058, 67, 79, "Output",ExpressionUUID->"3caed28f-c1f9-4718-ba81-57deff215adf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[46492, 1165, 816, 18, 74, "Input",ExpressionUUID->"c8f4444f-e400-4c3b-b31d-fe10cdbd18ca"],
Cell[47311, 1185, 8919, 216, 412, "Output",ExpressionUUID->"cc3af707-bf2f-4051-a357-7d62b2babc9d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[56267, 1406, 280, 7, 41, "Input",ExpressionUUID->"8f746359-fea2-42b7-9084-df06457197db"],
Cell[56550, 1415, 6592, 146, 271, "Output",ExpressionUUID->"2f7bbe8c-33b4-4711-af29-4e4768c6fdb8"]
}, Open  ]],
Cell[63157, 1564, 1098, 16, 169, "Text",ExpressionUUID->"cf5d73c6-75e8-4dcf-be83-58db9e0d5f86"],
Cell[64258, 1582, 345, 8, 74, "Input",ExpressionUUID->"790b01a2-2723-4af3-adaa-189f29b1b26f"],
Cell[CellGroupData[{
Cell[64628, 1594, 569, 11, 74, "Input",ExpressionUUID->"a950d9b3-9a0d-4762-946d-3c83472d02f9"],
Cell[CellGroupData[{
Cell[65222, 1609, 230445, 3802, 6164, "Print",ExpressionUUID->"853a1582-f93e-4c2e-bc57-0bba3b33d07c"],
Cell[295670, 5413, 592, 17, 2173, "Print",ExpressionUUID->"96626466-1401-4155-b3d2-be229de9f46d"],
Cell[296265, 5432, 405, 13, 2173, "Print",ExpressionUUID->"50aa1623-187f-4f35-956c-eb32247d6400"],
Cell[296673, 5447, 390, 12, 2173, "Print",ExpressionUUID->"8e28fe24-c69a-402c-a191-b3d638234da5"],
Cell[297066, 5461, 403, 13, 2173, "Print",ExpressionUUID->"31047d5b-e80d-4f07-bb17-cfff398bc355"],
Cell[297472, 5476, 346, 12, 2173, "Print",ExpressionUUID->"d125ff3c-ec00-46b0-b195-88b66d81023f"],
Cell[297821, 5490, 230183, 3797, 6164, "Print",ExpressionUUID->"4444aed7-37c4-46f1-a2eb-511eca3e8f33"],
Cell[528007, 9289, 960, 26, 2173, "Print",ExpressionUUID->"70377b92-8bbb-4b6c-bb9a-c4e0eab8a069"],
Cell[528970, 9317, 1076, 25, 4203, "Print",ExpressionUUID->"4b6a9769-58ea-4c4d-ba16-94d2fdd7db9a"],
Cell[530049, 9344, 399, 13, 2173, "Print",ExpressionUUID->"24f5f187-3710-4a39-b8db-205314622965"],
Cell[530451, 9359, 1674, 37, 6164, "Print",ExpressionUUID->"e78b5fb3-d309-45a0-a5ca-5eb98504c71b"],
Cell[532128, 9398, 370, 12, 2173, "Print",ExpressionUUID->"6d3eba2c-668f-4523-9033-61bb1a37ec1a"],
Cell[532501, 9412, 223, 6, 3723, "Print",ExpressionUUID->"da89d34d-a7bb-4fdd-9bb0-441adccd7b58"],
Cell[532727, 9420, 233, 6, 3723, "Print",ExpressionUUID->"a6eb8a8c-9a84-4c8e-9345-5259cabe27bb"],
Cell[532963, 9428, 582, 17, 2173, "Print",ExpressionUUID->"16ffb2c8-4e7f-4183-9398-fa6fb333deb1"],
Cell[533548, 9447, 373, 13, 2173, "Print",ExpressionUUID->"3b61b531-bccb-4ee3-a6ab-9a73e41558a9"],
Cell[533924, 9462, 356, 12, 2173, "Print",ExpressionUUID->"def1f841-5104-4a6e-8634-010c3f4a7ac3"],
Cell[534283, 9476, 395, 13, 2173, "Print",ExpressionUUID->"4d165227-e88a-45c0-aa2a-48b393a29ba0"],
Cell[534681, 9491, 246, 6, 3723, "Print",ExpressionUUID->"f4e40842-055f-4d8b-a132-314759738f30"],
Cell[534930, 9499, 307, 8, 2173, "Print",ExpressionUUID->"1997f2fd-9491-4e17-87b9-f864df63278b"],
Cell[535240, 9509, 179, 4, 2173, "Print",ExpressionUUID->"5a5af189-3f8d-41c6-8772-bd567aa1fb54"],
Cell[535422, 9515, 380, 9, 3848, "Print",ExpressionUUID->"36c30c38-fb8e-4607-816e-57febf6ed985"],
Cell[535805, 9526, 373, 12, 2173, "Print",ExpressionUUID->"4c375ff2-23db-4063-ba0f-7b644bd62259"],
Cell[536181, 9540, 378, 12, 2173, "Print",ExpressionUUID->"c85984c6-0eba-47cd-9f46-b9a4262d0637"],
Cell[536562, 9554, 230, 6, 3723, "Print",ExpressionUUID->"bcc652ca-54ab-4abe-a510-2eecea89c87e"],
Cell[536795, 9562, 230406, 3801, 7996, "Print",ExpressionUUID->"334302b9-2c1c-4a58-9fbe-5f8b9d41aef0"],
Cell[767204, 13365, 535, 17, 2173, "Print",ExpressionUUID->"25195e0f-e958-48ea-924b-8155c365f5f1"],
Cell[767742, 13384, 401, 12, 2173, "Print",ExpressionUUID->"25b855a6-b547-4c5a-8205-3943ae7b9c41"],
Cell[768146, 13398, 374, 12, 2173, "Print",ExpressionUUID->"29182f2f-9b49-4f90-a892-0ec6597d43e3"],
Cell[768523, 13412, 464, 15, 2173, "Print",ExpressionUUID->"e5c00953-ac60-4062-80b0-cff8e668b39f"],
Cell[768990, 13429, 257, 7, 3723, "Print",ExpressionUUID->"320a2524-4faa-43b9-99c5-2132eeb1b48f"],
Cell[769250, 13438, 510, 16, 2173, "Print",ExpressionUUID->"b8d44431-32ba-4a4e-a3ac-b99f1bd1ae3b"],
Cell[769763, 13456, 368, 12, 2173, "Print",ExpressionUUID->"c992f1d4-672e-4070-b14f-b9dbdf7aa9aa"],
Cell[770134, 13470, 385, 13, 2173, "Print",ExpressionUUID->"7e2dcebe-bc6f-47f2-b70a-8574117d5de4"],
Cell[770522, 13485, 365, 13, 2173, "Print",ExpressionUUID->"8ab9355c-1eb9-44ce-a167-2d416d84e83a"],
Cell[770890, 13500, 367, 12, 2173, "Print",ExpressionUUID->"8af61894-e7c9-4264-81a5-3b8d5d0ff0f0"],
Cell[771260, 13514, 238, 6, 3723, "Print",ExpressionUUID->"78f0c65d-4216-4a6d-9e93-7712203a33a8"],
Cell[771501, 13522, 357, 13, 2173, "Print",ExpressionUUID->"2f4ad892-4b48-4442-89b3-f77a7ee8a96a"],
Cell[771861, 13537, 424, 14, 2173, "Print",ExpressionUUID->"606affc7-555c-4327-91e1-e80a56fb0bd5"],
Cell[772288, 13553, 532, 18, 2173, "Print",ExpressionUUID->"fcb4cba8-cdec-452f-af37-a0da77fd2227"],
Cell[772823, 13573, 390, 12, 2173, "Print",ExpressionUUID->"c06feeda-3b43-437d-b22a-1285f245f5c0"],
Cell[773216, 13587, 426, 12, 2173, "Print",ExpressionUUID->"3c5193ac-a39a-4e20-b15e-634cee9f3f0d"],
Cell[773645, 13601, 223, 6, 3723, "Print",ExpressionUUID->"8f485c42-1a41-4674-af0d-757f09a64ace"],
Cell[773871, 13609, 230284, 3802, 6164, "Print",ExpressionUUID->"09aa9cf1-6ab9-410b-bdb4-63c73aa16de1"],
Cell[1004158, 17413, 384, 12, 2173, "Print",ExpressionUUID->"8cd4b7cc-1bf1-4400-9220-55ad6d4e2dad"],
Cell[1004545, 17427, 222, 6, 2173, "Print",ExpressionUUID->"3ad7e0fa-3e31-4a2f-9f42-fe0731628ab7"],
Cell[1004770, 17435, 245, 6, 3723, "Print",ExpressionUUID->"6b0e36cf-f70d-4924-81bb-827047aad576"],
Cell[1005018, 17443, 420, 11, 3790, "Print",ExpressionUUID->"3799a1f4-e9d0-4f8f-a571-2c647a07b01b"],
Cell[1005441, 17456, 182, 4, 2173, "Print",ExpressionUUID->"4955c204-8a92-41cb-98a8-7908e0d9104f"],
Cell[1005626, 17462, 765, 20, 7065, "Print",ExpressionUUID->"b4d8405d-78b2-490b-8ab1-2c7481a95e6e"],
Cell[1006394, 17484, 367, 12, 2173, "Print",ExpressionUUID->"33831644-9533-48fe-b6f5-906713fd57fb"],
Cell[1006764, 17498, 374, 12, 2173, "Print",ExpressionUUID->"b7fdd052-fa97-472e-87f4-e09d023b9020"],
Cell[1007141, 17512, 461, 15, 2843, "Print",ExpressionUUID->"b13a46dd-9c7d-4b2e-a1bb-83146a60d216"],
Cell[1007605, 17529, 236, 6, 3723, "Print",ExpressionUUID->"1d9daca3-a0e7-438f-ae80-1a32b3ce25dc"],
Cell[1007844, 17537, 268, 9, 2173, "Print",ExpressionUUID->"127b5b1f-89be-4558-84e0-5f0a508917e3"],
Cell[1008115, 17548, 392, 13, 2173, "Print",ExpressionUUID->"4dd55609-e760-4d61-b881-b066fd72ee8a"],
Cell[1008510, 17563, 397, 13, 2173, "Print",ExpressionUUID->"71fbfdfd-5f64-4c72-9dd5-ce484f918550"],
Cell[1008910, 17578, 397, 13, 2173, "Print",ExpressionUUID->"ce15b811-4053-4c27-a079-ab984f169a54"],
Cell[1009310, 17593, 185, 4, 2173, "Print",ExpressionUUID->"f8ff4244-e2c3-4f01-99c5-d916bb4d3c47"],
Cell[1009498, 17599, 266, 9, 2173, "Print",ExpressionUUID->"2a9b09a0-3cd3-43c3-b478-c18a9af22a06"],
Cell[1009767, 17610, 186, 4, 2173, "Print",ExpressionUUID->"2a959967-d720-4a6a-94d5-26be8f1c6b69"],
Cell[1009956, 17616, 268, 9, 2173, "Print",ExpressionUUID->"0a922446-b9e5-41f5-88d7-f37a410159ee"],
Cell[1010227, 17627, 230, 6, 3723, "Print",ExpressionUUID->"14e4eae1-a70c-42bc-9ad8-1b0ae62f4956"],
Cell[1010460, 17635, 1976, 54, 13262, "Print",ExpressionUUID->"55db09fc-aa67-4a30-9c01-0109ac1762ea"],
Cell[1012439, 17691, 172, 4, 2173, "Print",ExpressionUUID->"56c30257-f8a9-4b61-9f2e-5aa05de20f88"],
Cell[1012614, 17697, 379, 13, 2173, "Print",ExpressionUUID->"ba779049-4013-4f3f-b58f-bc939e933d67"],
Cell[1012996, 17712, 177, 4, 2173, "Print",ExpressionUUID->"8562bae3-61f7-401a-86b8-c151374b1afe"],
Cell[1013176, 17718, 232, 6, 3723, "Print",ExpressionUUID->"46aa7525-2929-49cb-a48a-af50fa490f3c"],
Cell[1013411, 17726, 493, 16, 2173, "Print",ExpressionUUID->"7a037094-79df-4ee5-a9e1-83be12b30e0b"],
Cell[1013907, 17744, 169, 5, 2173, "Print",ExpressionUUID->"0f2005dc-6c02-4a3e-8e6e-87c140526122"],
Cell[1014079, 17751, 404, 12, 2173, "Print",ExpressionUUID->"f7fe08a1-6b9d-445a-b6ee-982bfd71e81e"],
Cell[1014486, 17765, 366, 12, 2173, "Print",ExpressionUUID->"04f33eeb-213a-4433-bb4d-6a926ea3353c"],
Cell[1014855, 17779, 182, 4, 2173, "Print",ExpressionUUID->"149e6b18-76a4-410f-a9ff-8dc6730479f8"],
Cell[1015040, 17785, 765, 25, 2173, "Print",ExpressionUUID->"48f6e4fc-0c57-4954-a33d-84caf39b3afc"],
Cell[1015808, 17812, 166, 4, 2173, "Print",ExpressionUUID->"14e89699-695d-4b0a-bb41-aa26d615743c"],
Cell[1015977, 17818, 170, 4, 2173, "Print",ExpressionUUID->"837096ed-0629-4cce-8973-a58e886ef4dc"],
Cell[1016150, 17824, 169, 4, 2173, "Print",ExpressionUUID->"99dd3bbc-2b96-48fc-bc30-b0cf10f62f70"],
Cell[1016322, 17830, 172, 4, 2173, "Print",ExpressionUUID->"addb5484-e984-4bff-8dee-a3fb01f73cba"],
Cell[1016497, 17836, 176, 4, 2173, "Print",ExpressionUUID->"9bf91269-5061-4bb5-838d-844e960f6cae"],
Cell[1016676, 17842, 184, 4, 2173, "Print",ExpressionUUID->"0f70beb0-76da-4e81-88a4-6b035eb0ffaf"],
Cell[1016863, 17848, 617, 19, 2173, "Print",ExpressionUUID->"b7cc7daf-6aa7-4edc-be78-3a5744caf79f"],
Cell[1017483, 17869, 416, 12, 2173, "Print",ExpressionUUID->"1d81ea1e-4c40-478b-a398-2ac5aba299a6"],
Cell[1017902, 17883, 390, 12, 2173, "Print",ExpressionUUID->"4d8b4f24-786b-47a3-a8c0-51ca18f61d53"],
Cell[1018295, 17897, 237, 6, 3723, "Print",ExpressionUUID->"53f6d439-6bfa-4c05-bad6-2fa488096175"],
Cell[1018535, 17905, 266, 8, 2173, "Print",ExpressionUUID->"6990b22c-0d27-4e23-a7ea-aaea71e0586d"],
Cell[1018804, 17915, 305, 8, 2173, "Print",ExpressionUUID->"6c45083d-7279-4a36-aaa8-d4f3a8313c7f"],
Cell[1019112, 17925, 172, 4, 2173, "Print",ExpressionUUID->"66d50b45-eefc-4a18-9e6a-490de42a7b3e"],
Cell[1019287, 17931, 167, 4, 2173, "Print",ExpressionUUID->"e465998f-396c-424f-b4f3-addf549cbd5f"],
Cell[1019457, 17937, 170, 4, 2173, "Print",ExpressionUUID->"67646da7-ba91-4763-b213-917acb5f034f"],
Cell[1019630, 17943, 182, 4, 2173, "Print",ExpressionUUID->"82e376ba-0bd4-44d8-b8dd-69678afae0db"],
Cell[1019815, 17949, 2437, 64, 9976, "Print",ExpressionUUID->"3b76e41a-c890-461c-8bbb-b8791dfe7327"],
Cell[1022255, 18015, 237, 6, 3723, "Print",ExpressionUUID->"2f7b8b53-6b2d-44f8-9abe-7fc09e49d1d1"],
Cell[1022495, 18023, 2388, 67, 7996, "Print",ExpressionUUID->"151f4658-5e74-45c2-9750-9d1e4f27d048"],
Cell[1024886, 18092, 363, 13, 2173, "Print",ExpressionUUID->"ae80a7d2-b47d-4578-9483-f78cb94b9ba6"],
Cell[1025252, 18107, 365, 13, 2173, "Print",ExpressionUUID->"3519ba3b-b78f-4301-a946-c831e2a7b045"],
Cell[1025620, 18122, 404, 14, 2173, "Print",ExpressionUUID->"2ca14704-7ae2-4263-ba96-e272f19184ba"],
Cell[1026027, 18138, 584, 20, 2173, "Print",ExpressionUUID->"07e8eae1-3b5a-45a1-a3b6-4bec94b4d45e"],
Cell[1026614, 18160, 236, 6, 3723, "Print",ExpressionUUID->"f4fc0245-0008-41be-8727-72eaec8b6b50"],
Cell[1026853, 18168, 537, 18, 2173, "Print",ExpressionUUID->"697c799c-7267-47ae-8f3c-ad6d73cc07c4"],
Cell[1027393, 18188, 374, 12, 2173, "Print",ExpressionUUID->"0f8f52d7-16bc-47f8-bfc7-b026a61483a3"],
Cell[1027770, 18202, 182, 4, 2173, "Print",ExpressionUUID->"a19f25ef-b764-4034-b60b-cf175c3324cd"],
Cell[1027955, 18208, 673, 21, 2173, "Print",ExpressionUUID->"00f21649-a0c1-46ca-a51f-d0fa50ba9805"],
Cell[1028631, 18231, 878, 26, 2173, "Print",ExpressionUUID->"a3be7906-4b3a-44cb-93a2-414a838c114e"],
Cell[1029512, 18259, 650, 21, 2173, "Print",ExpressionUUID->"f3f5490b-8ef6-413f-a146-4c6d4c313fd6"],
Cell[1030165, 18282, 181, 4, 2173, "Print",ExpressionUUID->"fd2791c4-6cba-4b73-a34b-6d285f805870"],
Cell[1030349, 18288, 518, 15, 2173, "Print",ExpressionUUID->"3acb93d0-925d-4941-ae6a-65bd5d41015f"],
Cell[1030870, 18305, 401, 12, 2173, "Print",ExpressionUUID->"3f1ce1da-f0d3-48d4-a807-e1436110994f"],
Cell[1031274, 18319, 380, 12, 2173, "Print",ExpressionUUID->"2d01912c-3039-423e-b04c-f9f70715ed93"],
Cell[1031657, 18333, 228, 6, 3723, "Print",ExpressionUUID->"db250e38-05d9-4137-b9a8-5d1132a913a8"],
Cell[1031888, 18341, 2226, 58, 7996, "Print",ExpressionUUID->"eff67768-89e4-48f2-9541-4ed5ff7a38fe"],
Cell[1034117, 18401, 665, 21, 2173, "Print",ExpressionUUID->"0f79c4ab-63d5-4060-9e85-2cac4e801480"],
Cell[1034785, 18424, 184, 4, 2173, "Print",ExpressionUUID->"e949f8ba-a6d5-4700-b778-f05c9fe26d5c"],
Cell[1034972, 18430, 181, 4, 2173, "Print",ExpressionUUID->"0afb4dd8-cb16-4293-89cd-411d9bfeb616"],
Cell[1035156, 18436, 195, 4, 2173, "Print",ExpressionUUID->"518b73b5-b39f-41c2-a393-763bca2b28c6"],
Cell[1035354, 18442, 232, 6, 3723, "Print",ExpressionUUID->"1bebf872-79fd-4b22-a7e2-30bafe2b994c"],
Cell[1035589, 18450, 237, 6, 3723, "Print",ExpressionUUID->"95b6ab75-6096-4510-ad11-52b01a35bdff"],
Cell[1035829, 18458, 263, 8, 2173, "Print",ExpressionUUID->"1fc91f51-2069-4653-aeb3-499e4b7000cc"],
Cell[1036095, 18468, 303, 8, 2173, "Print",ExpressionUUID->"06a0873f-801d-418a-b8b2-5514183708f4"],
Cell[1036401, 18478, 172, 4, 2173, "Print",ExpressionUUID->"34496fcd-f686-426e-a8f5-07fc65a8ad41"],
Cell[1036576, 18484, 167, 4, 2173, "Print",ExpressionUUID->"5dbe3970-16f1-4f6b-b5e6-1437b73a5ad0"],
Cell[1036746, 18490, 170, 4, 2173, "Print",ExpressionUUID->"c36ab452-398d-4e43-afcb-110abef93940"],
Cell[1036919, 18496, 182, 4, 2173, "Print",ExpressionUUID->"6ab77415-ccb3-4b7f-ba94-b3d338251c0e"],
Cell[1037104, 18502, 2435, 64, 9976, "Print",ExpressionUUID->"c2cd7dc8-635d-4807-8dad-687616e0224c"],
Cell[1039542, 18568, 340, 12, 2173, "Print",ExpressionUUID->"87fa1c1a-1624-47ab-8a55-2b1e3d46957f"],
Cell[1039885, 18582, 350, 12, 2173, "Print",ExpressionUUID->"475a695f-2d11-4403-9687-69694553ba1e"],
Cell[1040238, 18596, 515, 15, 2173, "Print",ExpressionUUID->"cc79d660-d234-4aa7-a220-30b6a9171e47"],
Cell[1040756, 18613, 203, 4, 2173, "Print",ExpressionUUID->"0aabd1e8-b982-4261-a583-faedad43c71b"],
Cell[1040962, 18619, 182, 4, 2173, "Print",ExpressionUUID->"1d215412-03fc-40ac-acd8-d3f750273fb2"],
Cell[1041147, 18625, 718, 23, 2173, "Print",ExpressionUUID->"01c3b5d3-5a99-4974-b039-6c855e072dfc"],
Cell[1041868, 18650, 432, 14, 2173, "Print",ExpressionUUID->"daa908b4-3fdb-4e99-8e16-30a01987a80e"],
Cell[1042303, 18666, 350, 12, 2173, "Print",ExpressionUUID->"a0f67621-9183-4166-8b78-dd9026ed4993"],
Cell[1042656, 18680, 469, 13, 2173, "Print",ExpressionUUID->"202da669-510c-42ef-9c2d-0f18611d6a31"],
Cell[1043128, 18695, 201, 4, 2173, "Print",ExpressionUUID->"ea92fed8-a2bd-4381-b8cf-67bf8dc74579"],
Cell[1043332, 18701, 180, 4, 2173, "Print",ExpressionUUID->"fbcaf40b-6d77-42fe-8d82-6501cf1c20b4"],
Cell[1043515, 18707, 718, 23, 2173, "Print",ExpressionUUID->"64715082-2ae8-4f0d-b65c-34d893a98b67"],
Cell[1044236, 18732, 432, 14, 2173, "Print",ExpressionUUID->"f642f5be-8e70-48d7-b8f0-4ecd092e4fc2"],
Cell[1044671, 18748, 348, 12, 2173, "Print",ExpressionUUID->"6cdbb059-99a9-4793-a6d4-6f66972b31fa"],
Cell[1045022, 18762, 468, 13, 2173, "Print",ExpressionUUID->"6c8b9411-e9aa-4ae5-ba8b-5d240f2531b5"],
Cell[1045493, 18777, 194, 4, 2173, "Print",ExpressionUUID->"408c3753-44e4-4be0-8f8c-43b70e5834d4"],
Cell[1045690, 18783, 720, 23, 2173, "Print",ExpressionUUID->"b1f277a3-e8e0-4f6b-bb90-e812dbd99b46"],
Cell[1046413, 18808, 432, 14, 2173, "Print",ExpressionUUID->"0e8ca140-bf54-4f0a-ab93-10349cd1e0f6"],
Cell[1046848, 18824, 348, 12, 2173, "Print",ExpressionUUID->"2f1d60e4-c97c-4d6a-978c-20aaa25717bc"],
Cell[1047199, 18838, 464, 12, 2173, "Print",ExpressionUUID->"b30c9fc8-ea80-4cd8-85fc-e82baa898bb1"],
Cell[1047666, 18852, 201, 4, 2173, "Print",ExpressionUUID->"bd69a053-dc5a-42d3-9a63-6895a7112c15"],
Cell[1047870, 18858, 187, 4, 2173, "Print",ExpressionUUID->"1d1416f3-c474-483e-9e00-36eaef7dd748"],
Cell[1048060, 18864, 176, 4, 2173, "Print",ExpressionUUID->"53a3367a-ef01-44ed-bb98-29b1723a47aa"],
Cell[1048239, 18870, 720, 23, 2173, "Print",ExpressionUUID->"6daa25fc-3c35-4652-b1b3-6e0457d3d17a"],
Cell[1048962, 18895, 430, 14, 2173, "Print",ExpressionUUID->"d201d526-ab16-48ca-a960-7622905c8c40"],
Cell[1049395, 18911, 348, 12, 2173, "Print",ExpressionUUID->"b203c039-6120-4414-8a56-2fb36a15bbc2"],
Cell[1049746, 18925, 466, 13, 2173, "Print",ExpressionUUID->"4c095171-25f2-491e-b1bc-d0e94dfedc95"],
Cell[1050215, 18940, 197, 4, 2173, "Print",ExpressionUUID->"2b10916a-9982-41f4-9c2e-3edcfa5d043b"],
Cell[1050415, 18946, 720, 23, 2173, "Print",ExpressionUUID->"09a9eed9-faa3-400f-a356-0c3ff5c22639"],
Cell[1051138, 18971, 432, 14, 2173, "Print",ExpressionUUID->"1a0f83da-02b7-4c0c-822c-41a0a72b9a47"],
Cell[1051573, 18987, 350, 12, 2173, "Print",ExpressionUUID->"313248e2-a1da-44d2-ae14-04938453eb3c"],
Cell[1051926, 19001, 469, 13, 2173, "Print",ExpressionUUID->"d86691ad-af0a-459d-92f6-4ca10bf11c43"],
Cell[1052398, 19016, 203, 4, 2173, "Print",ExpressionUUID->"92f80dda-c58c-4018-a277-4b6b0f62facb"],
Cell[1052604, 19022, 186, 4, 2173, "Print",ExpressionUUID->"8bd1aab9-d999-4b1c-8ed0-2969efa185a3"],
Cell[1052793, 19028, 179, 4, 2173, "Print",ExpressionUUID->"480542c4-dba5-4aa0-bb16-3e08027f234d"],
Cell[1052975, 19034, 720, 23, 2173, "Print",ExpressionUUID->"aacaf67c-f5d3-463b-b73c-2442f66a8c93"],
Cell[1053698, 19059, 430, 14, 2173, "Print",ExpressionUUID->"11fde6a3-4bd9-4062-b876-376fd4cbc52c"],
Cell[1054131, 19075, 350, 12, 2173, "Print",ExpressionUUID->"1bf41ded-3cd2-482d-b2b1-562c40a3c290"],
Cell[1054484, 19089, 463, 12, 2173, "Print",ExpressionUUID->"3c72ea89-23fa-42e2-bc0f-31e45a2fb5a9"],
Cell[1054950, 19103, 201, 4, 2173, "Print",ExpressionUUID->"c7bc034d-c8b3-44a7-9b1b-bff0b7ada0a1"],
Cell[1055154, 19109, 189, 4, 2173, "Print",ExpressionUUID->"ffd974c3-5ed8-4a73-94cf-cd7ff5a3a3f3"],
Cell[1055346, 19115, 179, 4, 2173, "Print",ExpressionUUID->"c622ad0a-d989-4a50-9db8-12ecc3bb6d08"],
Cell[1055528, 19121, 720, 23, 2173, "Print",ExpressionUUID->"ccc1d3b6-4946-4b5b-ad29-e80388310835"],
Cell[1056251, 19146, 432, 14, 2173, "Print",ExpressionUUID->"3b72d748-abb0-4ea1-8183-d9902b771143"],
Cell[1056686, 19162, 350, 12, 2173, "Print",ExpressionUUID->"74ff03ef-510e-495c-ac67-d8284e8b520d"],
Cell[1057039, 19176, 466, 13, 2173, "Print",ExpressionUUID->"dbb15a40-4faf-45d6-8db4-d9dce986f929"],
Cell[1057508, 19191, 201, 4, 2173, "Print",ExpressionUUID->"3edea628-f439-46fb-97e1-cca84e1a05dd"],
Cell[1057712, 19197, 188, 4, 2173, "Print",ExpressionUUID->"84f7302f-587e-4051-99df-dbd7b8c8b36b"],
Cell[1057903, 19203, 190, 4, 2173, "Print",ExpressionUUID->"d7e2e75e-6444-4d9e-96bb-02b5930c25f8"],
Cell[1058096, 19209, 718, 23, 2173, "Print",ExpressionUUID->"4b018c4e-0884-4171-8f2e-c7e933579e70"],
Cell[1058817, 19234, 432, 14, 2173, "Print",ExpressionUUID->"6618f062-9837-4935-be62-5c42a4ae816c"],
Cell[1059252, 19250, 348, 12, 2173, "Print",ExpressionUUID->"05976f48-7bc6-4e03-8c4c-3e9839b35502"],
Cell[1059603, 19264, 466, 13, 2173, "Print",ExpressionUUID->"db3f1ab8-001d-4329-81bb-91e9f31e05ad"],
Cell[1060072, 19279, 200, 4, 2173, "Print",ExpressionUUID->"294e9342-dfaf-4bc2-a3a2-faa7be8553f5"],
Cell[1060275, 19285, 186, 4, 2173, "Print",ExpressionUUID->"2f122942-a201-49b2-ac9f-978a117e939f"],
Cell[1060464, 19291, 177, 4, 2173, "Print",ExpressionUUID->"3afec6c1-a191-4b96-b016-1152d0f2b516"],
Cell[1060644, 19297, 718, 23, 2173, "Print",ExpressionUUID->"063d2834-2d9b-46c6-b3b5-9f6263208dce"],
Cell[1061365, 19322, 432, 14, 2173, "Print",ExpressionUUID->"1b00bc8c-9c7b-4f37-8e1f-ae4f6995b0c7"],
Cell[1061800, 19338, 350, 12, 2173, "Print",ExpressionUUID->"8bf7717d-e718-4080-b4af-4986e77f5d9b"],
Cell[1062153, 19352, 468, 13, 2173, "Print",ExpressionUUID->"1f2ddf1f-362f-42ab-856b-34d1bc3d3bf9"],
Cell[1062624, 19367, 201, 4, 2173, "Print",ExpressionUUID->"4e64c85d-484a-4129-9051-69e8878789d6"],
Cell[1062828, 19373, 189, 4, 2173, "Print",ExpressionUUID->"23e0624e-bddf-4f17-8d6b-4ec1fbe4decf"],
Cell[1063020, 19379, 177, 4, 2173, "Print",ExpressionUUID->"62bd4813-4bd0-4023-8c33-6f044b3f2863"],
Cell[1063200, 19385, 382, 12, 2173, "Print",ExpressionUUID->"98177754-b89e-4273-971d-24fc85b0c1dd"],
Cell[1063585, 19399, 229, 6, 3723, "Print",ExpressionUUID->"1a6f99d2-4b31-4192-ad70-127c65681845"],
Cell[1063817, 19407, 789, 24, 2464, "Print",ExpressionUUID->"d830836d-2066-4f97-8b97-db0b2495f65d"],
Cell[1064609, 19433, 370, 12, 2173, "Print",ExpressionUUID->"e253be03-f34d-4378-afb8-6aa0c0d032ce"],
Cell[1064982, 19447, 370, 12, 2173, "Print",ExpressionUUID->"00af1267-8ef4-44af-aa3c-5a62ed0c8869"],
Cell[1065355, 19461, 369, 12, 2173, "Print",ExpressionUUID->"02169f73-bb12-4a82-b896-49416c82d74b"],
Cell[1065727, 19475, 454, 14, 2173, "Print",ExpressionUUID->"aae12fb5-8beb-463b-9d8f-f2a77859636e"],
Cell[1066184, 19491, 718, 23, 2173, "Print",ExpressionUUID->"3539b692-2210-4481-b2da-662c93c485f6"],
Cell[1066905, 19516, 438, 14, 2173, "Print",ExpressionUUID->"11e7c726-8c14-4116-a84b-d68f3855ab06"],
Cell[1067346, 19532, 350, 12, 2173, "Print",ExpressionUUID->"324a0a07-70ee-4814-9cd2-c62c9b2442b8"],
Cell[1067699, 19546, 470, 13, 2173, "Print",ExpressionUUID->"4c079ba4-ea6b-4519-a753-132ca7cfa0c2"],
Cell[1068172, 19561, 203, 4, 2173, "Print",ExpressionUUID->"7c5e0d99-9f3b-4835-89ff-6fd925cc1434"],
Cell[1068378, 19567, 188, 4, 2173, "Print",ExpressionUUID->"ca2d8d53-5548-4dd4-848b-8caabfc1da16"],
Cell[1068569, 19573, 177, 4, 2173, "Print",ExpressionUUID->"c3ea7ed4-d4b3-4a49-891b-d3ee61ea92d0"],
Cell[1068749, 19579, 718, 23, 2173, "Print",ExpressionUUID->"96723bb9-9907-45b3-8bb6-b86554287370"],
Cell[1069470, 19604, 435, 14, 2173, "Print",ExpressionUUID->"b5a54e76-bfcf-4893-b2b7-634b54ef4072"],
Cell[1069908, 19620, 352, 12, 2173, "Print",ExpressionUUID->"7ed5adcc-e173-4d64-857e-720c0a059bf3"],
Cell[1070263, 19634, 470, 13, 2173, "Print",ExpressionUUID->"4501ecd5-475b-413b-9680-db0290b2d2eb"],
Cell[1070736, 19649, 201, 4, 2173, "Print",ExpressionUUID->"b33bb461-df45-4980-8496-a543fca44247"],
Cell[1070940, 19655, 186, 4, 2173, "Print",ExpressionUUID->"90134c44-2a7f-428b-b550-a969f3ae5552"],
Cell[1071129, 19661, 188, 4, 2173, "Print",ExpressionUUID->"5134a32e-71ff-472b-be6a-789c963c9d4d"],
Cell[1071320, 19667, 718, 23, 2173, "Print",ExpressionUUID->"82a1535c-dd88-45bc-93b9-4a9f7336cd57"],
Cell[1072041, 19692, 436, 14, 2173, "Print",ExpressionUUID->"1d2d76cc-dd1d-4e4c-9702-cc3f0477d055"],
Cell[1072480, 19708, 352, 12, 2173, "Print",ExpressionUUID->"8befad83-a461-460a-9470-1e9e1e83e780"],
Cell[1072835, 19722, 462, 12, 2173, "Print",ExpressionUUID->"51a1388e-137e-49cd-8bf9-16f064b8af49"],
Cell[1073300, 19736, 203, 4, 2173, "Print",ExpressionUUID->"dbc63dcd-9b8e-4729-8018-3f8d0ac4a9d7"],
Cell[1073506, 19742, 182, 4, 2173, "Print",ExpressionUUID->"204fad1b-92ce-42ac-a23c-08a0bf10b151"],
Cell[1073691, 19748, 720, 23, 2173, "Print",ExpressionUUID->"eea6a2de-0c76-4c3d-8536-f0f055cd7abf"],
Cell[1074414, 19773, 438, 14, 2173, "Print",ExpressionUUID->"04514435-1688-4bc7-a6ac-99b7fdd338e3"],
Cell[1074855, 19789, 352, 12, 2173, "Print",ExpressionUUID->"74b29e53-b7cb-4a17-afdb-fb0309c4617e"],
Cell[1075210, 19803, 469, 13, 2173, "Print",ExpressionUUID->"d610f148-c989-4bfb-b598-f87a02bcee7c"],
Cell[1075682, 19818, 203, 4, 2173, "Print",ExpressionUUID->"d53ca586-ec74-4c70-93a4-3e42a4dea020"],
Cell[1075888, 19824, 180, 4, 2173, "Print",ExpressionUUID->"707c80cb-7642-4aa3-93c1-1a634d0c6f64"],
Cell[1076071, 19830, 718, 23, 2173, "Print",ExpressionUUID->"3be87aef-904f-4302-8a01-ba0b18a7e44f"],
Cell[1076792, 19855, 438, 14, 2173, "Print",ExpressionUUID->"b8c20277-8f96-4471-a9ec-4e4fd3c050c2"],
Cell[1077233, 19871, 352, 12, 2173, "Print",ExpressionUUID->"84567883-d37b-48f8-b91a-364ce9319197"],
Cell[1077588, 19885, 467, 13, 2173, "Print",ExpressionUUID->"4e7b5de9-1516-4ebf-94db-ddd72a912279"],
Cell[1078058, 19900, 201, 4, 2173, "Print",ExpressionUUID->"06fce49d-6c6c-4914-bae8-eec182e558f2"],
Cell[1078262, 19906, 180, 4, 2173, "Print",ExpressionUUID->"a3e26034-7285-4f15-8152-8c8d90d21a18"],
Cell[1078445, 19912, 720, 23, 2173, "Print",ExpressionUUID->"402e4662-f412-4022-a290-2bafffa724a0"],
Cell[1079168, 19937, 436, 14, 2173, "Print",ExpressionUUID->"563acccf-fa2e-4ceb-bbd7-3d7bcdbeaaac"],
Cell[1079607, 19953, 352, 12, 2173, "Print",ExpressionUUID->"ba5a862c-6a18-4797-b863-8f15e6d041cf"],
Cell[1079962, 19967, 467, 13, 2173, "Print",ExpressionUUID->"f4ae0ec5-dd35-4ed8-9bff-da592dc1ad15"],
Cell[1080432, 19982, 200, 4, 2173, "Print",ExpressionUUID->"100c423a-4202-405f-aec2-4974b2236b45"],
Cell[1080635, 19988, 180, 4, 2173, "Print",ExpressionUUID->"560046b0-b2d9-4e5f-90b0-cf76ca9ae508"],
Cell[1080818, 19994, 720, 23, 2173, "Print",ExpressionUUID->"7b364e1a-4e28-4d51-996c-f93dbcd95e77"],
Cell[1081541, 20019, 438, 14, 2173, "Print",ExpressionUUID->"16906f41-fa63-49d2-a7ef-dd3b69da9774"],
Cell[1081982, 20035, 350, 12, 2173, "Print",ExpressionUUID->"06dd6097-dff1-4b27-baeb-d69986108fc3"],
Cell[1082335, 20049, 469, 13, 2173, "Print",ExpressionUUID->"09b5fda6-021e-4754-b4ff-ff9fd3063d36"],
Cell[1082807, 20064, 203, 4, 2173, "Print",ExpressionUUID->"ed2cacee-9368-4952-9856-997d58541487"],
Cell[1083013, 20070, 180, 4, 2173, "Print",ExpressionUUID->"5fe5f1a9-ca7d-4dfc-9b91-585ba08b67f3"],
Cell[1083196, 20076, 720, 23, 2173, "Print",ExpressionUUID->"a60b2a90-1b38-4e1e-baf1-5c897a4e6b94"],
Cell[1083919, 20101, 438, 14, 2173, "Print",ExpressionUUID->"ec3b9216-37e5-418a-9df5-5dbbec6b6fcd"],
Cell[1084360, 20117, 352, 12, 2173, "Print",ExpressionUUID->"34388dd5-ca78-4056-ace5-0b6f951241fd"],
Cell[1084715, 20131, 469, 13, 2173, "Print",ExpressionUUID->"3a4dcfb4-cc57-4593-b412-65d5ab83dc75"],
Cell[1085187, 20146, 201, 4, 2173, "Print",ExpressionUUID->"40c7303f-be0d-4295-9f68-42ce7a89f3b9"],
Cell[1085391, 20152, 182, 4, 2173, "Print",ExpressionUUID->"2423c9f2-ee4b-47dc-a902-068eecb551e5"],
Cell[1085576, 20158, 718, 23, 2173, "Print",ExpressionUUID->"0d18b4b5-08a8-4715-b66a-91bdf1bcb3bb"],
Cell[1086297, 20183, 436, 14, 2173, "Print",ExpressionUUID->"42ca2c7e-6219-4bf1-9d56-040ec2f141aa"],
Cell[1086736, 20199, 350, 12, 2173, "Print",ExpressionUUID->"e72cc0f0-d7df-4d04-88d9-b125ba33cc8f"],
Cell[1087089, 20213, 467, 13, 2173, "Print",ExpressionUUID->"aeb1eedb-3996-4192-a5d6-20f4d0ac947a"],
Cell[1087559, 20228, 203, 4, 2173, "Print",ExpressionUUID->"85371239-c017-480c-a911-843051d200b6"],
Cell[1087765, 20234, 179, 4, 2173, "Print",ExpressionUUID->"216fc2d7-5f49-4119-869f-8efd2c6c466f"],
Cell[1087947, 20240, 718, 23, 2173, "Print",ExpressionUUID->"3398d634-7196-4c33-9e55-b4fe51844bb8"],
Cell[1088668, 20265, 436, 14, 2173, "Print",ExpressionUUID->"ae1610bf-afc5-4035-8270-8f530614b7f2"],
Cell[1089107, 20281, 350, 12, 2173, "Print",ExpressionUUID->"64c7940a-e722-4685-8777-be9c9e06135b"],
Cell[1089460, 20295, 467, 13, 2173, "Print",ExpressionUUID->"aaa554b4-5dbe-4e79-b5ef-7f091282bd17"],
Cell[1089930, 20310, 201, 4, 2173, "Print",ExpressionUUID->"fff021ef-dcc0-4c23-96bc-d78e15d1fa20"],
Cell[1090134, 20316, 182, 4, 2173, "Print",ExpressionUUID->"2b635d81-ba4a-4754-8cbd-67c343ca6d4e"],
Cell[1090319, 20322, 384, 12, 2173, "Print",ExpressionUUID->"3c20dd5f-72b8-41d0-9ad0-cf0c05b7842c"],
Cell[1090706, 20336, 229, 6, 3723, "Print",ExpressionUUID->"b3f0a347-72d8-4b68-b8ec-fbbc9ba6c8a2"],
Cell[1090938, 20344, 844, 25, 4523, "Print",ExpressionUUID->"868fea59-18e1-4b60-813c-cbf0be98967e"],
Cell[1091785, 20371, 370, 12, 2173, "Print",ExpressionUUID->"cfcc361e-a85d-4324-8273-7351968cecb5"],
Cell[1092158, 20385, 370, 12, 2173, "Print",ExpressionUUID->"cc2a8270-c5f6-4d7c-a72e-5bf21d6bdf69"],
Cell[1092531, 20399, 370, 12, 2173, "Print",ExpressionUUID->"7a647351-da0c-4c93-8499-4d2ab2613e65"],
Cell[1092904, 20413, 448, 14, 2173, "Print",ExpressionUUID->"5e82ebea-4a58-46bb-a4bd-186428a3f1c3"],
Cell[1093355, 20429, 718, 23, 2173, "Print",ExpressionUUID->"9b423395-8fcf-4107-bf2a-db4926ab5af9"],
Cell[1094076, 20454, 430, 14, 2173, "Print",ExpressionUUID->"d563978b-6612-4330-b12d-10a52e7afa44"],
Cell[1094509, 20470, 350, 12, 2173, "Print",ExpressionUUID->"59d886fa-b530-467c-852a-51424c0ec314"],
Cell[1094862, 20484, 467, 13, 2173, "Print",ExpressionUUID->"21aeb65c-64a1-4c8c-a45a-2290773d8bfb"],
Cell[1095332, 20499, 201, 4, 2173, "Print",ExpressionUUID->"2657bd80-4c74-468e-8fb5-fcb19f2d2a6c"],
Cell[1095536, 20505, 180, 4, 2173, "Print",ExpressionUUID->"01fb48d1-1775-499d-b0cf-a16128a0ae39"],
Cell[1095719, 20511, 718, 23, 2173, "Print",ExpressionUUID->"9a863904-3fd8-400e-9151-31b3414a8a8a"],
Cell[1096440, 20536, 432, 14, 2173, "Print",ExpressionUUID->"f9845c43-7009-4cb5-95b6-78f9168eb0fe"],
Cell[1096875, 20552, 350, 12, 2173, "Print",ExpressionUUID->"4270daa7-80e9-4f41-b464-660ebde2a320"],
Cell[1097228, 20566, 466, 13, 2173, "Print",ExpressionUUID->"d2b20434-4fee-43a5-9e9e-a036cf75f222"],
Cell[1097697, 20581, 201, 4, 2173, "Print",ExpressionUUID->"8c3adcd2-9196-4f79-8c08-9c0ee4c416c2"],
Cell[1097901, 20587, 182, 4, 2173, "Print",ExpressionUUID->"dfa18e6f-b2c4-4b8a-b2e0-cc5558d7b6d9"],
Cell[1098086, 20593, 718, 23, 2173, "Print",ExpressionUUID->"13ff0f1b-f883-4d66-a16b-e3d9e19230f3"],
Cell[1098807, 20618, 432, 14, 2173, "Print",ExpressionUUID->"b8a8d0a4-9c25-411c-b0bb-e7dc63d45e6b"],
Cell[1099242, 20634, 350, 12, 2173, "Print",ExpressionUUID->"75cfa0c7-6fee-4611-837b-d05f2578477c"],
Cell[1099595, 20648, 467, 13, 2173, "Print",ExpressionUUID->"c3cf80c6-607e-437d-8142-accdacb6f216"],
Cell[1100065, 20663, 203, 4, 2173, "Print",ExpressionUUID->"f35ab7dd-1d33-4aab-858f-b93a063d94d9"],
Cell[1100271, 20669, 180, 4, 2173, "Print",ExpressionUUID->"9357c8df-cafe-4241-ae17-541069f0c407"],
Cell[1100454, 20675, 720, 23, 2173, "Print",ExpressionUUID->"65581503-3947-402e-adbd-d7cb49af5274"],
Cell[1101177, 20700, 430, 14, 2173, "Print",ExpressionUUID->"a373e966-e89b-4719-9396-38f165463161"],
Cell[1101610, 20716, 350, 12, 2173, "Print",ExpressionUUID->"08653603-44a2-460f-bdee-bfc6a2d0e24a"],
Cell[1101963, 20730, 469, 13, 2173, "Print",ExpressionUUID->"42fe97cb-c96a-4547-8813-5ac1e1379afd"],
Cell[1102435, 20745, 201, 4, 2173, "Print",ExpressionUUID->"35ba84e7-c040-4110-9126-edffe20b3433"],
Cell[1102639, 20751, 180, 4, 2173, "Print",ExpressionUUID->"98bb8950-b6d1-4a32-978a-b05f8aa5ac66"],
Cell[1102822, 20757, 718, 23, 2173, "Print",ExpressionUUID->"c3649544-8bb1-4278-a560-d7e3511256be"],
Cell[1103543, 20782, 430, 14, 2173, "Print",ExpressionUUID->"05bdf411-ef26-4f38-8641-da10eed58a97"],
Cell[1103976, 20798, 352, 12, 2173, "Print",ExpressionUUID->"79d828e2-6216-4615-a0a0-82925c2cc5f7"],
Cell[1104331, 20812, 467, 13, 2173, "Print",ExpressionUUID->"5e7e714f-5406-40af-8633-9b1b11b0b853"],
Cell[1104801, 20827, 203, 4, 2173, "Print",ExpressionUUID->"09974931-b50d-4f43-b62a-f24a9dbeb93b"],
Cell[1105007, 20833, 180, 4, 2173, "Print",ExpressionUUID->"6329aadf-ce01-4eda-8281-187f02ebd43c"],
Cell[1105190, 20839, 718, 23, 2173, "Print",ExpressionUUID->"2977a503-137e-499f-8ed6-91df3ca04b27"],
Cell[1105911, 20864, 430, 14, 2173, "Print",ExpressionUUID->"0db3ca5c-fbee-40df-8cac-e3525ffca4da"],
Cell[1106344, 20880, 352, 12, 2173, "Print",ExpressionUUID->"aa24bd09-678f-4b5b-9848-c561ced345fe"],
Cell[1106699, 20894, 467, 13, 2173, "Print",ExpressionUUID->"6f447a64-7e3e-4a51-b695-4b874a5816f4"],
Cell[1107169, 20909, 203, 4, 2173, "Print",ExpressionUUID->"2a7d8dac-a634-498d-a0d2-4d75dcc51935"],
Cell[1107375, 20915, 180, 4, 2173, "Print",ExpressionUUID->"e659703b-afda-4b52-8300-bf89c0de7c26"],
Cell[1107558, 20921, 718, 23, 2173, "Print",ExpressionUUID->"b5fbec63-9823-40a8-b17d-892b2c841c48"],
Cell[1108279, 20946, 430, 14, 2173, "Print",ExpressionUUID->"5be3fa6e-5024-4c21-8eb3-e420f236ee1e"],
Cell[1108712, 20962, 350, 12, 2173, "Print",ExpressionUUID->"1644b877-b709-4d03-9bdd-284e2c695124"],
Cell[1109065, 20976, 469, 13, 2173, "Print",ExpressionUUID->"a0e47654-b677-4c22-89ff-25d007d34c7b"],
Cell[1109537, 20991, 201, 4, 2173, "Print",ExpressionUUID->"e526681c-a787-4e3c-813e-f58b78d2517f"],
Cell[1109741, 20997, 182, 4, 2173, "Print",ExpressionUUID->"eabac7fb-af64-4472-bef5-899508c5344b"],
Cell[1109926, 21003, 718, 23, 2173, "Print",ExpressionUUID->"4833aa16-6f74-4c8f-8d00-303dd08c5a46"],
Cell[1110647, 21028, 429, 14, 2173, "Print",ExpressionUUID->"206b3677-1c9f-4097-8a0f-e8559d8fe938"],
Cell[1111079, 21044, 352, 12, 2173, "Print",ExpressionUUID->"c7207e53-d1b5-4dec-8978-a934474c5b54"],
Cell[1111434, 21058, 469, 13, 2173, "Print",ExpressionUUID->"f2ec1678-4bbc-490c-aeee-413aeb896f69"],
Cell[1111906, 21073, 201, 4, 2173, "Print",ExpressionUUID->"c007b631-c1e6-441a-bf84-4a1ee0308a06"],
Cell[1112110, 21079, 180, 4, 2173, "Print",ExpressionUUID->"692f1bad-521b-4d7f-be16-5aa62cd6b327"],
Cell[1112293, 21085, 720, 23, 2173, "Print",ExpressionUUID->"f1435155-546a-4c52-aa95-84e8afefaa2b"],
Cell[1113016, 21110, 432, 14, 2173, "Print",ExpressionUUID->"2b375b20-fa6f-4e43-a6a1-2581fc809467"],
Cell[1113451, 21126, 352, 12, 2173, "Print",ExpressionUUID->"135acc7b-8108-4a7b-88f0-ee21c6bc40d8"],
Cell[1113806, 21140, 467, 13, 2173, "Print",ExpressionUUID->"ea9dcb3d-cad8-4a40-bcb3-2fa43710c904"],
Cell[1114276, 21155, 201, 4, 2173, "Print",ExpressionUUID->"f96dc29a-6cdd-46a1-b61b-e0bdacdd1759"],
Cell[1114480, 21161, 182, 4, 2173, "Print",ExpressionUUID->"b0cc55e9-113f-48ce-a5b4-711736c757dd"],
Cell[1114665, 21167, 720, 23, 2173, "Print",ExpressionUUID->"5cc2cf84-d1b0-4373-a180-4ecd570e7f91"],
Cell[1115388, 21192, 432, 14, 2173, "Print",ExpressionUUID->"e5216267-f992-446b-ba53-190bf2f1ba51"],
Cell[1115823, 21208, 350, 12, 2173, "Print",ExpressionUUID->"9fd0762a-fa66-4653-aef1-0dcad5300222"],
Cell[1116176, 21222, 467, 13, 2173, "Print",ExpressionUUID->"026d7080-d5c0-42c3-87bf-883c91bf785a"],
Cell[1116646, 21237, 203, 4, 2173, "Print",ExpressionUUID->"56155a4b-a5dd-4ebb-a97a-474d98523ba8"],
Cell[1116852, 21243, 180, 4, 2173, "Print",ExpressionUUID->"fb1d0950-476c-424e-8cad-0ecabe611156"],
Cell[1117035, 21249, 382, 12, 2173, "Print",ExpressionUUID->"4798f85d-ae9f-4be1-8230-2c19e6d34d07"],
Cell[1117420, 21263, 228, 6, 3723, "Print",ExpressionUUID->"b349d841-00ed-4267-95c4-076b62c651a0"],
Cell[1117651, 21271, 846, 25, 4523, "Print",ExpressionUUID->"dd9c151e-e44a-4485-bf71-f43f223d0190"],
Cell[1118500, 21298, 370, 12, 2173, "Print",ExpressionUUID->"aa86e09a-78ff-4d46-a7cc-e2937bc09087"],
Cell[1118873, 21312, 368, 12, 2173, "Print",ExpressionUUID->"f617392e-cf0a-462c-9266-4d1262671a6f"],
Cell[1119244, 21326, 372, 12, 2173, "Print",ExpressionUUID->"23ac26b6-0b4a-457e-b551-49c34a27edc0"],
Cell[1119619, 21340, 446, 14, 2173, "Print",ExpressionUUID->"a5f18b3f-087a-41b0-94b0-cd34a35c2e8d"],
Cell[1120068, 21356, 720, 23, 2173, "Print",ExpressionUUID->"0e12e914-73a0-4da3-9508-c2892c2e5069"],
Cell[1120791, 21381, 430, 14, 2173, "Print",ExpressionUUID->"ded5d268-2419-4ea4-8de6-1f2f3b04a361"],
Cell[1121224, 21397, 350, 12, 2173, "Print",ExpressionUUID->"fc97da54-8457-4650-9aa9-401cf0d4fa16"],
Cell[1121577, 21411, 469, 13, 2173, "Print",ExpressionUUID->"d7fdc7ce-b54d-4d6b-9a06-4840042141be"],
Cell[1122049, 21426, 201, 4, 2173, "Print",ExpressionUUID->"9291609e-d927-4f8d-bfbd-5e82b67c7c81"],
Cell[1122253, 21432, 180, 4, 2173, "Print",ExpressionUUID->"9383ea5d-0148-4c20-acd9-abf5a590f02a"],
Cell[1122436, 21438, 720, 23, 2173, "Print",ExpressionUUID->"1c468334-1287-4427-874e-6257d1d74adc"],
Cell[1123159, 21463, 430, 14, 2173, "Print",ExpressionUUID->"8682ae60-79d2-4567-817d-92722aa2a424"],
Cell[1123592, 21479, 352, 12, 2173, "Print",ExpressionUUID->"a4f1a830-bb47-4e1e-bfac-6fc4a8da7d1b"],
Cell[1123947, 21493, 469, 13, 2173, "Print",ExpressionUUID->"a82bf435-aa5d-45c2-a01b-aad71ccf54a1"],
Cell[1124419, 21508, 201, 4, 2173, "Print",ExpressionUUID->"86207d31-d0fb-4c42-8cdb-8bdedc212904"],
Cell[1124623, 21514, 182, 4, 2173, "Print",ExpressionUUID->"0308c0cd-e1f7-4d24-87a9-4968b4e79d0d"],
Cell[1124808, 21520, 718, 23, 2173, "Print",ExpressionUUID->"7ec3237a-93d2-4de7-a45e-0f2ffb9a50aa"],
Cell[1125529, 21545, 432, 14, 2173, "Print",ExpressionUUID->"8d37c3fb-9142-4e66-8b84-63b3b660603c"],
Cell[1125964, 21561, 352, 12, 2173, "Print",ExpressionUUID->"6fc65074-6a26-4393-ae69-320c92533816"],
Cell[1126319, 21575, 469, 13, 2173, "Print",ExpressionUUID->"0c84f908-55c0-427b-988b-d050bb640ccb"],
Cell[1126791, 21590, 201, 4, 2173, "Print",ExpressionUUID->"6f3227eb-f83b-4216-9fdc-96786bb3b083"],
Cell[1126995, 21596, 182, 4, 2173, "Print",ExpressionUUID->"b1f97679-f94d-40ff-9b80-fd4c92718585"],
Cell[1127180, 21602, 720, 23, 2173, "Print",ExpressionUUID->"3731fd92-c476-4a5c-94bf-c98a31f880d5"],
Cell[1127903, 21627, 432, 14, 2173, "Print",ExpressionUUID->"7609625d-3b34-4e61-b9bb-0ef80bfa240a"],
Cell[1128338, 21643, 350, 12, 2173, "Print",ExpressionUUID->"7f6f439c-7e20-4032-a80a-6bf80dbd6bd9"],
Cell[1128691, 21657, 469, 13, 2173, "Print",ExpressionUUID->"babd6306-66db-4e78-8097-6fe2d0d89174"],
Cell[1129163, 21672, 203, 4, 2173, "Print",ExpressionUUID->"c4e70214-2f27-48b6-a448-277027402488"],
Cell[1129369, 21678, 182, 4, 2173, "Print",ExpressionUUID->"aa48b397-90b4-471a-aa11-4cdc2a514484"],
Cell[1129554, 21684, 717, 23, 2173, "Print",ExpressionUUID->"4182ba31-8312-4a3a-b71d-aeb92d870cc3"],
Cell[1130274, 21709, 430, 14, 2173, "Print",ExpressionUUID->"191f13ee-7018-4629-bf66-8c9b4921283d"],
Cell[1130707, 21725, 350, 12, 2173, "Print",ExpressionUUID->"af6bb3e7-df83-431d-b5f4-d43027f4b64c"],
Cell[1131060, 21739, 469, 13, 2173, "Print",ExpressionUUID->"a74b90b2-09aa-4ba3-9e00-bf1d94224204"],
Cell[1131532, 21754, 203, 4, 2173, "Print",ExpressionUUID->"8cef5bb3-eeff-4e7b-894b-d784d57b101b"],
Cell[1131738, 21760, 182, 4, 2173, "Print",ExpressionUUID->"4a5975d1-7002-4cd2-a32d-be164b52d009"],
Cell[1131923, 21766, 718, 23, 2173, "Print",ExpressionUUID->"9070a60b-769b-4ee7-9c25-64e08474404b"],
Cell[1132644, 21791, 430, 14, 2173, "Print",ExpressionUUID->"63eb9e9b-a8d2-44a5-a8d5-d093d611103e"],
Cell[1133077, 21807, 352, 12, 2173, "Print",ExpressionUUID->"05e111e8-e798-4824-958a-9a2ed27394b0"],
Cell[1133432, 21821, 469, 13, 2173, "Print",ExpressionUUID->"f491718e-8ab0-4316-bed3-0b48e7c45de4"],
Cell[1133904, 21836, 201, 4, 2173, "Print",ExpressionUUID->"b70e308f-2dfa-4b09-a1ea-d981acafb536"],
Cell[1134108, 21842, 180, 4, 2173, "Print",ExpressionUUID->"874a7904-7ab6-4a07-a128-534c79119ee5"],
Cell[1134291, 21848, 720, 23, 2173, "Print",ExpressionUUID->"7f89847a-040f-4dec-8d27-b5fe1ca3320a"],
Cell[1135014, 21873, 430, 14, 2173, "Print",ExpressionUUID->"e847ce74-7bf7-4178-9e9f-64c0608eeb6f"],
Cell[1135447, 21889, 352, 12, 2173, "Print",ExpressionUUID->"dede798e-6b13-40c2-a1b3-ec4c516fc53c"],
Cell[1135802, 21903, 469, 13, 2173, "Print",ExpressionUUID->"433d5140-90c4-49e2-967a-c0633e9d5665"],
Cell[1136274, 21918, 203, 4, 2173, "Print",ExpressionUUID->"ed515526-477c-40c0-a47f-d40aa9c0d38f"],
Cell[1136480, 21924, 180, 4, 2173, "Print",ExpressionUUID->"93e9a0d8-c813-4c4b-a8f1-2e42a5f29b25"],
Cell[1136663, 21930, 720, 23, 2173, "Print",ExpressionUUID->"3452ef6b-2a10-443c-af73-59765db4d609"],
Cell[1137386, 21955, 432, 14, 2173, "Print",ExpressionUUID->"7b3f2422-9b21-49a2-979f-2a7d519f2a78"],
Cell[1137821, 21971, 352, 12, 2173, "Print",ExpressionUUID->"d040e723-398f-4991-a2b9-2f0f2648c088"],
Cell[1138176, 21985, 467, 13, 2173, "Print",ExpressionUUID->"040dc6c2-8795-4d38-bfb7-9eadaedea5a3"],
Cell[1138646, 22000, 203, 4, 2173, "Print",ExpressionUUID->"94b018ba-2b88-4dcb-bbf7-72db5e9656c5"],
Cell[1138852, 22006, 180, 4, 2173, "Print",ExpressionUUID->"9efbb3b2-9a8e-4ffc-8328-2103331b5da9"],
Cell[1139035, 22012, 718, 23, 2173, "Print",ExpressionUUID->"993ad767-ab2c-4791-8dbd-de691ee22f78"],
Cell[1139756, 22037, 430, 14, 2173, "Print",ExpressionUUID->"ce037721-e280-4d63-b687-894da05ea688"],
Cell[1140189, 22053, 352, 12, 2173, "Print",ExpressionUUID->"dc483080-6af6-4221-9b55-5a0914a0aa78"],
Cell[1140544, 22067, 467, 13, 2173, "Print",ExpressionUUID->"8a0ef3c2-4f17-457f-9a4a-1c6295a1fda7"],
Cell[1141014, 22082, 201, 4, 2173, "Print",ExpressionUUID->"dfdcb111-08c0-49e9-b2dc-5c8cfb2d7e9c"],
Cell[1141218, 22088, 182, 4, 2173, "Print",ExpressionUUID->"44fee390-13a6-481e-a57d-f997c00ca34b"],
Cell[1141403, 22094, 717, 23, 2173, "Print",ExpressionUUID->"961bcb67-57e5-405d-98dc-fa2533e29e1c"],
Cell[1142123, 22119, 432, 14, 2173, "Print",ExpressionUUID->"7aea0fc6-94ad-4842-8895-611175844fc7"],
Cell[1142558, 22135, 352, 12, 2173, "Print",ExpressionUUID->"3ca5a7e8-e57c-4cc9-9884-2cecec5471fb"],
Cell[1142913, 22149, 469, 13, 2173, "Print",ExpressionUUID->"a638d5b0-5556-4e4c-a8b8-d8caa793421d"],
Cell[1143385, 22164, 203, 4, 2173, "Print",ExpressionUUID->"ae789035-5945-4e25-b67c-053ba0d3c393"],
Cell[1143591, 22170, 182, 4, 2173, "Print",ExpressionUUID->"de974714-01dd-4d25-a9d8-1a9b32383ccd"],
Cell[1143776, 22176, 384, 12, 2173, "Print",ExpressionUUID->"399eb759-d834-4876-8249-29d83bd93f64"],
Cell[1144163, 22190, 229, 6, 3723, "Print",ExpressionUUID->"56f34a82-0798-4bf5-8a04-9f729a557d8b"],
Cell[1144395, 22198, 846, 25, 4523, "Print",ExpressionUUID->"3c4c7272-c98e-4b31-b9f8-a41e60d07646"],
Cell[1145244, 22225, 372, 12, 2173, "Print",ExpressionUUID->"255d89b8-9df7-438c-a20f-4982dba46ff0"],
Cell[1145619, 22239, 370, 12, 2173, "Print",ExpressionUUID->"9e143365-64ff-4dbf-856a-d3be6aef2291"],
Cell[1145992, 22253, 369, 12, 2173, "Print",ExpressionUUID->"fe374eca-1782-4e4d-94a1-6b1c025f48f9"],
Cell[1146364, 22267, 448, 14, 2173, "Print",ExpressionUUID->"f812f092-33f9-47c4-9b32-4bbc59131662"],
Cell[1146815, 22283, 720, 23, 2173, "Print",ExpressionUUID->"a22b8ae9-82ad-4494-9848-cdae61cb34b8"],
Cell[1147538, 22308, 430, 14, 2173, "Print",ExpressionUUID->"f0c194a7-3704-461c-b053-af96f2e20697"],
Cell[1147971, 22324, 352, 12, 2173, "Print",ExpressionUUID->"7f4939f5-154d-4f97-927f-f2e5b536922f"],
Cell[1148326, 22338, 467, 13, 2173, "Print",ExpressionUUID->"b355b1d9-ce94-48ef-a3cb-1e3019d21a7d"],
Cell[1148796, 22353, 200, 4, 2173, "Print",ExpressionUUID->"0f62d3ed-7b16-488e-8c0c-9a8951fcef0d"],
Cell[1148999, 22359, 182, 4, 2173, "Print",ExpressionUUID->"3bfeafb4-7c6c-44ee-8257-6538a3d93731"],
Cell[1149184, 22365, 718, 23, 2173, "Print",ExpressionUUID->"20c02847-64a1-47c0-8d89-20d3fb16cccd"],
Cell[1149905, 22390, 430, 14, 2173, "Print",ExpressionUUID->"e7a17148-7181-4333-ba56-1067f632f7bf"],
Cell[1150338, 22406, 350, 12, 2173, "Print",ExpressionUUID->"38df9b5e-02bf-4f70-9fb8-56e86f325772"],
Cell[1150691, 22420, 469, 13, 2173, "Print",ExpressionUUID->"222852bc-f532-4035-94de-8cc7b6a98529"],
Cell[1151163, 22435, 203, 4, 2173, "Print",ExpressionUUID->"19bd834b-beac-47f7-bbbf-3905827c0d9f"],
Cell[1151369, 22441, 182, 4, 2173, "Print",ExpressionUUID->"9d625159-9a0f-44c7-950f-0ba64db35a5d"],
Cell[1151554, 22447, 720, 23, 2173, "Print",ExpressionUUID->"0a040b08-23b5-4ef2-87d3-541f5c8402fe"],
Cell[1152277, 22472, 432, 14, 2173, "Print",ExpressionUUID->"24f65dab-dceb-449d-aaa4-6dbec732e84e"],
Cell[1152712, 22488, 350, 12, 2173, "Print",ExpressionUUID->"601750b9-7387-44bd-ae9b-1a4743209610"],
Cell[1153065, 22502, 467, 13, 2173, "Print",ExpressionUUID->"4f7f9692-1e5c-4435-806b-e139e8272d0f"],
Cell[1153535, 22517, 201, 4, 2173, "Print",ExpressionUUID->"1925a034-2468-49a8-a592-ea9ad7fe9858"],
Cell[1153739, 22523, 180, 4, 2173, "Print",ExpressionUUID->"0c501ccf-9aa5-4103-82f7-235ea81d7050"],
Cell[1153922, 22529, 718, 23, 2173, "Print",ExpressionUUID->"e6722a5b-7627-4e83-8192-a8b2b01a851b"],
Cell[1154643, 22554, 432, 14, 2173, "Print",ExpressionUUID->"8f24876b-b742-4eec-a8cb-b85b7eeba4c9"],
Cell[1155078, 22570, 352, 12, 2173, "Print",ExpressionUUID->"9f995a32-7457-41b3-9897-d1c86a730a01"],
Cell[1155433, 22584, 467, 13, 2173, "Print",ExpressionUUID->"e75c3ec5-860d-4765-bc71-80a03a34a108"],
Cell[1155903, 22599, 201, 4, 2173, "Print",ExpressionUUID->"afeae150-d0c7-4875-b2ed-9dd49614c00a"],
Cell[1156107, 22605, 180, 4, 2173, "Print",ExpressionUUID->"7db6175a-4f3c-4c75-8b70-28572eaa5713"],
Cell[1156290, 22611, 720, 23, 2173, "Print",ExpressionUUID->"34a3d630-deab-470f-bc15-7a5346176d8b"],
Cell[1157013, 22636, 432, 14, 2173, "Print",ExpressionUUID->"3a368b9e-a744-4629-a20e-5892ead84fb3"],
Cell[1157448, 22652, 352, 12, 2173, "Print",ExpressionUUID->"80652a46-2ff5-40d3-b802-43e6904817db"],
Cell[1157803, 22666, 469, 13, 2173, "Print",ExpressionUUID->"2e153065-95fb-4020-96f5-6e2bd747602c"],
Cell[1158275, 22681, 203, 4, 2173, "Print",ExpressionUUID->"7a8887ac-f93b-4ff2-99ad-c042c5dfa234"],
Cell[1158481, 22687, 180, 4, 2173, "Print",ExpressionUUID->"cdba3e30-7ab5-4c31-b4ee-e36b016dbdf1"],
Cell[1158664, 22693, 718, 23, 2173, "Print",ExpressionUUID->"f98267b0-7aaf-420c-9270-388e5e87156b"],
Cell[1159385, 22718, 430, 14, 2173, "Print",ExpressionUUID->"1f69b5bf-8923-4436-a197-64bd23dd10d5"],
Cell[1159818, 22734, 352, 12, 2173, "Print",ExpressionUUID->"72866df6-58a2-437c-9780-2ecd8048b541"],
Cell[1160173, 22748, 467, 13, 2173, "Print",ExpressionUUID->"7889b737-5952-449b-bd4d-0300af4b88be"],
Cell[1160643, 22763, 203, 4, 2173, "Print",ExpressionUUID->"5362ee43-4722-4824-9798-c6c032b66a81"],
Cell[1160849, 22769, 180, 4, 2173, "Print",ExpressionUUID->"4ce27623-1b50-4af5-ad45-dffbbba2189c"],
Cell[1161032, 22775, 718, 23, 2173, "Print",ExpressionUUID->"f1a70eea-11da-4444-b4c3-32e3976e8377"],
Cell[1161753, 22800, 432, 14, 2173, "Print",ExpressionUUID->"8e54ef84-d4ad-4812-a610-d29db1c7431d"],
Cell[1162188, 22816, 350, 12, 2173, "Print",ExpressionUUID->"bb49d66f-3619-49f4-9847-2d19fe966e7b"],
Cell[1162541, 22830, 467, 13, 2173, "Print",ExpressionUUID->"233225e4-046d-423d-8cf0-f61628a40f18"],
Cell[1163011, 22845, 201, 4, 2173, "Print",ExpressionUUID->"27a1a446-8b27-421b-9f3c-64704fed4de3"],
Cell[1163215, 22851, 180, 4, 2173, "Print",ExpressionUUID->"012b8ce5-02bf-456d-bd13-3072f2e25eb2"],
Cell[1163398, 22857, 718, 23, 2173, "Print",ExpressionUUID->"b9daf434-a20f-4809-af51-a4abe187a59c"],
Cell[1164119, 22882, 432, 14, 2173, "Print",ExpressionUUID->"16deb9fb-fda9-46b1-bf02-30d34c95a305"],
Cell[1164554, 22898, 352, 12, 2173, "Print",ExpressionUUID->"f60a4166-c58a-419b-8b87-1c1470ea1a97"],
Cell[1164909, 22912, 467, 13, 2173, "Print",ExpressionUUID->"7b65e455-c06e-40d4-aae3-e97cd5a36069"],
Cell[1165379, 22927, 201, 4, 2173, "Print",ExpressionUUID->"21a4040f-76d9-46c3-a4b1-0eaa08184460"],
Cell[1165583, 22933, 180, 4, 2173, "Print",ExpressionUUID->"cb77e9d6-9457-43c5-8060-719ec0396c0e"],
Cell[1165766, 22939, 720, 23, 2173, "Print",ExpressionUUID->"2c53ad9c-d3f3-4cf4-87a3-2e1457ed52cb"],
Cell[1166489, 22964, 430, 14, 2173, "Print",ExpressionUUID->"aa23de57-2c47-4dff-adb8-d39d54a9e9cd"],
Cell[1166922, 22980, 352, 12, 2173, "Print",ExpressionUUID->"ddd9936a-1ab7-40ff-8b4b-8a8ac8927cd2"],
Cell[1167277, 22994, 469, 13, 2173, "Print",ExpressionUUID->"5d7f2a6a-76f5-4178-aa0a-ac69b4a8fbce"],
Cell[1167749, 23009, 203, 4, 2173, "Print",ExpressionUUID->"13e84687-3272-44f3-b2ab-fa14ba4ef65e"],
Cell[1167955, 23015, 180, 4, 2173, "Print",ExpressionUUID->"f066e906-9e07-4020-bf4e-903475491f1c"],
Cell[1168138, 23021, 720, 23, 2173, "Print",ExpressionUUID->"0b51dfd2-c111-43e4-9aa2-a4f119873bd3"],
Cell[1168861, 23046, 429, 14, 2173, "Print",ExpressionUUID->"5b84e565-9c47-40aa-9614-8c71de0c0db3"],
Cell[1169293, 23062, 352, 12, 2173, "Print",ExpressionUUID->"cd34c56f-1c92-4586-bb28-a45fd2719e61"],
Cell[1169648, 23076, 469, 13, 2173, "Print",ExpressionUUID->"de5bbb99-2367-496e-b257-39eb77ca8d37"],
Cell[1170120, 23091, 201, 4, 2173, "Print",ExpressionUUID->"71b30463-9c17-42cd-8654-facefe25fea1"],
Cell[1170324, 23097, 179, 4, 2173, "Print",ExpressionUUID->"166336aa-3c4a-4e66-b600-406b6e04c05d"],
Cell[1170506, 23103, 382, 12, 2173, "Print",ExpressionUUID->"1145550a-c9d1-4ad9-89f6-9dfda9e09394"],
Cell[1170891, 23117, 231, 6, 3723, "Print",ExpressionUUID->"fb9e719f-60ea-49cf-bf92-f39c91ccc48b"],
Cell[1171125, 23125, 844, 25, 4523, "Print",ExpressionUUID->"8d63387c-8898-4b7b-b023-003cfbd0f486"],
Cell[1171972, 23152, 370, 12, 2173, "Print",ExpressionUUID->"fb07b01c-b04a-4daf-8c1b-e24e6c1e7af1"],
Cell[1172345, 23166, 368, 12, 2173, "Print",ExpressionUUID->"907f1d5b-3bc0-4a29-ab8d-da8774b896ef"],
Cell[1172716, 23180, 372, 12, 2173, "Print",ExpressionUUID->"b3ffda60-e2b9-4b2e-9374-01fe878abe27"],
Cell[1173091, 23194, 448, 14, 2173, "Print",ExpressionUUID->"92353e7f-c319-421f-9ac6-119896235552"],
Cell[1173542, 23210, 717, 23, 2173, "Print",ExpressionUUID->"baf78dff-e49f-48cf-affa-6603ae032df3"],
Cell[1174262, 23235, 432, 14, 2173, "Print",ExpressionUUID->"3028a646-f0b1-49ce-ac7a-3e2ba08c9b28"],
Cell[1174697, 23251, 350, 12, 2173, "Print",ExpressionUUID->"a364fa30-dc88-4d91-b1f0-dad1c48ce36e"],
Cell[1175050, 23265, 469, 13, 2173, "Print",ExpressionUUID->"844c50b1-f59c-4541-9bc7-8a44025fba3a"],
Cell[1175522, 23280, 201, 4, 2173, "Print",ExpressionUUID->"07e1c66d-cbe6-4924-ab59-b8ad61ff5aff"],
Cell[1175726, 23286, 182, 4, 2173, "Print",ExpressionUUID->"cc61d35c-2e8b-4f98-8444-dcf234b7b4b6"],
Cell[1175911, 23292, 718, 23, 2173, "Print",ExpressionUUID->"c63edab8-d447-4482-9e19-c61e8d87106f"],
Cell[1176632, 23317, 430, 14, 2173, "Print",ExpressionUUID->"cf2a6913-e2e1-4536-b544-2cd57f9eb4db"],
Cell[1177065, 23333, 352, 12, 2173, "Print",ExpressionUUID->"631345a7-d2ca-49dc-a6aa-f5b57ed5ff35"],
Cell[1177420, 23347, 467, 13, 2173, "Print",ExpressionUUID->"f550110f-0c7e-4eed-9cf3-b14410b0c8ae"],
Cell[1177890, 23362, 200, 4, 2173, "Print",ExpressionUUID->"d104f101-1d29-4d15-b8c2-fa8ee11875b9"],
Cell[1178093, 23368, 182, 4, 2173, "Print",ExpressionUUID->"c0e80656-70bc-4d1c-b01d-383b80dffdb2"],
Cell[1178278, 23374, 718, 23, 2173, "Print",ExpressionUUID->"c0b34aa9-f0a7-43c1-ae1f-9b41813ac370"],
Cell[1178999, 23399, 432, 14, 2173, "Print",ExpressionUUID->"63e20814-fd55-4ef8-b58f-e664e9df9235"],
Cell[1179434, 23415, 350, 12, 2173, "Print",ExpressionUUID->"9ba9bac7-6ac3-48d6-804c-389976ea9782"],
Cell[1179787, 23429, 467, 13, 2173, "Print",ExpressionUUID->"fe4d923f-edeb-441b-8e45-ef50ce691ea4"],
Cell[1180257, 23444, 201, 4, 2173, "Print",ExpressionUUID->"8cff77ac-26c9-411f-aefc-66371dd732e2"],
Cell[1180461, 23450, 182, 4, 2173, "Print",ExpressionUUID->"c71d261b-b61d-4321-9bff-d3e50d2abdb4"],
Cell[1180646, 23456, 720, 23, 2173, "Print",ExpressionUUID->"e2bec11d-2b55-4cac-9935-ee012f75f9bf"],
Cell[1181369, 23481, 430, 14, 2173, "Print",ExpressionUUID->"136bd884-d6a2-46f2-a057-b577a97b5199"],
Cell[1181802, 23497, 350, 12, 2173, "Print",ExpressionUUID->"c0b75dde-fd0a-49e8-9891-b989d398a7f2"],
Cell[1182155, 23511, 467, 13, 2173, "Print",ExpressionUUID->"7a225431-ec56-426a-a24c-683222437aba"],
Cell[1182625, 23526, 201, 4, 2173, "Print",ExpressionUUID->"f39a64b4-8bbe-42b8-bb5f-64abb73dcf9c"],
Cell[1182829, 23532, 180, 4, 2173, "Print",ExpressionUUID->"ba497c26-7052-47f2-ae82-d10551f86825"],
Cell[1183012, 23538, 718, 23, 2173, "Print",ExpressionUUID->"fc85ebe7-cd7d-4ad2-9588-1f8856431689"],
Cell[1183733, 23563, 430, 14, 2173, "Print",ExpressionUUID->"ec11a655-6463-4764-a564-fc97d83002ef"],
Cell[1184166, 23579, 352, 12, 2173, "Print",ExpressionUUID->"9aa3a1fc-d42b-41da-b5f7-332427a33960"],
Cell[1184521, 23593, 469, 13, 2173, "Print",ExpressionUUID->"d133cb40-a33d-4e0e-9fcf-88aa14ab78b5"],
Cell[1184993, 23608, 201, 4, 2173, "Print",ExpressionUUID->"242b494f-c047-4f72-85eb-3998fd199375"],
Cell[1185197, 23614, 179, 4, 2173, "Print",ExpressionUUID->"6f1262de-cde2-4a9b-ac69-a8694b8c2a3a"],
Cell[1185379, 23620, 718, 23, 2173, "Print",ExpressionUUID->"97012599-1981-452d-ab8f-36c5322cb164"],
Cell[1186100, 23645, 432, 14, 2173, "Print",ExpressionUUID->"06df9ef1-ae1b-4674-b39f-07a7c5599606"],
Cell[1186535, 23661, 350, 12, 2173, "Print",ExpressionUUID->"7b949d8a-c88f-429a-b8e1-6de97bc99f10"],
Cell[1186888, 23675, 467, 13, 2173, "Print",ExpressionUUID->"fdbb00e3-c396-4d01-9e74-85d43a48ba8e"],
Cell[1187358, 23690, 203, 4, 2173, "Print",ExpressionUUID->"f5fa2fe1-4b9a-4531-8eca-9a10da8010f2"],
Cell[1187564, 23696, 180, 4, 2173, "Print",ExpressionUUID->"d67d7e18-82c5-4a05-a6be-0b6c76f9a916"],
Cell[1187747, 23702, 718, 23, 2173, "Print",ExpressionUUID->"ab7e7ea5-20c9-4989-b6f6-2d9677e68606"],
Cell[1188468, 23727, 430, 14, 2173, "Print",ExpressionUUID->"f6f0d10a-cfe1-4aee-8381-f803341dbde8"],
Cell[1188901, 23743, 350, 12, 2173, "Print",ExpressionUUID->"6f7509dd-db3e-4f8b-b6a6-e95c8f11812a"],
Cell[1189254, 23757, 467, 13, 2173, "Print",ExpressionUUID->"2ab6b3dd-2868-4329-9b5a-4653f2dfc78e"],
Cell[1189724, 23772, 203, 4, 2173, "Print",ExpressionUUID->"dedb409d-3a4e-4c50-beeb-21bc38d29228"],
Cell[1189930, 23778, 180, 4, 2173, "Print",ExpressionUUID->"d57c878c-2181-407b-9360-708551232d89"],
Cell[1190113, 23784, 720, 23, 2173, "Print",ExpressionUUID->"e7f4b51e-667c-4638-a945-c40336296dc5"],
Cell[1190836, 23809, 430, 14, 2173, "Print",ExpressionUUID->"06d0f6ad-9361-48fe-b9d7-d669fb70de1a"],
Cell[1191269, 23825, 352, 12, 2173, "Print",ExpressionUUID->"baab77d2-a612-49d0-8108-dc96d1b5c084"],
Cell[1191624, 23839, 467, 13, 2173, "Print",ExpressionUUID->"313d8ef6-09e9-4514-89d5-9b0df4e6e439"],
Cell[1192094, 23854, 200, 4, 2173, "Print",ExpressionUUID->"80f46533-0592-414c-901a-a6405e92f394"],
Cell[1192297, 23860, 182, 4, 2173, "Print",ExpressionUUID->"c5ba493c-b94a-4f03-8827-ce0ae34680b9"],
Cell[1192482, 23866, 720, 23, 2173, "Print",ExpressionUUID->"048dbfbe-541d-4a40-92b8-211cf6babc96"],
Cell[1193205, 23891, 432, 14, 2173, "Print",ExpressionUUID->"e0f2bdd4-34ba-462b-9bff-b1de3a5afb0b"],
Cell[1193640, 23907, 352, 12, 2173, "Print",ExpressionUUID->"cfad83dc-a5cd-4418-adf7-f3782937f3b8"],
Cell[1193995, 23921, 469, 13, 2173, "Print",ExpressionUUID->"034db5dd-3763-4df3-bf8e-157b50472d70"],
Cell[1194467, 23936, 203, 4, 2173, "Print",ExpressionUUID->"b26a5690-9772-45d7-98a9-cbdaa4cbc092"],
Cell[1194673, 23942, 182, 4, 2173, "Print",ExpressionUUID->"56da5805-f154-450c-ad3d-17a4903884bf"],
Cell[1194858, 23948, 718, 23, 2173, "Print",ExpressionUUID->"df996729-48fa-4b6d-97b1-7cd34704732f"],
Cell[1195579, 23973, 432, 14, 2173, "Print",ExpressionUUID->"e757384e-b351-4215-90f4-62f6878fa493"],
Cell[1196014, 23989, 350, 12, 2173, "Print",ExpressionUUID->"14a7a2d7-0901-455b-8b3c-5ba7bae3b31d"],
Cell[1196367, 24003, 469, 13, 2173, "Print",ExpressionUUID->"fecb60b1-d905-40fa-824c-af3e7ce5f372"],
Cell[1196839, 24018, 203, 4, 2173, "Print",ExpressionUUID->"22866aea-58d7-4150-b5a2-9f1b55770a77"],
Cell[1197045, 24024, 180, 4, 2173, "Print",ExpressionUUID->"81941610-d298-4314-be5b-e792eba4c1a6"],
Cell[1197228, 24030, 381, 12, 2173, "Print",ExpressionUUID->"7b736098-4451-4cfe-afb7-23f22265bb22"],
Cell[1197612, 24044, 229, 6, 3723, "Print",ExpressionUUID->"f04aaa46-9385-4121-853c-a9cf3378e8e0"],
Cell[1197844, 24052, 846, 25, 4523, "Print",ExpressionUUID->"cf5d3f74-a719-4db1-af74-0b427000f687"],
Cell[1198693, 24079, 370, 12, 2173, "Print",ExpressionUUID->"735adb3b-2384-415a-b700-e1cee9ea2de2"],
Cell[1199066, 24093, 368, 12, 2173, "Print",ExpressionUUID->"e1706ba6-dfe6-4ee2-b286-fa2e4f1e7b8f"],
Cell[1199437, 24107, 372, 12, 2173, "Print",ExpressionUUID->"6e64d37d-fc08-4c80-95da-bfb27f47b3b6"],
Cell[1199812, 24121, 448, 14, 2173, "Print",ExpressionUUID->"3b0df013-e3c6-413c-98d3-715791660d2d"],
Cell[1200263, 24137, 718, 23, 2173, "Print",ExpressionUUID->"d45cf877-cdb6-4ebf-a75a-feead9397be2"],
Cell[1200984, 24162, 430, 14, 2173, "Print",ExpressionUUID->"9115500f-638a-4d53-bd53-d15335491ff2"],
Cell[1201417, 24178, 352, 12, 2173, "Print",ExpressionUUID->"f96d8f7f-7d56-4ad2-9bc7-d114b91e8be0"],
Cell[1201772, 24192, 469, 13, 2173, "Print",ExpressionUUID->"10c0f242-172e-4287-a711-3ce9db959663"],
Cell[1202244, 24207, 201, 4, 2173, "Print",ExpressionUUID->"11aa4dcb-a3d7-4c2c-ade4-5492085516a2"],
Cell[1202448, 24213, 180, 4, 2173, "Print",ExpressionUUID->"0f6be155-8d64-46bd-bc13-1ff65e6e5e2f"],
Cell[1202631, 24219, 718, 23, 2173, "Print",ExpressionUUID->"c80d5dfb-547c-411b-8339-03a7fd414de3"],
Cell[1203352, 24244, 430, 14, 2173, "Print",ExpressionUUID->"d17bfbf4-3aba-4575-9e8c-b1c9311cd264"],
Cell[1203785, 24260, 350, 12, 2173, "Print",ExpressionUUID->"a55a2e39-b1fc-405d-b79f-7137aa6401a0"],
Cell[1204138, 24274, 469, 13, 2173, "Print",ExpressionUUID->"5eba5417-851a-4a53-99da-45b83cbbe793"],
Cell[1204610, 24289, 203, 4, 2173, "Print",ExpressionUUID->"d4d66a93-82de-4821-a9bf-39d8784d9169"],
Cell[1204816, 24295, 182, 4, 2173, "Print",ExpressionUUID->"45920181-87f9-4b79-b364-693b98618f01"],
Cell[1205001, 24301, 718, 23, 2173, "Print",ExpressionUUID->"aadb583a-33cc-4e2e-9d87-9264daf8f9ac"],
Cell[1205722, 24326, 432, 14, 2173, "Print",ExpressionUUID->"ff690ea1-fded-4309-be68-3d385e4e3121"],
Cell[1206157, 24342, 352, 12, 2173, "Print",ExpressionUUID->"79088061-0174-4691-b417-efc85a9b295c"],
Cell[1206512, 24356, 467, 13, 2173, "Print",ExpressionUUID->"5cbff3e7-01bf-4787-a4e2-ca63625ddcaa"],
Cell[1206982, 24371, 203, 4, 2173, "Print",ExpressionUUID->"2b8bd7b2-b01b-43a8-8806-4d599c511ea7"],
Cell[1207188, 24377, 182, 4, 2173, "Print",ExpressionUUID->"9d9c9a92-7f37-4db8-8601-650d99efb040"],
Cell[1207373, 24383, 718, 23, 2173, "Print",ExpressionUUID->"0989b3a5-7a03-45d0-9a33-8e8f9b9bd7bf"],
Cell[1208094, 24408, 430, 14, 2173, "Print",ExpressionUUID->"7f76b769-7185-42f4-b964-5c367e7e478a"],
Cell[1208527, 24424, 350, 12, 2173, "Print",ExpressionUUID->"72b7b867-3cb5-43da-852a-f5858dcc29ff"],
Cell[1208880, 24438, 469, 13, 2173, "Print",ExpressionUUID->"9d7ac355-ee9e-45f4-b25a-0854f81ff854"],
Cell[1209352, 24453, 203, 4, 2173, "Print",ExpressionUUID->"d29e5abb-6cb2-4b4c-ab2e-d8b1d086347f"],
Cell[1209558, 24459, 180, 4, 2173, "Print",ExpressionUUID->"b171f03c-d122-4c64-8979-47b1d949a009"],
Cell[1209741, 24465, 718, 23, 2173, "Print",ExpressionUUID->"012ee352-815b-478c-bbd5-e059efe4f0ce"],
Cell[1210462, 24490, 432, 14, 2173, "Print",ExpressionUUID->"61f04092-0a41-4522-ab14-e5d35068eff7"],
Cell[1210897, 24506, 350, 12, 2173, "Print",ExpressionUUID->"16ed6acc-3cff-4660-8e62-d865d5dfa39b"],
Cell[1211250, 24520, 467, 13, 2173, "Print",ExpressionUUID->"2013671c-e4fe-4453-a1c6-43d066f42128"],
Cell[1211720, 24535, 203, 4, 2173, "Print",ExpressionUUID->"0d922689-2afc-45db-b73a-76c5abded988"],
Cell[1211926, 24541, 182, 4, 2173, "Print",ExpressionUUID->"4bf11d3c-19db-4d7d-92f4-fc352c3934d4"],
Cell[1212111, 24547, 720, 23, 2173, "Print",ExpressionUUID->"9d929a59-f29b-4b9d-abb1-af92adc3e68c"],
Cell[1212834, 24572, 430, 14, 2173, "Print",ExpressionUUID->"3c2f70cc-3fb8-4fd8-af63-dd730e733749"],
Cell[1213267, 24588, 350, 12, 2173, "Print",ExpressionUUID->"7b943ec5-bab9-41a6-b5ab-d40b8e2c8132"],
Cell[1213620, 24602, 469, 13, 2173, "Print",ExpressionUUID->"caccab6a-8eda-47ec-b086-834599e7273d"],
Cell[1214092, 24617, 203, 4, 2173, "Print",ExpressionUUID->"3ed3059e-ba5c-4f27-88ef-73579dd821b0"],
Cell[1214298, 24623, 180, 4, 2173, "Print",ExpressionUUID->"89246522-7a44-485f-a4b7-347bbac42a5d"],
Cell[1214481, 24629, 718, 23, 2173, "Print",ExpressionUUID->"69915564-9ed1-49e6-a1af-63b81d3c2255"],
Cell[1215202, 24654, 429, 14, 2173, "Print",ExpressionUUID->"5f7cc3f7-8acc-4435-9bc7-6fb316b49fc9"],
Cell[1215634, 24670, 350, 12, 2173, "Print",ExpressionUUID->"96fe95c3-e46b-4490-ae97-b07f28b94aaa"],
Cell[1215987, 24684, 469, 13, 2173, "Print",ExpressionUUID->"cf46bfc4-7762-402b-9373-6f7571be6c33"],
Cell[1216459, 24699, 203, 4, 2173, "Print",ExpressionUUID->"09f0584c-18ee-476b-b77b-f4a2f85878a1"],
Cell[1216665, 24705, 182, 4, 2173, "Print",ExpressionUUID->"6758408e-a8ce-4984-b441-af899f9e3c70"],
Cell[1216850, 24711, 720, 23, 2173, "Print",ExpressionUUID->"3da7501c-6491-4502-936a-e9728e10c5d7"],
Cell[1217573, 24736, 430, 14, 2173, "Print",ExpressionUUID->"835fb2ab-4883-41ff-ab98-d9c9878ab4c6"],
Cell[1218006, 24752, 352, 12, 2173, "Print",ExpressionUUID->"f82df2ed-c39a-47c7-9c83-2f917ca1961d"],
Cell[1218361, 24766, 467, 13, 2173, "Print",ExpressionUUID->"446392de-f733-4f47-a10d-d06b066c684f"],
Cell[1218831, 24781, 203, 4, 2173, "Print",ExpressionUUID->"07e7d6dc-009f-4516-af8d-98c98680dd32"],
Cell[1219037, 24787, 182, 4, 2173, "Print",ExpressionUUID->"94ab8a88-9cc6-4e38-b784-ee09552f8aca"],
Cell[1219222, 24793, 718, 23, 2173, "Print",ExpressionUUID->"ad6d9a5d-e2cd-437e-88fb-a1865b3eb6f1"],
Cell[1219943, 24818, 432, 14, 2173, "Print",ExpressionUUID->"80d90879-753c-4252-b797-a39a18230968"],
Cell[1220378, 24834, 352, 12, 2173, "Print",ExpressionUUID->"755f63b7-a4b8-46a8-a43c-e7f8f9a1ff76"],
Cell[1220733, 24848, 467, 13, 2173, "Print",ExpressionUUID->"5ff852be-8aa2-488b-9486-bf59098d3c5e"],
Cell[1221203, 24863, 201, 4, 2173, "Print",ExpressionUUID->"611a90b5-c95b-49eb-a5fd-b890e2422cb1"],
Cell[1221407, 24869, 180, 4, 2173, "Print",ExpressionUUID->"d11eec8f-22a5-43a5-ab81-b517acfa9659"],
Cell[1221590, 24875, 720, 23, 2173, "Print",ExpressionUUID->"81873c20-edfc-4dfb-b303-db9d39ecc110"],
Cell[1222313, 24900, 432, 14, 2173, "Print",ExpressionUUID->"76af1b11-7c4b-4ebc-806c-bdd5092e7545"],
Cell[1222748, 24916, 350, 12, 2173, "Print",ExpressionUUID->"2eb3a1b7-c8a0-47a1-acfb-53d67fed7d45"],
Cell[1223101, 24930, 467, 13, 2173, "Print",ExpressionUUID->"948616f1-e281-49f9-b0a7-fd85dab19b46"],
Cell[1223571, 24945, 203, 4, 2173, "Print",ExpressionUUID->"91f4b158-7a0e-46b7-87d9-053bc093d23f"],
Cell[1223777, 24951, 179, 4, 2173, "Print",ExpressionUUID->"f2de21b9-1ab5-4d3c-853b-b1b2276adf50"],
Cell[1223959, 24957, 384, 12, 2173, "Print",ExpressionUUID->"e29087a7-27b7-4468-a0cd-cb48baa6a37e"],
Cell[1224346, 24971, 229, 6, 3723, "Print",ExpressionUUID->"042a6448-65b3-449f-a6fd-a3e5215a76d2"],
Cell[1224578, 24979, 844, 25, 4523, "Print",ExpressionUUID->"a6b5f16d-af77-47b9-b331-28c90df3af84"],
Cell[1225425, 25006, 370, 12, 2173, "Print",ExpressionUUID->"90bd2e3c-8ea6-4578-afd6-dab2bfecd717"],
Cell[1225798, 25020, 368, 12, 2173, "Print",ExpressionUUID->"c9d9f974-4e4e-4c9e-b6af-6c3cb841ef10"],
Cell[1226169, 25034, 369, 12, 2173, "Print",ExpressionUUID->"db9da02c-64ef-43bd-b89c-e36eb4da20d0"],
Cell[1226541, 25048, 448, 14, 2173, "Print",ExpressionUUID->"d8d1d0fa-b818-4103-a212-f2d48f5f3fe5"],
Cell[1226992, 25064, 720, 23, 2173, "Print",ExpressionUUID->"ca7092bd-cecf-44c3-9647-f5b234046f92"],
Cell[1227715, 25089, 432, 14, 2173, "Print",ExpressionUUID->"903863c3-f141-4c31-9edc-bebbd7b7d1fe"],
Cell[1228150, 25105, 350, 12, 2173, "Print",ExpressionUUID->"26b0d1f3-a1bf-4133-b6e9-4e0be8444d6f"],
Cell[1228503, 25119, 467, 13, 2173, "Print",ExpressionUUID->"89470bb4-921a-4e6a-a9be-d130e6f30ada"],
Cell[1228973, 25134, 201, 4, 2173, "Print",ExpressionUUID->"e7bd1b95-3b37-4b4e-a296-559994ecd197"],
Cell[1229177, 25140, 180, 4, 2173, "Print",ExpressionUUID->"a3db2fac-88c4-4cd2-8520-822d8d34e056"],
Cell[1229360, 25146, 720, 23, 2173, "Print",ExpressionUUID->"5ddce6f4-0886-4b85-b9d0-22ef3f57e8f8"],
Cell[1230083, 25171, 429, 14, 2173, "Print",ExpressionUUID->"e2c0606d-95e5-4578-a4db-958bba96cf3f"],
Cell[1230515, 25187, 350, 12, 2173, "Print",ExpressionUUID->"b8d83fd0-7ba4-4847-bcf4-66c98aec4776"],
Cell[1230868, 25201, 467, 13, 2173, "Print",ExpressionUUID->"85bca413-e708-47bc-9970-dd193e4f2b51"],
Cell[1231338, 25216, 203, 4, 2173, "Print",ExpressionUUID->"30a4a6bd-f3b1-4c31-96f7-4a1187e4b44a"],
Cell[1231544, 25222, 182, 4, 2173, "Print",ExpressionUUID->"42216bc6-05e9-4a3d-b06d-d44c062fdb58"],
Cell[1231729, 25228, 718, 23, 2173, "Print",ExpressionUUID->"9b020b5e-113b-417d-98c5-3071cce45363"],
Cell[1232450, 25253, 432, 14, 2173, "Print",ExpressionUUID->"98e6aefd-32bf-4309-b053-fceaebdb15c1"],
Cell[1232885, 25269, 350, 12, 2173, "Print",ExpressionUUID->"a724d0ef-37c8-4f6d-82e0-b2c0ef8d817d"],
Cell[1233238, 25283, 467, 13, 2173, "Print",ExpressionUUID->"9ea9c64e-c5f3-476e-bbd1-798a777290b8"],
Cell[1233708, 25298, 203, 4, 2173, "Print",ExpressionUUID->"ed15241b-7102-48e7-91a2-c8cbf88b1d51"],
Cell[1233914, 25304, 180, 4, 2173, "Print",ExpressionUUID->"3df1ce29-a5c5-4207-837c-ae0847a13d03"],
Cell[1234097, 25310, 720, 23, 2173, "Print",ExpressionUUID->"87170086-2cbc-4a9c-8e57-53bf84590403"],
Cell[1234820, 25335, 430, 14, 2173, "Print",ExpressionUUID->"5312a47c-9edf-4f0f-84e9-08b6147972b3"],
Cell[1235253, 25351, 350, 12, 2173, "Print",ExpressionUUID->"9798e46d-1490-4d66-ab96-2b5df5b1e72e"],
Cell[1235606, 25365, 467, 13, 2173, "Print",ExpressionUUID->"6812d1f8-6349-434a-989b-eebdf576263b"],
Cell[1236076, 25380, 203, 4, 2173, "Print",ExpressionUUID->"9bc6948e-2907-4988-999c-b943366722f9"],
Cell[1236282, 25386, 180, 4, 2173, "Print",ExpressionUUID->"900711bf-133f-46e7-9d58-62d8fe0f901a"],
Cell[1236465, 25392, 718, 23, 2173, "Print",ExpressionUUID->"7e3dc1b2-c5a4-483e-968d-404c8eaa3dc2"],
Cell[1237186, 25417, 432, 14, 2173, "Print",ExpressionUUID->"6cdfab0f-56b7-4d9c-8068-f6c82a81cf91"],
Cell[1237621, 25433, 352, 12, 2173, "Print",ExpressionUUID->"35393784-9250-4287-89d1-2b78406366c1"],
Cell[1237976, 25447, 467, 13, 2173, "Print",ExpressionUUID->"4b05277e-008f-487a-bba1-4d414cf18a7f"],
Cell[1238446, 25462, 203, 4, 2173, "Print",ExpressionUUID->"d7cb076c-d0e4-481a-83aa-f90696763a69"],
Cell[1238652, 25468, 179, 4, 2173, "Print",ExpressionUUID->"b5f911cf-1320-45e5-b1ae-6c72ed66883d"],
Cell[1238834, 25474, 720, 23, 2173, "Print",ExpressionUUID->"d47d2643-ab92-4347-adcc-35bb15725855"],
Cell[1239557, 25499, 432, 14, 2173, "Print",ExpressionUUID->"94cd449e-3b11-4152-9884-20ccf74f8f16"],
Cell[1239992, 25515, 350, 12, 2173, "Print",ExpressionUUID->"2cd4f79e-7736-47a1-9f55-eaaa1f12f2b5"],
Cell[1240345, 25529, 467, 13, 2173, "Print",ExpressionUUID->"cf5d849a-a5ef-4d06-bfd3-f2a229efa0f6"],
Cell[1240815, 25544, 201, 4, 2173, "Print",ExpressionUUID->"339505ba-c1f5-46c4-9121-d940183c5e1e"],
Cell[1241019, 25550, 180, 4, 2173, "Print",ExpressionUUID->"12d73502-9e64-47b6-94ca-b29f1182eff2"],
Cell[1241202, 25556, 720, 23, 2173, "Print",ExpressionUUID->"8a4bff43-66fb-4a08-a311-360bf8d55bd2"],
Cell[1241925, 25581, 432, 14, 2173, "Print",ExpressionUUID->"67fef6ba-de5b-4ada-a906-4a76db7a4d8d"],
Cell[1242360, 25597, 352, 12, 2173, "Print",ExpressionUUID->"e0fda772-6a3c-4a34-9660-aa3487fc3ee0"],
Cell[1242715, 25611, 469, 13, 2173, "Print",ExpressionUUID->"52d43aac-357e-4160-8d21-6703de6c14e3"],
Cell[1243187, 25626, 201, 4, 2173, "Print",ExpressionUUID->"9cb37d37-2fc3-409d-aed3-381ba4bb78a9"],
Cell[1243391, 25632, 182, 4, 2173, "Print",ExpressionUUID->"9d519abb-6fd3-4c31-9a34-5f30048d2279"],
Cell[1243576, 25638, 718, 23, 2173, "Print",ExpressionUUID->"1e5cec86-02f9-49a1-a7a2-ee385d10149a"],
Cell[1244297, 25663, 432, 14, 2173, "Print",ExpressionUUID->"e5615a3e-3083-4916-9f3a-82a8bcb0da0c"],
Cell[1244732, 25679, 352, 12, 2173, "Print",ExpressionUUID->"ae20be10-0f9a-4350-9a10-3d032d5fd8c2"],
Cell[1245087, 25693, 467, 13, 2173, "Print",ExpressionUUID->"e1c825ae-a5b0-4b49-ab9a-12d9045ccc07"],
Cell[1245557, 25708, 203, 4, 2173, "Print",ExpressionUUID->"d8487399-859e-4e33-abf8-f1d173dcb5e1"],
Cell[1245763, 25714, 182, 4, 2173, "Print",ExpressionUUID->"b493b5d6-bf3c-4f35-bb0e-c187a33080d2"],
Cell[1245948, 25720, 720, 23, 2173, "Print",ExpressionUUID->"15ea2c8c-37ca-4035-888f-9dcbbe1c3d04"],
Cell[1246671, 25745, 430, 14, 2173, "Print",ExpressionUUID->"94e80876-c0d2-4867-9c8c-48609f6ac041"],
Cell[1247104, 25761, 350, 12, 2173, "Print",ExpressionUUID->"4ef62656-6e82-49da-9786-3ba123f5b73f"],
Cell[1247457, 25775, 467, 13, 2173, "Print",ExpressionUUID->"81adb809-0674-4f48-987d-116caae0f47a"],
Cell[1247927, 25790, 203, 4, 2173, "Print",ExpressionUUID->"a502ce94-fc84-413a-be11-c871dc7ad35a"],
Cell[1248133, 25796, 180, 4, 2173, "Print",ExpressionUUID->"158c3b35-a3ec-4e6c-9445-e9b1f63d1ed3"],
Cell[1248316, 25802, 720, 23, 2173, "Print",ExpressionUUID->"83d54f61-d530-4411-935c-512af2c4b7c7"],
Cell[1249039, 25827, 432, 14, 2173, "Print",ExpressionUUID->"b938c3b8-6a61-460c-be73-9941c1647bf2"],
Cell[1249474, 25843, 350, 12, 2173, "Print",ExpressionUUID->"08bbe11c-8615-44f3-8188-b9dd73d9319a"],
Cell[1249827, 25857, 469, 13, 2173, "Print",ExpressionUUID->"e597979a-5f7a-418d-88d3-b7ae878626aa"],
Cell[1250299, 25872, 203, 4, 2173, "Print",ExpressionUUID->"5dfd7acb-7801-42e1-9865-af1281ce6fff"],
Cell[1250505, 25878, 182, 4, 2173, "Print",ExpressionUUID->"63b74f9c-0fac-42b7-9f69-f8f1a49e48ce"],
Cell[1250690, 25884, 382, 12, 2173, "Print",ExpressionUUID->"54aa211d-42bd-443d-95c6-dcc7f88727f1"],
Cell[1251075, 25898, 231, 6, 3723, "Print",ExpressionUUID->"93bd1d87-c975-4a39-b757-06e5d92ea35a"],
Cell[1251309, 25906, 844, 25, 4523, "Print",ExpressionUUID->"291357cf-1177-4044-a361-e6e900ca7456"],
Cell[1252156, 25933, 369, 12, 2173, "Print",ExpressionUUID->"5185b789-7798-4ca2-a49b-428995294667"],
Cell[1252528, 25947, 368, 12, 2173, "Print",ExpressionUUID->"3dd5b5c9-bd94-44e0-955f-4ba300e3f180"],
Cell[1252899, 25961, 372, 12, 2173, "Print",ExpressionUUID->"3cb9773d-65e1-4969-bf02-d73ba40ea4fc"],
Cell[1253274, 25975, 448, 14, 2173, "Print",ExpressionUUID->"defe1fb3-be62-4e51-b075-7a7cc37ea15c"],
Cell[1253725, 25991, 720, 23, 2173, "Print",ExpressionUUID->"36f29dad-6c7d-4471-aac8-1a5dc26d27f3"],
Cell[1254448, 26016, 432, 14, 2173, "Print",ExpressionUUID->"2eccc995-d00a-4236-87e2-2b6135900462"],
Cell[1254883, 26032, 352, 12, 2173, "Print",ExpressionUUID->"f09dda38-011a-4df9-97be-e76890d08fef"],
Cell[1255238, 26046, 469, 13, 2173, "Print",ExpressionUUID->"041a037d-e7a6-4014-8d30-df8dfd98d56d"],
Cell[1255710, 26061, 201, 4, 2173, "Print",ExpressionUUID->"cd9c0a0e-e00d-4ae0-9203-b47469af0aca"],
Cell[1255914, 26067, 182, 4, 2173, "Print",ExpressionUUID->"8d43146b-5bfd-420a-8875-bf7146b42cd1"],
Cell[1256099, 26073, 718, 23, 2173, "Print",ExpressionUUID->"18a0177f-0928-4616-abf1-4a48fab3e5c3"],
Cell[1256820, 26098, 430, 14, 2173, "Print",ExpressionUUID->"7017b049-f305-4da8-9964-54df1392f7c4"],
Cell[1257253, 26114, 350, 12, 2173, "Print",ExpressionUUID->"b738f106-b3d8-4429-9268-e3cd18335fc3"],
Cell[1257606, 26128, 469, 13, 2173, "Print",ExpressionUUID->"defaf1ea-9b3a-4d47-b10b-033897cc5b9c"],
Cell[1258078, 26143, 203, 4, 2173, "Print",ExpressionUUID->"9c540911-6d8c-43ef-9806-7a57c1090115"],
Cell[1258284, 26149, 182, 4, 2173, "Print",ExpressionUUID->"8c0e544a-17c3-4400-9e1f-6354cd8f1925"],
Cell[1258469, 26155, 720, 23, 2173, "Print",ExpressionUUID->"94a5cb26-3ebf-4ad1-991a-fb89007d7d56"],
Cell[1259192, 26180, 432, 14, 2173, "Print",ExpressionUUID->"c06807ba-5a4d-486d-8623-732de1ca5196"],
Cell[1259627, 26196, 352, 12, 2173, "Print",ExpressionUUID->"1b6c583a-3e12-401b-bb20-3a05df9929ed"],
Cell[1259982, 26210, 467, 13, 2173, "Print",ExpressionUUID->"5cb8f281-b73a-4731-a649-3b1d958c0f87"],
Cell[1260452, 26225, 201, 4, 2173, "Print",ExpressionUUID->"8c04e2ce-5caf-40a7-b430-3de9140c0129"],
Cell[1260656, 26231, 180, 4, 2173, "Print",ExpressionUUID->"19ced2d3-7be5-45a1-bc7d-cfd33ab7e8d1"],
Cell[1260839, 26237, 720, 23, 2173, "Print",ExpressionUUID->"4ee68e11-5c70-4af9-aecf-bbfe7283ac90"],
Cell[1261562, 26262, 432, 14, 2173, "Print",ExpressionUUID->"30b6544c-da76-4aa0-abc0-42581d84a4a3"],
Cell[1261997, 26278, 350, 12, 2173, "Print",ExpressionUUID->"543eadd6-84e4-472d-8746-ba3eb2c16368"],
Cell[1262350, 26292, 469, 13, 2173, "Print",ExpressionUUID->"4e00e42c-f800-4559-a04c-9e7879ba3e84"],
Cell[1262822, 26307, 201, 4, 2173, "Print",ExpressionUUID->"11903a68-0702-4632-866a-dc047f11e9b4"],
Cell[1263026, 26313, 182, 4, 2173, "Print",ExpressionUUID->"a2a8df56-d6cf-4028-a251-515acca271a3"],
Cell[1263211, 26319, 720, 23, 2173, "Print",ExpressionUUID->"762027ba-b31f-475b-b657-22428648841e"],
Cell[1263934, 26344, 432, 14, 2173, "Print",ExpressionUUID->"9f343a1f-e586-496a-904d-5d6a0c492c87"],
Cell[1264369, 26360, 349, 12, 2173, "Print",ExpressionUUID->"3e855a17-b7b8-48e8-b6c3-6fba64c4d25a"],
Cell[1264721, 26374, 467, 13, 2173, "Print",ExpressionUUID->"6f6ee2fb-0290-4651-8c89-58822a6e00e8"],
Cell[1265191, 26389, 203, 4, 2173, "Print",ExpressionUUID->"1b63c4b6-9bfd-4d02-9d19-f66abb3f3e4a"],
Cell[1265397, 26395, 182, 4, 2173, "Print",ExpressionUUID->"7d322dec-5bb0-43f7-9546-8ed75f243eb6"],
Cell[1265582, 26401, 718, 23, 2173, "Print",ExpressionUUID->"6ded9765-a4be-4059-b6d8-9f5f97f05fbf"],
Cell[1266303, 26426, 432, 14, 2173, "Print",ExpressionUUID->"06538b3b-5a91-4f97-87fa-c3ff2cedb75e"],
Cell[1266738, 26442, 352, 12, 2173, "Print",ExpressionUUID->"4668f911-0a24-44a2-9226-4ff82a274d1a"],
Cell[1267093, 26456, 467, 13, 2173, "Print",ExpressionUUID->"b688ae49-0102-4052-8ce1-1a8a9a865e9c"],
Cell[1267563, 26471, 201, 4, 2173, "Print",ExpressionUUID->"b15b9332-cde3-41e1-83c6-02e9a08e155e"],
Cell[1267767, 26477, 180, 4, 2173, "Print",ExpressionUUID->"ffbcc864-e18b-48f0-b3fa-40d5dfb14d1a"],
Cell[1267950, 26483, 718, 23, 2173, "Print",ExpressionUUID->"3b069e2d-b995-482a-bbc0-9df50aad1b0b"],
Cell[1268671, 26508, 430, 14, 2173, "Print",ExpressionUUID->"bdd9ce51-c57d-4f66-8c34-9fa61fdccc88"],
Cell[1269104, 26524, 350, 12, 2173, "Print",ExpressionUUID->"030e580f-f357-4330-ae10-dd4d2cc1a0a4"],
Cell[1269457, 26538, 469, 13, 2173, "Print",ExpressionUUID->"e3a13d66-8329-4633-94aa-dd0fc85b11ec"],
Cell[1269929, 26553, 201, 4, 2173, "Print",ExpressionUUID->"b3191443-53d6-48e4-a2a7-9bd4229c933e"],
Cell[1270133, 26559, 182, 4, 2173, "Print",ExpressionUUID->"42a0295f-d7ad-4dec-bb54-fa485a6ce613"],
Cell[1270318, 26565, 720, 23, 2173, "Print",ExpressionUUID->"d7edab89-f009-4722-88db-022c9c41e59a"],
Cell[1271041, 26590, 432, 14, 2173, "Print",ExpressionUUID->"ebf23cd5-681b-490a-8955-3fd18e13847f"],
Cell[1271476, 26606, 350, 12, 2173, "Print",ExpressionUUID->"dd75ef92-e776-43e1-ad12-d2e487550392"],
Cell[1271829, 26620, 467, 13, 2173, "Print",ExpressionUUID->"cb56f160-18ae-40ca-856c-39c6316e53fc"],
Cell[1272299, 26635, 201, 4, 2173, "Print",ExpressionUUID->"98fe0095-7a59-4a85-b255-f2e45a53c174"],
Cell[1272503, 26641, 180, 4, 2173, "Print",ExpressionUUID->"b0979dce-c9cd-45b2-9ae5-397f2f606b41"],
Cell[1272686, 26647, 720, 23, 2173, "Print",ExpressionUUID->"17da54a8-0829-4b42-9095-228375408c9b"],
Cell[1273409, 26672, 430, 14, 2173, "Print",ExpressionUUID->"187829c8-0060-4621-a6ff-0d581737d7d5"],
Cell[1273842, 26688, 352, 12, 2173, "Print",ExpressionUUID->"472038a3-7448-4bc3-b8cb-1bfa6c416782"],
Cell[1274197, 26702, 467, 13, 2173, "Print",ExpressionUUID->"25763e93-b5b4-445e-9e32-5c4a10fa6e2c"],
Cell[1274667, 26717, 201, 4, 2173, "Print",ExpressionUUID->"4a7cf9af-397d-4a5e-b331-02783b1d0bd5"],
Cell[1274871, 26723, 180, 4, 2173, "Print",ExpressionUUID->"5d6cd2ab-c1b1-4d8b-a01a-891f756786c8"],
Cell[1275054, 26729, 718, 23, 2173, "Print",ExpressionUUID->"2acb62ee-aca2-4b45-a824-dafaa61b4703"],
Cell[1275775, 26754, 430, 14, 2173, "Print",ExpressionUUID->"354e31c0-37be-44df-948b-11215f5adfc3"],
Cell[1276208, 26770, 352, 12, 2173, "Print",ExpressionUUID->"9557584d-d0e0-457f-a0f9-dc28df0d7c9e"],
Cell[1276563, 26784, 469, 13, 2173, "Print",ExpressionUUID->"9702ef15-4ea1-478f-a6bf-235b2e1316d3"],
Cell[1277035, 26799, 200, 4, 2173, "Print",ExpressionUUID->"d92b74a4-b274-4d8e-925b-e07f54d0533c"],
Cell[1277238, 26805, 180, 4, 2173, "Print",ExpressionUUID->"768627cc-bd02-4e95-a0eb-842d60d01716"],
Cell[1277421, 26811, 384, 12, 2173, "Print",ExpressionUUID->"b3ac8efc-7dc9-4c54-96b8-98310be592fa"],
Cell[1277808, 26825, 231, 6, 3723, "Print",ExpressionUUID->"fc969926-1659-4afd-bbab-1b8495df6638"],
Cell[1278042, 26833, 846, 25, 4523, "Print",ExpressionUUID->"70883a99-55a3-4127-b66d-c1646715131b"],
Cell[1278891, 26860, 370, 12, 2173, "Print",ExpressionUUID->"f5fd3c66-547d-4dc6-9086-49a5d01c013b"],
Cell[1279264, 26874, 370, 12, 2173, "Print",ExpressionUUID->"be8071b9-73df-4334-a148-e2b79845b523"],
Cell[1279637, 26888, 372, 12, 2173, "Print",ExpressionUUID->"31e1a5a3-ad2b-45e5-9c27-191bea3e03c6"],
Cell[1280012, 26902, 446, 14, 2173, "Print",ExpressionUUID->"ff16ea49-dcbe-40f2-85c6-8cb9fbb1db78"],
Cell[1280461, 26918, 717, 23, 2173, "Print",ExpressionUUID->"5342afb2-26e5-45f5-a4c6-fc5806c47c89"],
Cell[1281181, 26943, 430, 14, 2173, "Print",ExpressionUUID->"14d19a13-990f-425e-83ad-383774cc74d7"],
Cell[1281614, 26959, 350, 12, 2173, "Print",ExpressionUUID->"fdcaa070-c7bd-4b31-af96-7658b6c229fc"],
Cell[1281967, 26973, 467, 13, 2173, "Print",ExpressionUUID->"18e06cfb-9e17-46b0-a5ff-fadccf27198a"],
Cell[1282437, 26988, 203, 4, 2173, "Print",ExpressionUUID->"d881e783-f066-4d26-abcd-0f7ddc88d5d8"],
Cell[1282643, 26994, 182, 4, 2173, "Print",ExpressionUUID->"4f741b71-09b9-4991-9572-cbcea8cb865b"],
Cell[1282828, 27000, 720, 23, 2173, "Print",ExpressionUUID->"f812f141-20eb-486a-a6d1-0b98742be7fa"],
Cell[1283551, 27025, 432, 14, 2173, "Print",ExpressionUUID->"f0430a20-4967-4efa-b0b9-2f30fffb99bc"],
Cell[1283986, 27041, 349, 12, 2173, "Print",ExpressionUUID->"8f1757b6-ed2b-4ed1-bc31-3aac69e93815"],
Cell[1284338, 27055, 469, 13, 2173, "Print",ExpressionUUID->"2a288f20-bc8e-4cdc-9742-3ab643659e7b"],
Cell[1284810, 27070, 201, 4, 2173, "Print",ExpressionUUID->"0a3f3673-b96f-4b85-8a46-1fe6997d9c19"],
Cell[1285014, 27076, 180, 4, 2173, "Print",ExpressionUUID->"68c5793d-472a-4b5c-8128-7bd7b7875c1a"],
Cell[1285197, 27082, 720, 23, 2173, "Print",ExpressionUUID->"a3ca0f94-aeab-4e00-8ed0-e7a2e9ac6ee9"],
Cell[1285920, 27107, 432, 14, 2173, "Print",ExpressionUUID->"373263df-085a-4aaf-a388-eb04a025dd92"],
Cell[1286355, 27123, 350, 12, 2173, "Print",ExpressionUUID->"11e85c03-9a8a-472e-b242-c5670707e30d"],
Cell[1286708, 27137, 469, 13, 2173, "Print",ExpressionUUID->"fa86cc60-f5cc-45a7-8312-cc5993996933"],
Cell[1287180, 27152, 201, 4, 2173, "Print",ExpressionUUID->"b06791d8-1139-477e-9cce-a681b412dae4"],
Cell[1287384, 27158, 180, 4, 2173, "Print",ExpressionUUID->"f88533e9-9b60-49da-86db-931643e0b679"],
Cell[1287567, 27164, 720, 23, 2173, "Print",ExpressionUUID->"3aaa3caa-47a9-4572-b456-59a5fa2d4e69"],
Cell[1288290, 27189, 430, 14, 2173, "Print",ExpressionUUID->"0f6d0e80-dc40-4e63-ba9f-63d588d25e17"],
Cell[1288723, 27205, 352, 12, 2173, "Print",ExpressionUUID->"a7b013a7-f6d5-4804-bfc6-9b0abd877031"],
Cell[1289078, 27219, 467, 13, 2173, "Print",ExpressionUUID->"b6e7938d-5f22-4a10-a31a-bfe7cdde8004"],
Cell[1289548, 27234, 203, 4, 2173, "Print",ExpressionUUID->"78083917-f4f7-402e-b397-c841e27a6d4e"],
Cell[1289754, 27240, 180, 4, 2173, "Print",ExpressionUUID->"5bdabfc7-d726-48bb-ae8d-e6697445cd0f"],
Cell[1289937, 27246, 720, 23, 2173, "Print",ExpressionUUID->"ebbeae75-ccf3-42c1-b78e-40cea145de5f"],
Cell[1290660, 27271, 430, 14, 2173, "Print",ExpressionUUID->"dacaf5ba-ee30-4bc5-9c05-c2d515b17b3b"],
Cell[1291093, 27287, 350, 12, 2173, "Print",ExpressionUUID->"87c60478-4c8e-44c7-a2b6-6245c1bdde58"],
Cell[1291446, 27301, 469, 13, 2173, "Print",ExpressionUUID->"97380c4e-fe7d-4e27-815c-52c3bb3973e3"],
Cell[1291918, 27316, 203, 4, 2173, "Print",ExpressionUUID->"c2dde63c-89c6-4aed-8bbc-f81db680a98b"],
Cell[1292124, 27322, 180, 4, 2173, "Print",ExpressionUUID->"d76140b3-2a61-4de6-9a33-369014977787"],
Cell[1292307, 27328, 718, 23, 2173, "Print",ExpressionUUID->"56e6e57a-e6b7-4980-a00a-0464b13ee1ad"],
Cell[1293028, 27353, 430, 14, 2173, "Print",ExpressionUUID->"4c260e81-2884-45ec-b138-7f1a6e100f66"],
Cell[1293461, 27369, 352, 12, 2173, "Print",ExpressionUUID->"f6cadde5-bd32-40bd-beab-214902f11f6f"],
Cell[1293816, 27383, 469, 13, 2173, "Print",ExpressionUUID->"fd4453e5-a1f3-49e7-90f4-42eeed23f9e9"],
Cell[1294288, 27398, 203, 4, 2173, "Print",ExpressionUUID->"1feb9777-6316-4d49-8f3f-137a7cae3243"],
Cell[1294494, 27404, 182, 4, 2173, "Print",ExpressionUUID->"c951b010-344b-48d3-bb87-cb3f9631199b"],
Cell[1294679, 27410, 720, 23, 2173, "Print",ExpressionUUID->"d51deffd-6ff6-4f4e-9a65-291656700332"],
Cell[1295402, 27435, 432, 14, 2173, "Print",ExpressionUUID->"8d409b51-eddf-441f-a61e-9bff9b214def"],
Cell[1295837, 27451, 352, 12, 2173, "Print",ExpressionUUID->"b6c4c897-6cad-4041-b6ef-d763fc8a5048"],
Cell[1296192, 27465, 469, 13, 2173, "Print",ExpressionUUID->"89cff887-0305-4240-8e2d-4e39dd7ab5e8"],
Cell[1296664, 27480, 203, 4, 2173, "Print",ExpressionUUID->"e13b9d60-df66-43ff-bc2b-87efe82c7a20"],
Cell[1296870, 27486, 182, 4, 2173, "Print",ExpressionUUID->"dd2e29d3-2067-4cc5-af85-e63d626c8bc7"],
Cell[1297055, 27492, 718, 23, 2173, "Print",ExpressionUUID->"e31a4169-4f68-4bae-a4ea-72dd83940368"],
Cell[1297776, 27517, 430, 14, 2173, "Print",ExpressionUUID->"695d942b-9f01-4be7-b893-22dd78e0d952"],
Cell[1298209, 27533, 352, 12, 2173, "Print",ExpressionUUID->"57ba094b-df2d-4eaf-b7c1-8cffdc483fe5"],
Cell[1298564, 27547, 467, 13, 2173, "Print",ExpressionUUID->"f6b6936c-dcd7-4f19-868a-e1965f64ace7"],
Cell[1299034, 27562, 203, 4, 2173, "Print",ExpressionUUID->"d6dda25a-9fae-48bf-89de-215c79a2aa9a"],
Cell[1299240, 27568, 182, 4, 2173, "Print",ExpressionUUID->"f25d950f-4572-47cf-8c05-8c6d6f21a656"],
Cell[1299425, 27574, 718, 23, 2173, "Print",ExpressionUUID->"211923fe-a6a7-4a98-8590-3953069ff97b"],
Cell[1300146, 27599, 432, 14, 2173, "Print",ExpressionUUID->"bf7ebaaf-ed34-4844-826e-b308901bd49b"],
Cell[1300581, 27615, 349, 12, 2173, "Print",ExpressionUUID->"e21d4423-786b-4296-b976-e740f5948bcf"],
Cell[1300933, 27629, 467, 13, 2173, "Print",ExpressionUUID->"22d48a30-1282-4f80-bbd3-4d68090962f0"],
Cell[1301403, 27644, 201, 4, 2173, "Print",ExpressionUUID->"8e432f57-33b5-47e7-83bf-86218c0b2e6b"],
Cell[1301607, 27650, 182, 4, 2173, "Print",ExpressionUUID->"e28cf0b7-bffd-4cf7-b10a-14001491d252"],
Cell[1301792, 27656, 718, 23, 2173, "Print",ExpressionUUID->"d0a16986-0f91-47e6-bd5a-862b3d224ae0"],
Cell[1302513, 27681, 430, 14, 2173, "Print",ExpressionUUID->"49be9533-59e9-4ea2-80d8-8352e6199aac"],
Cell[1302946, 27697, 352, 12, 2173, "Print",ExpressionUUID->"4a582359-c8b1-4164-8b50-c4ae21b19aed"],
Cell[1303301, 27711, 467, 13, 2173, "Print",ExpressionUUID->"61f4c711-e46c-4794-8dbf-0ad10905f4bd"],
Cell[1303771, 27726, 201, 4, 2173, "Print",ExpressionUUID->"5e561fde-fd71-416f-8658-5e3efaa38c14"],
Cell[1303975, 27732, 182, 4, 2173, "Print",ExpressionUUID->"7097a74b-dc6e-4f03-a0cc-29a409c0dc90"],
Cell[1304160, 27738, 386, 12, 2173, "Print",ExpressionUUID->"c543e936-9d8d-46bb-afe0-f442f44b1d02"],
Cell[1304549, 27752, 231, 6, 3723, "Print",ExpressionUUID->"4d33f990-f584-4c41-b419-cbc678d3a04f"],
Cell[1304783, 27760, 846, 25, 4523, "Print",ExpressionUUID->"ef902582-7d21-4abf-ac6e-443384a78ee9"],
Cell[1305632, 27787, 372, 12, 2173, "Print",ExpressionUUID->"677e0156-8811-4fe3-b6be-ccfb5acbfc08"],
Cell[1306007, 27801, 370, 12, 2173, "Print",ExpressionUUID->"e451c395-20e6-4727-a458-09e4d8940859"],
Cell[1306380, 27815, 370, 12, 2173, "Print",ExpressionUUID->"df82e626-4c3c-42dc-a17e-18dec74f1e92"],
Cell[1306753, 27829, 445, 14, 2173, "Print",ExpressionUUID->"f82f2b88-7b34-4671-ae45-bdd6e525c537"],
Cell[1307201, 27845, 718, 23, 2173, "Print",ExpressionUUID->"d070b43f-848f-45e0-889e-86e57986b69b"],
Cell[1307922, 27870, 432, 14, 2173, "Print",ExpressionUUID->"9f73370f-47a8-4dea-93ea-1cdadbb6aca4"],
Cell[1308357, 27886, 360, 12, 2173, "Print",ExpressionUUID->"95415b5f-719f-4332-a2a0-812730d45434"],
Cell[1308720, 27900, 394, 12, 2173, "Print",ExpressionUUID->"abb39e6c-5da5-46a8-aa92-eb651e9d8704"],
Cell[1309117, 27914, 528, 18, 2173, "Print",ExpressionUUID->"46d44fee-134b-4703-89bc-4bcf2324f1c0"],
Cell[1309648, 27934, 343, 12, 2173, "Print",ExpressionUUID->"628b8828-aaf6-4d1c-9d0c-c90aec25d715"],
Cell[1309994, 27948, 15199, 326, 6703, "Print",ExpressionUUID->"a9bf0097-7391-42a0-8856-fdc2e3856ada"],
Cell[1325196, 28276, 461, 14, 2173, "Print",ExpressionUUID->"c03d4db1-7ff5-4bcf-abce-ab0b0730b661"],
Cell[1325660, 28292, 560, 18, 2173, "Print",ExpressionUUID->"efe2b91c-fb36-4caf-88f4-f2f60b183c14"],
Cell[1326223, 28312, 207, 6, 2173, "Print",ExpressionUUID->"933b34d7-2ba6-4701-9eed-4800d9b5ab33"],
Cell[1326433, 28320, 354, 12, 2173, "Print",ExpressionUUID->"55be7830-9d32-4519-af11-9ae54161688c"],
Cell[1326790, 28334, 358, 12, 2173, "Print",ExpressionUUID->"7f4beed3-231b-40e9-b8a2-a74baa6edd5c"],
Cell[1327151, 28348, 193, 4, 2173, "Print",ExpressionUUID->"70251851-0036-4a71-8a25-8d6359da8230"],
Cell[1327347, 28354, 186, 4, 2173, "Print",ExpressionUUID->"2b725cae-bd40-4407-9684-872c748baa23"],
Cell[1327536, 28360, 457, 14, 2173, "Print",ExpressionUUID->"659f1c08-0610-46f6-b611-eac9890d9bd7"],
Cell[1327996, 28376, 388, 12, 2173, "Print",ExpressionUUID->"409f1e03-1637-4ed7-ad9f-f4c8ec814a8b"],
Cell[1328387, 28390, 366, 12, 2173, "Print",ExpressionUUID->"c66ae279-a99b-4413-8a7d-49252cc10a1b"],
Cell[1328756, 28404, 171, 4, 2173, "Print",ExpressionUUID->"aaacf77b-0027-490d-a824-0acd8ead79fa"],
Cell[1328930, 28410, 365, 13, 2173, "Print",ExpressionUUID->"2e225fbe-10d6-4bd5-97c5-75605f0c55e9"],
Cell[1329298, 28425, 569, 18, 2173, "Print",ExpressionUUID->"4d0c3c2e-f6d6-477b-9e50-bcc2df977ca1"],
Cell[1329870, 28445, 381, 12, 2173, "Print",ExpressionUUID->"f2c00730-09db-468a-946b-75f4fbd3234f"],
Cell[1330254, 28459, 382, 12, 2173, "Print",ExpressionUUID->"49ea664e-bff7-4740-98be-7f4c76e43267"],
Cell[1330639, 28473, 172, 4, 2173, "Print",ExpressionUUID->"6e90b42f-9604-4b5a-adb3-7454a6dbf85f"],
Cell[1330814, 28479, 352, 12, 2173, "Print",ExpressionUUID->"069cbb60-a0a2-4a02-9e27-5d634954b66a"],
Cell[1331169, 28493, 495, 15, 2843, "Print",ExpressionUUID->"0018d882-e5e9-40ca-bd72-053aa0c753d8"],
Cell[1331667, 28510, 513, 15, 2843, "Print",ExpressionUUID->"a2d303ca-f5c4-4ef6-87e2-637cf099f64f"],
Cell[1332183, 28527, 237, 6, 3723, "Print",ExpressionUUID->"87e40ae7-bb89-4f51-a15e-86b3b0b6a385"],
Cell[1332423, 28535, 296, 9, 2173, "Print",ExpressionUUID->"2ee0ec25-81f7-4ee2-bf31-7c995c552858"],
Cell[1332722, 28546, 305, 8, 2173, "Print",ExpressionUUID->"cbdbd892-13f3-414b-afba-b8e56f41c131"],
Cell[1333030, 28556, 172, 4, 2173, "Print",ExpressionUUID->"177c9031-def1-4573-8605-cb1ee88a231e"],
Cell[1333205, 28562, 167, 4, 2173, "Print",ExpressionUUID->"52657e49-7ab2-4532-8305-14a407e33857"],
Cell[1333375, 28568, 174, 4, 2173, "Print",ExpressionUUID->"a093e7e2-cb16-41e3-a738-1dce968d828e"],
Cell[1333552, 28574, 169, 4, 2173, "Print",ExpressionUUID->"e6e17541-3f38-41d6-bbfe-7c86b757b2c6"],
Cell[1333724, 28580, 182, 4, 2173, "Print",ExpressionUUID->"353d8378-0f3c-481f-8a77-8a82d2214db6"],
Cell[1333909, 28586, 2577, 69, 9976, "Print",ExpressionUUID->"30078825-f356-45f1-bb72-5c8980687fbf"],
Cell[1336489, 28657, 194, 4, 2173, "Print",ExpressionUUID->"3f33dfd2-709f-4303-96f6-87ffd98b69a1"],
Cell[1336686, 28663, 412, 12, 2173, "Print",ExpressionUUID->"4d5066d5-0765-4139-8aaf-d0a5bd626ea2"],
Cell[1337101, 28677, 225, 6, 3723, "Print",ExpressionUUID->"43c6a662-63aa-4996-8560-6fd58a010b76"],
Cell[1337329, 28685, 1966, 53, 7996, "Print",ExpressionUUID->"af71f703-7e25-428a-99e7-04b09ec3b643"],
Cell[1339298, 28740, 315, 8, 3848, "Print",ExpressionUUID->"3e0de1b1-fb28-4cf0-8254-c8a7afd41536"],
Cell[1339616, 28750, 459811, 7574, 10257, "Print",ExpressionUUID->"4ddd6510-b5e7-4856-aba1-29fbffe5f112"],
Cell[1799430, 36326, 362, 12, 2173, "Print",ExpressionUUID->"cc644685-2bec-464a-baea-8f81f2c17726"],
Cell[1799795, 36340, 518, 16, 2173, "Print",ExpressionUUID->"1a7a3973-0677-4044-b304-b79d0804bde1"],
Cell[1800316, 36358, 232, 6, 3723, "Print",ExpressionUUID->"85570300-5c67-47a5-9c2f-9139f84ba7d3"],
Cell[1800551, 36366, 890, 25, 2173, "Print",ExpressionUUID->"b5161d03-f183-44ac-8a36-97a73ae2f15d"],
Cell[1801444, 36393, 875, 25, 2173, "Print",ExpressionUUID->"7934eafb-8e77-4fd2-be91-46a8788933df"],
Cell[1802322, 36420, 877, 25, 2173, "Print",ExpressionUUID->"602a6685-52dd-4231-b3e0-8ff4647427a0"],
Cell[1803202, 36447, 234, 6, 3723, "Print",ExpressionUUID->"05101369-66d2-4c8a-9682-d2a42753d637"],
Cell[1803439, 36455, 969, 30, 2173, "Print",ExpressionUUID->"46a0bd2c-adca-438d-9d2a-2efff500f469"],
Cell[1804411, 36487, 180, 4, 2173, "Print",ExpressionUUID->"f02f6b9f-82fb-434f-bf83-76beef39d027"],
Cell[1804594, 36493, 820, 26, 2173, "Print",ExpressionUUID->"38e6fdd9-3ac1-4ef9-bb64-94d1a00b50dc"],
Cell[1805417, 36521, 229, 6, 3723, "Print",ExpressionUUID->"3a7cb196-110a-496e-9b6d-d99fac21a310"],
Cell[1805649, 36529, 2060, 57, 7996, "Print",ExpressionUUID->"64d73d96-b169-47d4-9f96-e0fbb341453a"],
Cell[1807712, 36588, 317, 8, 3848, "Print",ExpressionUUID->"43573633-b850-4531-a8dc-935dd62d55b5"],
Cell[1808032, 36598, 384, 12, 2173, "Print",ExpressionUUID->"510aa90a-1b0e-4d80-b19b-62b70c5854b0"],
Cell[1808419, 36612, 404, 13, 2173, "Print",ExpressionUUID->"a57f9b48-45db-4120-b3a8-8af559abc356"],
Cell[1808826, 36627, 404, 13, 2173, "Print",ExpressionUUID->"cfa678b6-f289-449e-8733-47d8845e8ae2"],
Cell[1809233, 36642, 956, 29, 3032, "Print",ExpressionUUID->"fd04154a-5619-4159-ad91-e4dd81b58843"],
Cell[1810192, 36673, 368, 12, 2173, "Print",ExpressionUUID->"59b63c3f-de92-48cf-9b9c-1e8ad27b3900"],
Cell[1810563, 36687, 612, 19, 2173, "Print",ExpressionUUID->"3f9da942-0d44-4c77-80f3-44613f242c8b"],
Cell[1811178, 36708, 231, 6, 3723, "Print",ExpressionUUID->"0bec4f2a-fbea-4d3e-bb84-aa27dd183c37"],
Cell[1811412, 36716, 635, 19, 2464, "Print",ExpressionUUID->"14bf6820-53c2-4b98-b49c-8ae44319481c"],
Cell[1812050, 36737, 368, 12, 2173, "Print",ExpressionUUID->"ed4e630e-0225-4787-a522-a033e7763a16"],
Cell[1812421, 36751, 368, 12, 2173, "Print",ExpressionUUID->"caebe952-4890-48a6-a554-7d1b4724cbd5"],
Cell[1812792, 36765, 372, 12, 2173, "Print",ExpressionUUID->"8ff673c6-98f9-4984-9d6f-bf87d1693f4d"],
Cell[1813167, 36779, 460, 14, 2173, "Print",ExpressionUUID->"3fe2e677-e57e-4acd-b8d2-52d34aec0833"],
Cell[1813630, 36795, 874, 25, 4203, "Print",ExpressionUUID->"58eb9dee-2c0e-47f8-b6d6-5e12705290bd"],
Cell[1814507, 36822, 892, 25, 2173, "Print",ExpressionUUID->"55b99394-0731-4dc2-9c03-fc7d8f6c3863"],
Cell[1815402, 36849, 236, 6, 3723, "Print",ExpressionUUID->"08a21884-1c7d-4d02-bafd-a60cc07b289b"],
Cell[1815641, 36857, 975, 30, 2173, "Print",ExpressionUUID->"bd692660-845f-4cf3-946b-1d1fdf8c3761"],
Cell[1816619, 36889, 180, 4, 2173, "Print",ExpressionUUID->"0495bfd8-aa7c-4474-bda8-cf28ffa9576c"],
Cell[1816802, 36895, 824, 26, 2173, "Print",ExpressionUUID->"86b41cb0-6d76-4988-85ee-936e22fc7fc0"],
Cell[1817629, 36923, 898, 27, 2173, "Print",ExpressionUUID->"0dd2b44d-c2df-4915-b908-6dda6e78f398"],
Cell[1818530, 36952, 879, 26, 2173, "Print",ExpressionUUID->"76483bab-4188-47be-8a95-7830bd0f58c6"],
Cell[1819412, 36980, 233, 6, 3723, "Print",ExpressionUUID->"e10c0d4e-2b4e-442c-a561-0b04b2424978"],
Cell[1819648, 36988, 865, 27, 2173, "Print",ExpressionUUID->"694f6a18-6354-46a5-b5d2-07b3e847d35f"],
Cell[1820516, 37017, 181, 4, 2173, "Print",ExpressionUUID->"7859c347-a136-4159-90e5-b10e16e1d444"],
Cell[1820700, 37023, 1178, 34, 2173, "Print",ExpressionUUID->"1270b464-32bc-4e12-9590-fda790f2ac00"],
Cell[1821881, 37059, 871, 25, 2173, "Print",ExpressionUUID->"0f33baa0-6ff7-4671-84bd-f565d0de45d6"],
Cell[1822755, 37086, 691, 20, 2173, "Print",ExpressionUUID->"ec2bbcb3-8291-471e-b50d-71e99ec09c7d"],
Cell[1823449, 37108, 449, 14, 2173, "Print",ExpressionUUID->"601bd519-5238-4a88-9c2d-2179d6411683"],
Cell[1823901, 37124, 1108, 32, 2173, "Print",ExpressionUUID->"014a2a77-154f-40ec-8341-0220eba7b47b"],
Cell[1825012, 37158, 234, 6, 3723, "Print",ExpressionUUID->"3ab91717-8259-469e-a06b-22ffbea92cc6"],
Cell[1825249, 37166, 971, 30, 2173, "Print",ExpressionUUID->"9d3b519c-d2c0-4090-8c74-1cc5d9b5f65c"],
Cell[1826223, 37198, 182, 4, 2173, "Print",ExpressionUUID->"fa554511-12ef-457c-a33f-f36aaca47d3c"],
Cell[1826408, 37204, 820, 26, 2173, "Print",ExpressionUUID->"c18d4b60-cd9a-4aa0-97e4-516f3faee512"],
Cell[1827231, 37232, 414, 12, 2173, "Print",ExpressionUUID->"8952de6a-7985-4fc4-8bc8-f79b70d40e9f"],
Cell[1827648, 37246, 413, 13, 2173, "Print",ExpressionUUID->"fbef1cb4-e054-4d8f-8476-802cfc198fd3"],
Cell[1828064, 37261, 180, 4, 2173, "Print",ExpressionUUID->"4087a854-8041-4e18-a173-a6490d0287fc"],
Cell[1828247, 37267, 981, 30, 2173, "Print",ExpressionUUID->"da8ec055-cda4-406c-a97d-1d0766e58911"],
Cell[1829231, 37299, 1651, 48, 4203, "Print",ExpressionUUID->"2842bcfc-23a2-4df2-b9fd-083ab0f1f4c6"],
Cell[1830885, 37349, 1548, 43, 4203, "Print",ExpressionUUID->"84cc6ee6-3866-40f6-8b7d-10934b12b923"],
Cell[1832436, 37394, 235, 6, 3723, "Print",ExpressionUUID->"bc4ac5d6-83be-4967-b876-9aa1b333b2aa"],
Cell[1832674, 37402, 867, 27, 2173, "Print",ExpressionUUID->"6fc1b5e3-6704-4fa4-bca1-950bad2f015c"],
Cell[1833544, 37431, 181, 4, 2173, "Print",ExpressionUUID->"03dd7b6b-fbf3-4756-946d-4bd56c0ccfa2"],
Cell[1833728, 37437, 1180, 34, 2173, "Print",ExpressionUUID->"933d428a-c405-4519-8d60-5e17abbe2925"],
Cell[1834911, 37473, 232, 6, 3723, "Print",ExpressionUUID->"0ec077c8-fbe7-49c3-82d6-db4bcc337d7a"],
Cell[1835146, 37481, 1480, 46, 4203, "Print",ExpressionUUID->"f24b372f-e950-4f2a-871b-ff67a1c90323"],
Cell[1836629, 37529, 506, 15, 2173, "Print",ExpressionUUID->"6706523d-1c7e-464a-b0c0-e1a7614348b7"],
Cell[1837138, 37546, 362, 13, 2173, "Print",ExpressionUUID->"ab2e0f99-9ea9-4204-bf91-1beaf72db8fe"],
Cell[1837503, 37561, 420, 14, 2173, "Print",ExpressionUUID->"dc47a516-33e5-417e-877d-de8d555e93da"],
Cell[1837926, 37577, 397, 13, 2173, "Print",ExpressionUUID->"3401147f-9f5b-4ec2-b1b4-8f5fe48abcc3"],
Cell[1838326, 37592, 387, 13, 2173, "Print",ExpressionUUID->"81530a36-b969-4fe9-a290-6384c36692b8"],
Cell[1838716, 37607, 391, 13, 2173, "Print",ExpressionUUID->"10aebcd1-59e9-4057-ac68-793020110494"],
Cell[1839110, 37622, 413, 13, 2173, "Print",ExpressionUUID->"4a0621f1-6b32-4ea6-8700-c042522a9478"],
Cell[1839526, 37637, 399, 13, 2173, "Print",ExpressionUUID->"0e896a3f-278b-41c7-8be1-46abe7c8f6d8"],
Cell[1839928, 37652, 419, 13, 2173, "Print",ExpressionUUID->"e37d5cf1-a2ce-404c-9709-bfae44d37ab3"],
Cell[1840350, 37667, 405, 13, 2173, "Print",ExpressionUUID->"ceffab13-7831-4d24-90f2-ab2f55004aa5"],
Cell[1840758, 37682, 187, 4, 2173, "Print",ExpressionUUID->"1b2c3560-a2e9-4569-a699-9ed2fa80cb0c"],
Cell[1840948, 37688, 373, 11, 2173, "Print",ExpressionUUID->"608e0482-e668-4c64-8e4b-dc90c4eec30a"],
Cell[1841324, 37701, 388, 12, 2173, "Print",ExpressionUUID->"9f3575e0-9aa3-488a-8290-0688771a833d"],
Cell[1841715, 37715, 370, 12, 2173, "Print",ExpressionUUID->"e2710653-9f7c-4bf3-a9ab-ec83d480495e"],
Cell[1842088, 37729, 182, 4, 2173, "Print",ExpressionUUID->"6e434041-6155-405d-bac3-a571096953e7"],
Cell[1842273, 37735, 180, 4, 2173, "Print",ExpressionUUID->"01e46b48-68bc-4126-bf95-ba787d99f125"]
}, Open  ]],
Cell[1842468, 37742, 426, 11, 3032, "Output",ExpressionUUID->"fbe6b760-58ad-406b-9d6d-cf526aeef653"]
}, Closed]],
Cell[1842909, 37756, 156, 4, 35, "Input",ExpressionUUID->"ed370dbd-af3d-445c-9d2f-5e5c85fc867f"],
Cell[1843068, 37762, 401, 7, 41, "Input",ExpressionUUID->"14431ec5-ae4f-48f6-ab82-9befaaf010c4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1843506, 37774, 167, 2, 59, "Subsubsection",ExpressionUUID->"8ee28677-fede-48db-bc9d-d287a97ceabf"],
Cell[CellGroupData[{
Cell[1843698, 37780, 122, 2, 41, "Input",ExpressionUUID->"0c8b8bb9-72a7-4a89-9784-607d42f674d0"],
Cell[CellGroupData[{
Cell[1843845, 37786, 349, 7, 78, "Print",ExpressionUUID->"ec2819c9-9df3-496c-bd61-a1e57d806103",
 CellTags->"Info3626679657-1845125"],
Cell[1844197, 37795, 1152, 30, 33, "Print",ExpressionUUID->"7a7b32ae-83f3-41a6-a50f-3c90adb2e27c",
 CellTags->"Info3626679657-1845125"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1845398, 37831, 120, 2, 41, "Input",ExpressionUUID->"73171acf-6fd2-464d-9034-e10255e6f080"],
Cell[CellGroupData[{
Cell[1845543, 37837, 353, 7, 78, "Print",ExpressionUUID->"ad9d2137-3cdd-4aa0-a0a9-6f2569ea21c9",
 CellTags->"Info3626679660-1845125"],
Cell[1845899, 37846, 1305, 34, 33, "Print",ExpressionUUID->"00b5cd1d-7e3f-4031-bb9e-187ad7ed1b6b",
 CellTags->"Info3626679660-1845125"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1847253, 37886, 127, 2, 41, "Input",ExpressionUUID->"877e52d7-41c8-4e26-a6fc-257c07709d14"],
Cell[CellGroupData[{
Cell[1847405, 37892, 357, 6, 78, "Print",ExpressionUUID->"5dd399ea-01a9-4d7b-8e09-045525794522",
 CellTags->"Info3626679695-1845125"],
Cell[1847765, 37900, 2409, 62, 63, "Print",ExpressionUUID->"41f0fa71-a6a9-4769-87eb-ce9f936ae3a8",
 CellTags->"Info3626679695-1845125"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1850223, 37968, 126, 2, 41, "Input",ExpressionUUID->"c08e145e-2fa2-4ffd-b228-7ed9764b8024"],
Cell[CellGroupData[{
Cell[1850374, 37974, 131, 2, 60, "Print",ExpressionUUID->"1f870f63-74e3-46f2-b9de-41db22e4ba1b",
 CellTags->"Info3626682266-2754311"],
Cell[1850508, 37978, 1611, 42, 92, "Print",ExpressionUUID->"6b24f61d-01cc-4ffe-ad1c-70aca2e8edd5",
 CellTags->"Info3626682266-2754311"]
}, Open  ]]
}, Open  ]],
Cell[1852146, 38024, 298, 4, 66, "Text",ExpressionUUID->"57cf1a4d-3a75-4e97-a62c-20c2fc6bf3d8"],
Cell[1852447, 38030, 3336, 73, 362, "Input",ExpressionUUID->"69b6d443-8e17-41f0-8e37-5a1d28931d32"],
Cell[CellGroupData[{
Cell[1855808, 38107, 223, 5, 41, "Input",ExpressionUUID->"75a88c2d-decd-4e60-9114-34a05228d293"],
Cell[1856034, 38114, 9423, 217, 412, "Output",ExpressionUUID->"4132f186-bbbd-474a-a226-f4770b6323c9"]
}, Open  ]],
Cell[1865472, 38334, 84, 2, 41, "Input",ExpressionUUID->"7e2c253d-cb85-4314-ae45-ad3b4dc42fc5"],
Cell[CellGroupData[{
Cell[1865581, 38340, 440, 8, 41, "Input",ExpressionUUID->"00e0cd26-20e5-4f43-b0f5-01a71aaedbe8"],
Cell[1866024, 38350, 5983, 143, 412, "Output",ExpressionUUID->"243d0465-809e-44c3-a190-eb0511055eaa"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1872044, 38498, 266, 6, 41, "Input",ExpressionUUID->"0bd519ce-e844-4a4e-afb5-67145ee4496e"],
Cell[1872313, 38506, 5627, 141, 412, "Output",ExpressionUUID->"d7767787-cc19-4f02-9919-ef7b3b12dbeb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1877977, 38652, 263, 6, 41, "Input",ExpressionUUID->"2645ba8d-03aa-4767-9a4d-bfd6596bc552"],
Cell[1878243, 38660, 5603, 141, 412, "Output",ExpressionUUID->"fbaf81d6-94ec-47d2-81ae-3c16ee8a19b3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1883883, 38806, 293, 6, 41, "Input",ExpressionUUID->"506ba329-2ea2-40c5-9ed2-143e4d01df92"],
Cell[1884179, 38814, 5870, 143, 412, "Output",ExpressionUUID->"2145e0ce-3a73-49fe-bf55-0e821b75eb7a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1890086, 38962, 294, 6, 41, "Input",ExpressionUUID->"622f7a62-45cd-4b05-b530-fdaa1c5cf46c"],
Cell[1890383, 38970, 5631, 141, 412, "Output",ExpressionUUID->"c99596ee-437b-47a8-89d5-c9ce7820481e"]
}, Open  ]],
Cell[1896029, 39114, 139, 1, 46, "Text",ExpressionUUID->"ae3b0a21-cc75-411e-af26-96317cb47793"],
Cell[CellGroupData[{
Cell[1896193, 39119, 220, 5, 41, "Input",ExpressionUUID->"bd5420fb-4a7e-4aa5-a36f-2d1ba1d7d4e5"],
Cell[1896416, 39126, 7558, 178, 412, "Output",ExpressionUUID->"5f52955e-1b56-405d-a71a-a2f1ca206269"]
}, Open  ]],
Cell[1903989, 39307, 96, 1, 41, "Input",ExpressionUUID->"f0d9d7a5-99d9-4413-aad7-322412dca297"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1904134, 39314, 111, 1, 88, "Section",ExpressionUUID->"b16cd613-2122-41cb-bff9-7cc9e239b9e0"],
Cell[CellGroupData[{
Cell[1904270, 39319, 166, 3, 59, "Subsubsection",ExpressionUUID->"f8201147-483b-4fca-9a5b-20867d0c0965"],
Cell[1904439, 39324, 1648, 45, 138, "Input",ExpressionUUID->"63f2093b-2b5d-4870-b6c6-45d799a60572"],
Cell[CellGroupData[{
Cell[1906112, 39373, 103, 1, 41, "Input",ExpressionUUID->"e35fc543-4bb0-4768-b5bf-393556289925"],
Cell[1906218, 39376, 1487, 43, 79, "Output",ExpressionUUID->"50836e47-bc7a-49ff-a9bf-4b3f1967bb09"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1907742, 39424, 253, 7, 41, "Input",ExpressionUUID->"2de76498-a0c7-4eb0-8819-d51c9e946e7b"],
Cell[1907998, 39433, 168, 4, 46, "Output",ExpressionUUID->"20a12b77-66e8-44e8-8496-10b4030cafa3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1908203, 39442, 1249, 31, 234, "Input",ExpressionUUID->"b512592e-23a2-4431-924c-11932af29c23"],
Cell[1909455, 39475, 165, 4, 33, "Print",ExpressionUUID->"32f26699-ee44-43a3-a865-17f8a715b7b3"],
Cell[1909623, 39481, 1526, 41, 79, "Output",ExpressionUUID->"f600ea73-1f09-48b0-9a03-45a42a7278f8"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1911198, 39528, 95, 1, 59, "Subsubsection",ExpressionUUID->"6bc8f1d3-0196-4248-a762-dcb488f1ecaa"],
Cell[CellGroupData[{
Cell[1911318, 39533, 10280, 219, 1470, "Input",ExpressionUUID->"94749ebf-85cc-4450-ac4f-a669526ac2c7",
 InitializationCell->True],
Cell[1921601, 39754, 642, 11, 78, "Print",ExpressionUUID->"5216d1ef-0a75-4cb7-9f40-23f863ea27c9",
 CellTags->"Info173711446207-1085476"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

