(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
ClearAll[Cx];
Cx::usage="Cx[n] creates a list of n variables named x1,x2,...,xn.";
Cx[n_]:=Table[Symbol["x"<>ToString[i]],{i,n}];


(* ::Input::Initialization:: *)
ClearAll[payoff];
payoff::usage="payoff[m,i,j] returns the payoff of i-upstream and j-upstream in the m-market.\r
It is used in the case of importing streams (not precomputed). It is assumed that u , d , and noAttr have been already assigned.";
payoff[m_,i_,j_]:=(Prepend[Cx[noAttr-1],1]u[[m,i]]).d[[m,j]];


(* ::Input::Initialization:: *)
ClearAll[payoffDM];(*DM from Distance Matrix*)
payoffDM::usage="payoffDM[m,i,j] returns the payoff of i-upstream and j-upstream in the m-market.\r
It is used in the case of precomputed data. It is assumed that noAttr and distanceMatrices have been already assigned.";
payoffDM[m_,i_,j_]:=Prepend[Cx[noAttr-1],1].distanceMatrices[[m,i,j]];


(* ::Input::Initialization:: *)
(*C in front of the name means create*)
ClearAll[CpayoffMatrix];
CpayoffMatrix::usage="CpayoffMatrix[payoff(or payoffDM),noM_,noU_:noU,noD_:noD,parallel_:False] calculates and assigns the payoffMatrix.\r 
In case of separated streams payoff is used and in the case of precomputed data payoffDM is used.\r

CpayoffMatrix[solution_] substitutes the solution to all payoffMatrix's entries.
";
CpayoffMatrix[payoff_,noM_,noU_:noU,noD_:noD,p_:False]:=
payoffMatrix=
If[p==False,
Table[payoff[m,i,j]
,{m,1,noM},{i,noU[[m]]},{j,noD[[m]]}],
ParallelTable[payoff[m,i,j]
,{m,1,noM},{i,noU[[m]]},{j,noD[[m]]}]
]

CpayoffMatrix[solution_]:=
If[ListQ@solution && (Length@solution)===noAttr-1,
payoffMatrix=(payoffMatrix/.Thread[Cx[noAttr-1]->solution])
,
Print["There is some problem with your input. Couldn't calculate anything meaningful."]
]


(* ::Input::Initialization:: *)
(*C in front of the name means create*)
ClearAll[Ctotalpayoff];
Ctotalpayoff::usage="Ctotalpayoff[payoffobject,mates] calculates the total payoff that a specific match defined by mates returns.
If the payoffobject is the payoff function then the head equals Symbol and the corresponding routine is used.
If the payoffobject is the payoffMatrix then the head equals List and the corresponding routine is used.";
Ctotalpayoff[payoffobject_,mates_]:=
totalpayoff=
Switch[Head@payoffobject,
(*payoff function*)Symbol,Map[payoffobject@@#&,mates,{2}],
(*payoffMatrix*)List,Map[Part@@Join[{payoffobject},#]&,mates,{2}]
]



